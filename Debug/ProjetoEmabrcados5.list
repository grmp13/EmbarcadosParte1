
ProjetoEmabrcados5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009a48  08009a48  0000aa48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dfc  08009dfc  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009dfc  08009dfc  0000adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e04  08009e04  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e04  08009e04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e08  08009e08  0000ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009e0c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047ec  2000006c  08009e78  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004858  08009e78  0000b858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4eb  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd8  00000000  00000000  00028587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ef  00000000  00000000  0002db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6af  00000000  00000000  0002eeef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8cf  00000000  00000000  0005a59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110b68  00000000  00000000  00076e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001879d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007408  00000000  00000000  00187a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a30 	.word	0x08009a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009a30 	.word	0x08009a30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000088 	.word	0x20000088
 8000590:	20000128 	.word	0x20000128

08000594 <HCSR04_Read>:
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ECHO_PORT, &GPIO_InitStruct);
}

uint32_t HCSR04_Read(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	uint32_t start_time = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
	uint32_t stop_time = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f003 fa5c 	bl	8003a6c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80005b4:	2002      	movs	r0, #2
 80005b6:	f001 fd6f 	bl	8002098 <HAL_Delay>
	HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f003 fa52 	bl	8003a6c <HAL_GPIO_WritePin>
	HAL_Delay(0.01);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f001 fd65 	bl	8002098 <HAL_Delay>
	HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f003 fa48 	bl	8003a6c <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET)
 80005dc:	bf00      	nop
 80005de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f003 fa29 	bl	8003a3c <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f6      	beq.n	80005de <HCSR04_Read+0x4a>
		;

	start_time = HAL_GetTick();
 80005f0:	f001 fd46 	bl	8002080 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]

	while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET)
 80005f6:	bf00      	nop
 80005f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f003 fa1c 	bl	8003a3c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d0f6      	beq.n	80005f8 <HCSR04_Read+0x64>
		;

	stop_time = HAL_GetTick();
 800060a:	f001 fd39 	bl	8002080 <HAL_GetTick>
 800060e:	6078      	str	r0, [r7, #4]
	local_time = stop_time - start_time;
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	60fb      	str	r3, [r7, #12]
	uint32_t distance = (local_time * 34300) / 2000;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f248 52fc 	movw	r2, #34300	@ 0x85fc
 800061e:	fb02 f303 	mul.w	r3, r2, r3
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <HCSR04_Read+0xa4>)
 8000624:	fba2 2303 	umull	r2, r3, r2, r3
 8000628:	09db      	lsrs	r3, r3, #7
 800062a:	603b      	str	r3, [r7, #0]

	return distance;
 800062c:	683b      	ldr	r3, [r7, #0]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	10624dd3 	.word	0x10624dd3

0800063c <Buzzer_Init>:

void Buzzer_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000640:	2100      	movs	r1, #0
 8000642:	4802      	ldr	r0, [pc, #8]	@ (800064c <Buzzer_Init+0x10>)
 8000644:	f004 fec0 	bl	80053c8 <HAL_TIM_PWM_Start>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200003f0 	.word	0x200003f0

08000650 <SetBuzzerIntensity>:

void SetBuzzerIntensity(uint16_t dutyCycle) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyCycle);
 800065a:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <SetBuzzerIntensity+0x20>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	88fa      	ldrh	r2, [r7, #6]
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200003f0 	.word	0x200003f0

08000674 <leituraPotenciometro1>:

int16_t leituraPotenciometro1(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000678:	4807      	ldr	r0, [pc, #28]	@ (8000698 <leituraPotenciometro1+0x24>)
 800067a:	f002 f865 	bl	8002748 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800067e:	f04f 31ff 	mov.w	r1, #4294967295
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <leituraPotenciometro1+0x24>)
 8000684:	f002 f91a 	bl	80028bc <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <leituraPotenciometro1+0x24>)
 800068a:	f002 f9ef 	bl	8002a6c <HAL_ADC_GetValue>
 800068e:	4603      	mov	r3, r0
 8000690:	b21b      	sxth	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000328 	.word	0x20000328

0800069c <leituraPotenciometro2>:
int16_t leituraPotenciometro2(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <leituraPotenciometro2+0x24>)
 80006a2:	f002 f851 	bl	8002748 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80006a6:	f04f 31ff 	mov.w	r1, #4294967295
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <leituraPotenciometro2+0x24>)
 80006ac:	f002 f906 	bl	80028bc <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc2);
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <leituraPotenciometro2+0x24>)
 80006b2:	f002 f9db 	bl	8002a6c <HAL_ADC_GetValue>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b21b      	sxth	r3, r3
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000038c 	.word	0x2000038c

080006c4 <vTaskLed>:

void vTaskLed(void *pvParameters) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	for (;;) {
		if (distanciaGlobal == 0) {
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <vTaskLed+0x34>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <vTaskLed+0x26>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f003 f9de 	bl	8003a9c <HAL_GPIO_TogglePin>
			vTaskDelay(500);
 80006e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006e4:	f007 fa10 	bl	8007b08 <vTaskDelay>
 80006e8:	e7f0      	b.n	80006cc <vTaskLed+0x8>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2180      	movs	r1, #128	@ 0x80
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f2:	f003 f9bb 	bl	8003a6c <HAL_GPIO_WritePin>
		if (distanciaGlobal == 0) {
 80006f6:	e7e9      	b.n	80006cc <vTaskLed+0x8>
 80006f8:	20000518 	.word	0x20000518

080006fc <vTaskBuzzer>:
		}
	}
}

void vTaskBuzzer(void *pvParameters) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	Buzzer_Init();
 8000704:	f7ff ff9a 	bl	800063c <Buzzer_Init>

	for (;;) {
		if (distanciaGlobal == 0) {
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <vTaskBuzzer+0x34>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	b21b      	sxth	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1fa      	bne.n	8000708 <vTaskBuzzer+0xc>
			SetBuzzerIntensity(30);
 8000712:	201e      	movs	r0, #30
 8000714:	f7ff ff9c 	bl	8000650 <SetBuzzerIntensity>
			HAL_Delay(200);
 8000718:	20c8      	movs	r0, #200	@ 0xc8
 800071a:	f001 fcbd 	bl	8002098 <HAL_Delay>
			SetBuzzerIntensity(0);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff96 	bl	8000650 <SetBuzzerIntensity>
			HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000728:	f001 fcb6 	bl	8002098 <HAL_Delay>
		if (distanciaGlobal == 0) {
 800072c:	e7ec      	b.n	8000708 <vTaskBuzzer+0xc>
 800072e:	bf00      	nop
 8000730:	20000518 	.word	0x20000518

08000734 <vTaskSensorUltrassonico>:
		}
	}
}
void vTaskSensorUltrassonico(void *pvParameters) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	6078      	str	r0, [r7, #4]
	volatile int16_t distancia = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	81fb      	strh	r3, [r7, #14]

	for (;;) {
		distancia = HCSR04_Read();
 8000740:	f7ff ff28 	bl	8000594 <HCSR04_Read>
 8000744:	4603      	mov	r3, r0
 8000746:	b21b      	sxth	r3, r3
 8000748:	81fb      	strh	r3, [r7, #14]

		if (distancia <= 20) {
 800074a:	89fb      	ldrh	r3, [r7, #14]
 800074c:	b21b      	sxth	r3, r3
 800074e:	2b14      	cmp	r3, #20
 8000750:	dc1b      	bgt.n	800078a <vTaskSensorUltrassonico+0x56>
			distanciaGlobal = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <vTaskSensorUltrassonico+0x70>)
 8000754:	2200      	movs	r2, #0
 8000756:	801a      	strh	r2, [r3, #0]
			if ( xTaskBuzzer == 0) {
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <vTaskSensorUltrassonico+0x74>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d11b      	bne.n	8000798 <vTaskSensorUltrassonico+0x64>
				xTaskCreate(vTaskBuzzer, "Buzzer", 128, NULL, 1, &xTaskBuzzer);
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <vTaskSensorUltrassonico+0x74>)
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	2301      	movs	r3, #1
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2300      	movs	r3, #0
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	490f      	ldr	r1, [pc, #60]	@ (80007ac <vTaskSensorUltrassonico+0x78>)
 800076e:	4810      	ldr	r0, [pc, #64]	@ (80007b0 <vTaskSensorUltrassonico+0x7c>)
 8000770:	f006 ffea 	bl	8007748 <xTaskCreate>
				xTaskCreate(vTaskLed, "Led", 128, NULL, 1, &xTaskLed);
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <vTaskSensorUltrassonico+0x80>)
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	2301      	movs	r3, #1
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2300      	movs	r3, #0
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	490d      	ldr	r1, [pc, #52]	@ (80007b8 <vTaskSensorUltrassonico+0x84>)
 8000782:	480e      	ldr	r0, [pc, #56]	@ (80007bc <vTaskSensorUltrassonico+0x88>)
 8000784:	f006 ffe0 	bl	8007748 <xTaskCreate>
 8000788:	e006      	b.n	8000798 <vTaskSensorUltrassonico+0x64>
			}
		} else if (distancia > 20) {
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	b21b      	sxth	r3, r3
 800078e:	2b14      	cmp	r3, #20
 8000790:	dd02      	ble.n	8000798 <vTaskSensorUltrassonico+0x64>
			distanciaGlobal = 1;
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <vTaskSensorUltrassonico+0x70>)
 8000794:	2201      	movs	r2, #1
 8000796:	801a      	strh	r2, [r3, #0]
		}

		vTaskDelay(pdMS_TO_TICKS(700));
 8000798:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800079c:	f007 f9b4 	bl	8007b08 <vTaskDelay>
		distancia = HCSR04_Read();
 80007a0:	e7ce      	b.n	8000740 <vTaskSensorUltrassonico+0xc>
 80007a2:	bf00      	nop
 80007a4:	20000518 	.word	0x20000518
 80007a8:	2000053c 	.word	0x2000053c
 80007ac:	08009a48 	.word	0x08009a48
 80007b0:	080006fd 	.word	0x080006fd
 80007b4:	20000540 	.word	0x20000540
 80007b8:	08009a50 	.word	0x08009a50
 80007bc:	080006c5 	.word	0x080006c5

080007c0 <vTaskMotorPassos>:
	}
}

void vTaskMotorPassos(void *pvParameters) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	flagMotor = 0;
 80007c8:	4b48      	ldr	r3, [pc, #288]	@ (80008ec <vTaskMotorPassos+0x12c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
	for (;;) {

		if (distanciaGlobal == 1) {
 80007ce:	4b48      	ldr	r3, [pc, #288]	@ (80008f0 <vTaskMotorPassos+0x130>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d17b      	bne.n	80008d0 <vTaskMotorPassos+0x110>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e2:	f003 f943 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	@ 0x40
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ee:	f003 f93d 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f8:	483e      	ldr	r0, [pc, #248]	@ (80008f4 <vTaskMotorPassos+0x134>)
 80007fa:	f003 f937 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000804:	483b      	ldr	r0, [pc, #236]	@ (80008f4 <vTaskMotorPassos+0x134>)
 8000806:	f003 f931 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_Delay(2);
 800080a:	2002      	movs	r0, #2
 800080c:	f001 fc44 	bl	8002098 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f003 f927 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2140      	movs	r1, #64	@ 0x40
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f003 f921 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000830:	4830      	ldr	r0, [pc, #192]	@ (80008f4 <vTaskMotorPassos+0x134>)
 8000832:	f003 f91b 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083c:	482d      	ldr	r0, [pc, #180]	@ (80008f4 <vTaskMotorPassos+0x134>)
 800083e:	f003 f915 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_Delay(2);
 8000842:	2002      	movs	r0, #2
 8000844:	f001 fc28 	bl	8002098 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000852:	f003 f90b 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085e:	f003 f905 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	4822      	ldr	r0, [pc, #136]	@ (80008f4 <vTaskMotorPassos+0x134>)
 800086a:	f003 f8ff 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	481f      	ldr	r0, [pc, #124]	@ (80008f4 <vTaskMotorPassos+0x134>)
 8000876:	f003 f8f9 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_Delay(2);
 800087a:	2002      	movs	r0, #2
 800087c:	f001 fc0c 	bl	8002098 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f003 f8ef 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	@ 0x40
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f003 f8e9 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a0:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <vTaskMotorPassos+0x134>)
 80008a2:	f003 f8e3 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008ac:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <vTaskMotorPassos+0x134>)
 80008ae:	f003 f8dd 	bl	8003a6c <HAL_GPIO_WritePin>
			HAL_Delay(2);
 80008b2:	2002      	movs	r0, #2
 80008b4:	f001 fbf0 	bl	8002098 <HAL_Delay>
			if(flagMotor == 0){
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <vTaskMotorPassos+0x12c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d185      	bne.n	80007ce <vTaskMotorPassos+0xe>
				printf("Sensor livre\n\r");
 80008c2:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <vTaskMotorPassos+0x138>)
 80008c4:	f008 f9f0 	bl	8008ca8 <iprintf>
				flagMotor = 1;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <vTaskMotorPassos+0x12c>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e77e      	b.n	80007ce <vTaskMotorPassos+0xe>
			}
		}else{
			if(flagMotor == 1){
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <vTaskMotorPassos+0x12c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	f47f af79 	bne.w	80007ce <vTaskMotorPassos+0xe>
				printf("Sensor obstruido\n\r");
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <vTaskMotorPassos+0x13c>)
 80008de:	f008 f9e3 	bl	8008ca8 <iprintf>
				flagMotor = 0;
 80008e2:	4b02      	ldr	r3, [pc, #8]	@ (80008ec <vTaskMotorPassos+0x12c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
		if (distanciaGlobal == 1) {
 80008e8:	e771      	b.n	80007ce <vTaskMotorPassos+0xe>
 80008ea:	bf00      	nop
 80008ec:	20000525 	.word	0x20000525
 80008f0:	20000518 	.word	0x20000518
 80008f4:	48000400 	.word	0x48000400
 80008f8:	08009a54 	.word	0x08009a54
 80008fc:	08009a64 	.word	0x08009a64

08000900 <vTaskReceiveCommand>:
		}
	}

}

void vTaskReceiveCommand(void *pvParameters) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_UART_Receive(&huart2, (uint8_t*)&received_command, 1, HAL_MAX_DELAY);
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2201      	movs	r2, #1
 800090e:	4902      	ldr	r1, [pc, #8]	@ (8000918 <vTaskReceiveCommand+0x18>)
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <vTaskReceiveCommand+0x1c>)
 8000912:	f005 ff26 	bl	8006762 <HAL_UART_Receive>
 8000916:	e7f7      	b.n	8000908 <vTaskReceiveCommand+0x8>
 8000918:	2000051a 	.word	0x2000051a
 800091c:	20000488 	.word	0x20000488

08000920 <vTaskPotenciometroQtd>:

    }
}

void vTaskPotenciometroQtd(void *pvParameters) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	int16_t valorPotenciometro;
	for (;;) {
		valorPotenciometro = leituraPotenciometro1();
 8000928:	f7ff fea4 	bl	8000674 <leituraPotenciometro1>
 800092c:	4603      	mov	r3, r0
 800092e:	81fb      	strh	r3, [r7, #14]
		potenciometroQuantidade = valorPotenciometro / 10;
 8000930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <vTaskPotenciometroQtd+0x34>)
 8000936:	fb82 1203 	smull	r1, r2, r2, r3
 800093a:	1092      	asrs	r2, r2, #2
 800093c:	17db      	asrs	r3, r3, #31
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b21a      	sxth	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <vTaskPotenciometroQtd+0x38>)
 8000944:	801a      	strh	r2, [r3, #0]
		HAL_Delay(1000);
 8000946:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094a:	f001 fba5 	bl	8002098 <HAL_Delay>
		valorPotenciometro = leituraPotenciometro1();
 800094e:	bf00      	nop
 8000950:	e7ea      	b.n	8000928 <vTaskPotenciometroQtd+0x8>
 8000952:	bf00      	nop
 8000954:	66666667 	.word	0x66666667
 8000958:	20000514 	.word	0x20000514

0800095c <vTaskPotenciometroBalanca>:
	}
}

void vTaskPotenciometroBalanca(void *pvParameters) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	int16_t valorPotenciometroBalanca;

	for (;;) {
		valorPotenciometroBalanca = leituraPotenciometro2();
 8000964:	f7ff fe9a 	bl	800069c <leituraPotenciometro2>
 8000968:	4603      	mov	r3, r0
 800096a:	81fb      	strh	r3, [r7, #14]
		potenciometroBalanca = valorPotenciometroBalanca / 10;
 800096c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <vTaskPotenciometroBalanca+0x34>)
 8000972:	fb82 1203 	smull	r1, r2, r2, r3
 8000976:	1092      	asrs	r2, r2, #2
 8000978:	17db      	asrs	r3, r3, #31
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b21a      	sxth	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <vTaskPotenciometroBalanca+0x38>)
 8000980:	801a      	strh	r2, [r3, #0]
		HAL_Delay(1000);
 8000982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000986:	f001 fb87 	bl	8002098 <HAL_Delay>
		valorPotenciometroBalanca = leituraPotenciometro2();
 800098a:	bf00      	nop
 800098c:	e7ea      	b.n	8000964 <vTaskPotenciometroBalanca+0x8>
 800098e:	bf00      	nop
 8000990:	66666667 	.word	0x66666667
 8000994:	20000516 	.word	0x20000516

08000998 <vTaskQuantidadeRacao>:
	}
}

void vTaskQuantidadeRacao(void *pvParameters) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	for (;;) {
		printf("Escolha a quantidade: %i\n\r", potenciometroQuantidade);
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <vTaskQuantidadeRacao+0x2c>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <vTaskQuantidadeRacao+0x30>)
 80009aa:	f008 f97d 	bl	8008ca8 <iprintf>
		potenciometroQuantidadeSelecionado = potenciometroQuantidade;
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <vTaskQuantidadeRacao+0x2c>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <vTaskQuantidadeRacao+0x34>)
 80009b6:	801a      	strh	r2, [r3, #0]
		vTaskDelay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009bc:	f007 f8a4 	bl	8007b08 <vTaskDelay>
	for (;;) {
 80009c0:	bf00      	nop
 80009c2:	e7ed      	b.n	80009a0 <vTaskQuantidadeRacao+0x8>
 80009c4:	20000514 	.word	0x20000514
 80009c8:	08009a78 	.word	0x08009a78
 80009cc:	2000051c 	.word	0x2000051c

080009d0 <vTaskEquilibrio>:
	}
}

void vTaskEquilibrio(void *pvParameters) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	volatile uint8_t flagComida = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
	volatile int16_t balancaCaindo = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	81bb      	strh	r3, [r7, #12]
	volatile int16_t balancaSubindo = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	817b      	strh	r3, [r7, #10]

	for (;;) {
		if (distanciaGlobal == 0) {
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <vTaskEquilibrio+0x8c>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10a      	bne.n	8000a04 <vTaskEquilibrio+0x34>
			if (flagComida == 0) {
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f6      	bne.n	80009e4 <vTaskEquilibrio+0x14>
				balancaCaindo = potenciometroBalanca;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <vTaskEquilibrio+0x90>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	81bb      	strh	r3, [r7, #12]
				flagComida = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e7ef      	b.n	80009e4 <vTaskEquilibrio+0x14>
			}

		} else if (distanciaGlobal == 1) {
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <vTaskEquilibrio+0x8c>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d1ea      	bne.n	80009e4 <vTaskEquilibrio+0x14>
			potenciometroQuantidadeSelecionado = potenciometroQuantidadeSelecionado - balancaCaindo;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <vTaskEquilibrio+0x94>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	89bb      	ldrh	r3, [r7, #12]
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <vTaskEquilibrio+0x94>)
 8000a24:	801a      	strh	r2, [r3, #0]
			balancaCaindo = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	81bb      	strh	r3, [r7, #12]

			if (flagComida == 1) {
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1d8      	bne.n	80009e4 <vTaskEquilibrio+0x14>
				balancaSubindo = potenciometroBalanca;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <vTaskEquilibrio+0x90>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	817b      	strh	r3, [r7, #10]
				potenciometroQuantidadeSelecionado = potenciometroQuantidadeSelecionado + balancaSubindo;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <vTaskEquilibrio+0x94>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	897b      	ldrh	r3, [r7, #10]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	4413      	add	r3, r2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <vTaskEquilibrio+0x94>)
 8000a50:	801a      	strh	r2, [r3, #0]
				flagComida = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
				balancaSubindo = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	817b      	strh	r3, [r7, #10]
		if (distanciaGlobal == 0) {
 8000a5a:	e7c3      	b.n	80009e4 <vTaskEquilibrio+0x14>
 8000a5c:	20000518 	.word	0x20000518
 8000a60:	20000516 	.word	0x20000516
 8000a64:	2000051c 	.word	0x2000051c

08000a68 <vTaskRacao>:
			}
		}
	}
}

void vTaskRacao(void *pvParameters) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
	xTaskCreate(vTaskPotenciometroBalanca, "balancaPotenciometro", 128, NULL, 1,
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <vTaskRacao+0x50>)
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	490f      	ldr	r1, [pc, #60]	@ (8000abc <vTaskRacao+0x54>)
 8000a7e:	4810      	ldr	r0, [pc, #64]	@ (8000ac0 <vTaskRacao+0x58>)
 8000a80:	f006 fe62 	bl	8007748 <xTaskCreate>
			&xTaskBalanca);
	xTaskCreate(vTaskEquilibrio, "equilibrio", 128, NULL, 1, &xTaskBalanca);
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <vTaskRacao+0x50>)
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	490c      	ldr	r1, [pc, #48]	@ (8000ac4 <vTaskRacao+0x5c>)
 8000a92:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <vTaskRacao+0x60>)
 8000a94:	f006 fe58 	bl	8007748 <xTaskCreate>
	for (;;) {
		if (potenciometroBalanca >= potenciometroQuantidadeSelecionado) {
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <vTaskRacao+0x64>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <vTaskRacao+0x68>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	db03      	blt.n	8000ab0 <vTaskRacao+0x48>
			flagRacao = 1;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <vTaskRacao+0x6c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e7f3      	b.n	8000a98 <vTaskRacao+0x30>
		} else {
			flagRacao = 0;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <vTaskRacao+0x6c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		if (potenciometroBalanca >= potenciometroQuantidadeSelecionado) {
 8000ab6:	e7ef      	b.n	8000a98 <vTaskRacao+0x30>
 8000ab8:	20000548 	.word	0x20000548
 8000abc:	08009a94 	.word	0x08009a94
 8000ac0:	0800095d 	.word	0x0800095d
 8000ac4:	08009aac 	.word	0x08009aac
 8000ac8:	080009d1 	.word	0x080009d1
 8000acc:	20000516 	.word	0x20000516
 8000ad0:	2000051c 	.word	0x2000051c
 8000ad4:	20000526 	.word	0x20000526

08000ad8 <vTaskPrint>:
		}
	}
}

void vTaskPrint(void *pvParameters) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	for (;;) {
		if(flagBotao == 1){
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <vTaskPrint+0x38>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d10d      	bne.n	8000b06 <vTaskPrint+0x2e>
			printf("Balanca: %i\n\r ", potenciometroBalanca);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <vTaskPrint+0x3c>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4619      	mov	r1, r3
 8000af2:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <vTaskPrint+0x40>)
 8000af4:	f008 f8d8 	bl	8008ca8 <iprintf>
			printf("Quantidade Racao: %i\n\r ", potenciometroQuantidadeSelecionado);
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <vTaskPrint+0x44>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <vTaskPrint+0x48>)
 8000b02:	f008 f8d1 	bl	8008ca8 <iprintf>
		}
		vTaskDelay(1500);
 8000b06:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b0a:	f006 fffd 	bl	8007b08 <vTaskDelay>
		if(flagBotao == 1){
 8000b0e:	e7e7      	b.n	8000ae0 <vTaskPrint+0x8>
 8000b10:	20000524 	.word	0x20000524
 8000b14:	20000516 	.word	0x20000516
 8000b18:	08009ab8 	.word	0x08009ab8
 8000b1c:	2000051c 	.word	0x2000051c
 8000b20:	08009ac8 	.word	0x08009ac8

08000b24 <vTaskBotao>:

	}
}

void vTaskBotao(void *pvParameters) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
	static int estadoBotaoAnterior = GPIO_PIN_RESET;
	int estadoBotaoAtual;
	int flagStatus = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]

	xTaskCreate(vTaskPotenciometroQtd, "quantidadePotenciometro", 128, NULL, 1,
 8000b30:	4b71      	ldr	r3, [pc, #452]	@ (8000cf8 <vTaskBotao+0x1d4>)
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	2301      	movs	r3, #1
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	496f      	ldr	r1, [pc, #444]	@ (8000cfc <vTaskBotao+0x1d8>)
 8000b3e:	4870      	ldr	r0, [pc, #448]	@ (8000d00 <vTaskBotao+0x1dc>)
 8000b40:	f006 fe02 	bl	8007748 <xTaskCreate>
			&xTaskPotenciometroQtd);
	xTaskCreate(vTaskQuantidadeRacao, "QuantidadeRacao", 128, NULL, 1,
 8000b44:	4b6f      	ldr	r3, [pc, #444]	@ (8000d04 <vTaskBotao+0x1e0>)
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	496d      	ldr	r1, [pc, #436]	@ (8000d08 <vTaskBotao+0x1e4>)
 8000b52:	486e      	ldr	r0, [pc, #440]	@ (8000d0c <vTaskBotao+0x1e8>)
 8000b54:	f006 fdf8 	bl	8007748 <xTaskCreate>
			&xTaskPotenciometroQuantidade);
	xTaskCreate(vTaskPrint, "print", 128, NULL, 1,
 8000b58:	4b6d      	ldr	r3, [pc, #436]	@ (8000d10 <vTaskBotao+0x1ec>)
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	496b      	ldr	r1, [pc, #428]	@ (8000d14 <vTaskBotao+0x1f0>)
 8000b66:	486c      	ldr	r0, [pc, #432]	@ (8000d18 <vTaskBotao+0x1f4>)
 8000b68:	f006 fdee 	bl	8007748 <xTaskCreate>
			&xTaskPrints);


	for (;;) {
		estadoBotaoAtual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000b6c:	2180      	movs	r1, #128	@ 0x80
 8000b6e:	486b      	ldr	r0, [pc, #428]	@ (8000d1c <vTaskBotao+0x1f8>)
 8000b70:	f002 ff64 	bl	8003a3c <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	60bb      	str	r3, [r7, #8]

		if (estadoBotaoAtual != estadoBotaoAnterior) {
 8000b78:	4b69      	ldr	r3, [pc, #420]	@ (8000d20 <vTaskBotao+0x1fc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d01e      	beq.n	8000bc0 <vTaskBotao+0x9c>
			vTaskDelay(DEBOUNCE_DELAY);
 8000b82:	2032      	movs	r0, #50	@ 0x32
 8000b84:	f006 ffc0 	bl	8007b08 <vTaskDelay>
			estadoBotaoAtual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000b88:	2180      	movs	r1, #128	@ 0x80
 8000b8a:	4864      	ldr	r0, [pc, #400]	@ (8000d1c <vTaskBotao+0x1f8>)
 8000b8c:	f002 ff56 	bl	8003a3c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	60bb      	str	r3, [r7, #8]
			if (estadoBotaoAtual != estadoBotaoAnterior) {
 8000b94:	4b62      	ldr	r3, [pc, #392]	@ (8000d20 <vTaskBotao+0x1fc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d010      	beq.n	8000bc0 <vTaskBotao+0x9c>
				estadoBotaoAnterior = estadoBotaoAtual;
 8000b9e:	4a60      	ldr	r2, [pc, #384]	@ (8000d20 <vTaskBotao+0x1fc>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	6013      	str	r3, [r2, #0]
				if (estadoBotaoAtual == GPIO_PIN_SET) {
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d10a      	bne.n	8000bc0 <vTaskBotao+0x9c>
					flagBotao = !flagBotao;
 8000baa:	4b5e      	ldr	r3, [pc, #376]	@ (8000d24 <vTaskBotao+0x200>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <vTaskBotao+0x200>)
 8000bbe:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (flagBotao == 1 && flagStatus == 0) {
 8000bc0:	4b58      	ldr	r3, [pc, #352]	@ (8000d24 <vTaskBotao+0x200>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d146      	bne.n	8000c58 <vTaskBotao+0x134>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d143      	bne.n	8000c58 <vTaskBotao+0x134>
			if (xTaskPotenciometroQuantidade != 0) {
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d04 <vTaskBotao+0x1e0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <vTaskBotao+0xc4>
				vTaskDelete(xTaskPotenciometroQuantidade);
 8000bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d04 <vTaskBotao+0x1e0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 ff03 	bl	80079e8 <vTaskDelete>
				xTaskPotenciometroQuantidade = 0;
 8000be2:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <vTaskBotao+0x1e0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
			}
			if (xTaskPotenciometroQtd != 0) {
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <vTaskBotao+0x1d4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d007      	beq.n	8000c00 <vTaskBotao+0xdc>
				vTaskDelete(xTaskPotenciometroQtd);
 8000bf0:	4b41      	ldr	r3, [pc, #260]	@ (8000cf8 <vTaskBotao+0x1d4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f006 fef7 	bl	80079e8 <vTaskDelete>
				xTaskPotenciometroQtd = 0;
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <vTaskBotao+0x1d4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
			}
			if (xTaskSensorUltrassonico == 0) {
 8000c00:	4b49      	ldr	r3, [pc, #292]	@ (8000d28 <vTaskBotao+0x204>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <vTaskBotao+0xf8>
				xTaskCreate(vTaskSensorUltrassonico, "SensorUltra", 128, NULL,
 8000c08:	4b47      	ldr	r3, [pc, #284]	@ (8000d28 <vTaskBotao+0x204>)
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	4945      	ldr	r1, [pc, #276]	@ (8000d2c <vTaskBotao+0x208>)
 8000c16:	4846      	ldr	r0, [pc, #280]	@ (8000d30 <vTaskBotao+0x20c>)
 8000c18:	f006 fd96 	bl	8007748 <xTaskCreate>
						2, &xTaskSensorUltrassonico);
			}
			if (xTaskRacao == 0) {
 8000c1c:	4b45      	ldr	r3, [pc, #276]	@ (8000d34 <vTaskBotao+0x210>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <vTaskBotao+0x114>
				xTaskCreate(vTaskRacao, "racao", 128, NULL, 1, &xTaskRacao);
 8000c24:	4b43      	ldr	r3, [pc, #268]	@ (8000d34 <vTaskBotao+0x210>)
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2280      	movs	r2, #128	@ 0x80
 8000c30:	4941      	ldr	r1, [pc, #260]	@ (8000d38 <vTaskBotao+0x214>)
 8000c32:	4842      	ldr	r0, [pc, #264]	@ (8000d3c <vTaskBotao+0x218>)
 8000c34:	f006 fd88 	bl	8007748 <xTaskCreate>
			}

			if (xTaskMotor == 0) {
 8000c38:	4b41      	ldr	r3, [pc, #260]	@ (8000d40 <vTaskBotao+0x21c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <vTaskBotao+0x130>
				xTaskCreate(vTaskMotorPassos, "MotorPassos", 128, NULL, 1,
 8000c40:	4b3f      	ldr	r3, [pc, #252]	@ (8000d40 <vTaskBotao+0x21c>)
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	2301      	movs	r3, #1
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	493d      	ldr	r1, [pc, #244]	@ (8000d44 <vTaskBotao+0x220>)
 8000c4e:	483e      	ldr	r0, [pc, #248]	@ (8000d48 <vTaskBotao+0x224>)
 8000c50:	f006 fd7a 	bl	8007748 <xTaskCreate>
						&xTaskMotor);

			}
			flagStatus = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]

		}
		if (flagBotao == 0 && flagStatus == 1 || flagRacao == 1) {
 8000c58:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <vTaskBotao+0x200>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <vTaskBotao+0x144>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d004      	beq.n	8000c72 <vTaskBotao+0x14e>
 8000c68:	4b38      	ldr	r3, [pc, #224]	@ (8000d4c <vTaskBotao+0x228>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d13d      	bne.n	8000cee <vTaskBotao+0x1ca>
			printf("\r FINALIZADO COM SUCESSO\n\n\r");
 8000c72:	4837      	ldr	r0, [pc, #220]	@ (8000d50 <vTaskBotao+0x22c>)
 8000c74:	f008 f818 	bl	8008ca8 <iprintf>
			if (xTaskSensorUltrassonico != 0) {
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <vTaskBotao+0x204>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d007      	beq.n	8000c90 <vTaskBotao+0x16c>
				vTaskDelete(xTaskSensorUltrassonico);
 8000c80:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <vTaskBotao+0x204>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 feaf 	bl	80079e8 <vTaskDelete>
				xTaskSensorUltrassonico = 0;
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <vTaskBotao+0x204>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
			}
			if (xTaskMotor != 0) {
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <vTaskBotao+0x21c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d007      	beq.n	8000ca8 <vTaskBotao+0x184>
				vTaskDelete(xTaskMotor);
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <vTaskBotao+0x21c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 fea3 	bl	80079e8 <vTaskDelete>
				xTaskMotor = 0;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <vTaskBotao+0x21c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
			}
			if (xTaskPrints != 0) {
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <vTaskBotao+0x1ec>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <vTaskBotao+0x19c>
				vTaskDelete(xTaskPrints);
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <vTaskBotao+0x1ec>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fe97 	bl	80079e8 <vTaskDelete>
				xTaskPrints = 0;
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <vTaskBotao+0x1ec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
			}
			printf("\rEscolha o modo a ser iniciado:\n\r");
 8000cc0:	4824      	ldr	r0, [pc, #144]	@ (8000d54 <vTaskBotao+0x230>)
 8000cc2:	f007 fff1 	bl	8008ca8 <iprintf>
			printf("Modo Hardware - H\n\r");
 8000cc6:	4824      	ldr	r0, [pc, #144]	@ (8000d58 <vTaskBotao+0x234>)
 8000cc8:	f007 ffee 	bl	8008ca8 <iprintf>
			printf("Modo Serial - S\n\r");
 8000ccc:	4823      	ldr	r0, [pc, #140]	@ (8000d5c <vTaskBotao+0x238>)
 8000cce:	f007 ffeb 	bl	8008ca8 <iprintf>
        	printf("Parar - P\n\r");
 8000cd2:	4823      	ldr	r0, [pc, #140]	@ (8000d60 <vTaskBotao+0x23c>)
 8000cd4:	f007 ffe8 	bl	8008ca8 <iprintf>
			flagBotao = 0;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <vTaskBotao+0x200>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
			flagStatus = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
			xTaskBotao = 0;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <vTaskBotao+0x240>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
			vTaskDelete(NULL);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f006 fe7d 	bl	80079e8 <vTaskDelete>
		}
		vTaskDelay(50);
 8000cee:	2032      	movs	r0, #50	@ 0x32
 8000cf0:	f006 ff0a 	bl	8007b08 <vTaskDelay>
		estadoBotaoAtual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000cf4:	e73a      	b.n	8000b6c <vTaskBotao+0x48>
 8000cf6:	bf00      	nop
 8000cf8:	20000544 	.word	0x20000544
 8000cfc:	08009ae0 	.word	0x08009ae0
 8000d00:	08000921 	.word	0x08000921
 8000d04:	20000528 	.word	0x20000528
 8000d08:	08009af8 	.word	0x08009af8
 8000d0c:	08000999 	.word	0x08000999
 8000d10:	20000550 	.word	0x20000550
 8000d14:	08009b08 	.word	0x08009b08
 8000d18:	08000ad9 	.word	0x08000ad9
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	20000558 	.word	0x20000558
 8000d24:	20000524 	.word	0x20000524
 8000d28:	20000538 	.word	0x20000538
 8000d2c:	08009b10 	.word	0x08009b10
 8000d30:	08000735 	.word	0x08000735
 8000d34:	2000052c 	.word	0x2000052c
 8000d38:	08009b1c 	.word	0x08009b1c
 8000d3c:	08000a69 	.word	0x08000a69
 8000d40:	20000534 	.word	0x20000534
 8000d44:	08009b24 	.word	0x08009b24
 8000d48:	080007c1 	.word	0x080007c1
 8000d4c:	20000526 	.word	0x20000526
 8000d50:	08009b30 	.word	0x08009b30
 8000d54:	08009b4c 	.word	0x08009b4c
 8000d58:	08009b70 	.word	0x08009b70
 8000d5c:	08009b84 	.word	0x08009b84
 8000d60:	08009b98 	.word	0x08009b98
 8000d64:	20000530 	.word	0x20000530

08000d68 <vTaskBotaoSerialMode>:
	}
}

void vTaskBotaoSerialMode(void *pvParameters) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	6078      	str	r0, [r7, #4]
	static int estadoBotaoAnterior = GPIO_PIN_RESET;
	int estadoBotaoAtual;
	int flagStatuss = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]

	xTaskCreate(vTaskPotenciometroQtd, "quantidadePotenciometro", 128, NULL, 1,
 8000d74:	4b66      	ldr	r3, [pc, #408]	@ (8000f10 <vTaskBotaoSerialMode+0x1a8>)
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	4964      	ldr	r1, [pc, #400]	@ (8000f14 <vTaskBotaoSerialMode+0x1ac>)
 8000d82:	4865      	ldr	r0, [pc, #404]	@ (8000f18 <vTaskBotaoSerialMode+0x1b0>)
 8000d84:	f006 fce0 	bl	8007748 <xTaskCreate>
			&xTaskPotenciometroQtd);
	xTaskCreate(vTaskPrint, "print", 128, NULL, 1,
 8000d88:	4b64      	ldr	r3, [pc, #400]	@ (8000f1c <vTaskBotaoSerialMode+0x1b4>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	2280      	movs	r2, #128	@ 0x80
 8000d94:	4962      	ldr	r1, [pc, #392]	@ (8000f20 <vTaskBotaoSerialMode+0x1b8>)
 8000d96:	4863      	ldr	r0, [pc, #396]	@ (8000f24 <vTaskBotaoSerialMode+0x1bc>)
 8000d98:	f006 fcd6 	bl	8007748 <xTaskCreate>
			&xTaskPrints);


	for (;;) {
		estadoBotaoAtual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000d9c:	2180      	movs	r1, #128	@ 0x80
 8000d9e:	4862      	ldr	r0, [pc, #392]	@ (8000f28 <vTaskBotaoSerialMode+0x1c0>)
 8000da0:	f002 fe4c 	bl	8003a3c <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	60bb      	str	r3, [r7, #8]

		if (estadoBotaoAtual != estadoBotaoAnterior) {
 8000da8:	4b60      	ldr	r3, [pc, #384]	@ (8000f2c <vTaskBotaoSerialMode+0x1c4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d01e      	beq.n	8000df0 <vTaskBotaoSerialMode+0x88>
			vTaskDelay(DEBOUNCE_DELAY);
 8000db2:	2032      	movs	r0, #50	@ 0x32
 8000db4:	f006 fea8 	bl	8007b08 <vTaskDelay>
			estadoBotaoAtual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	485b      	ldr	r0, [pc, #364]	@ (8000f28 <vTaskBotaoSerialMode+0x1c0>)
 8000dbc:	f002 fe3e 	bl	8003a3c <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60bb      	str	r3, [r7, #8]
			if (estadoBotaoAtual != estadoBotaoAnterior) {
 8000dc4:	4b59      	ldr	r3, [pc, #356]	@ (8000f2c <vTaskBotaoSerialMode+0x1c4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d010      	beq.n	8000df0 <vTaskBotaoSerialMode+0x88>
				estadoBotaoAnterior = estadoBotaoAtual;
 8000dce:	4a57      	ldr	r2, [pc, #348]	@ (8000f2c <vTaskBotaoSerialMode+0x1c4>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	6013      	str	r3, [r2, #0]
				if (estadoBotaoAtual == GPIO_PIN_SET) {
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10a      	bne.n	8000df0 <vTaskBotaoSerialMode+0x88>
					flagBotao = !flagBotao;
 8000dda:	4b55      	ldr	r3, [pc, #340]	@ (8000f30 <vTaskBotaoSerialMode+0x1c8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b50      	ldr	r3, [pc, #320]	@ (8000f30 <vTaskBotaoSerialMode+0x1c8>)
 8000dee:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (flagBotao == 1 && flagStatuss == 0) {
 8000df0:	4b4f      	ldr	r3, [pc, #316]	@ (8000f30 <vTaskBotaoSerialMode+0x1c8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d13a      	bne.n	8000e70 <vTaskBotaoSerialMode+0x108>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d137      	bne.n	8000e70 <vTaskBotaoSerialMode+0x108>
			if (xTaskPotenciometroQtd != 0) {
 8000e00:	4b43      	ldr	r3, [pc, #268]	@ (8000f10 <vTaskBotaoSerialMode+0x1a8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <vTaskBotaoSerialMode+0xb0>
				vTaskDelete(xTaskPotenciometroQtd);
 8000e08:	4b41      	ldr	r3, [pc, #260]	@ (8000f10 <vTaskBotaoSerialMode+0x1a8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 fdeb 	bl	80079e8 <vTaskDelete>
				xTaskPotenciometroQtd = 0;
 8000e12:	4b3f      	ldr	r3, [pc, #252]	@ (8000f10 <vTaskBotaoSerialMode+0x1a8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
			}
			if (xTaskSensorUltrassonico == 0) {
 8000e18:	4b46      	ldr	r3, [pc, #280]	@ (8000f34 <vTaskBotaoSerialMode+0x1cc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d109      	bne.n	8000e34 <vTaskBotaoSerialMode+0xcc>
				xTaskCreate(vTaskSensorUltrassonico, "SensorUltra", 128, NULL,
 8000e20:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <vTaskBotaoSerialMode+0x1cc>)
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2302      	movs	r3, #2
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	4942      	ldr	r1, [pc, #264]	@ (8000f38 <vTaskBotaoSerialMode+0x1d0>)
 8000e2e:	4843      	ldr	r0, [pc, #268]	@ (8000f3c <vTaskBotaoSerialMode+0x1d4>)
 8000e30:	f006 fc8a 	bl	8007748 <xTaskCreate>
						2, &xTaskSensorUltrassonico);
			}
			if (xTaskRacao == 0) {
 8000e34:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <vTaskBotaoSerialMode+0x1d8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d109      	bne.n	8000e50 <vTaskBotaoSerialMode+0xe8>
				xTaskCreate(vTaskRacao, "racao", 128, NULL, 1, &xTaskRacao);
 8000e3c:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <vTaskBotaoSerialMode+0x1d8>)
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	2301      	movs	r3, #1
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2300      	movs	r3, #0
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	493e      	ldr	r1, [pc, #248]	@ (8000f44 <vTaskBotaoSerialMode+0x1dc>)
 8000e4a:	483f      	ldr	r0, [pc, #252]	@ (8000f48 <vTaskBotaoSerialMode+0x1e0>)
 8000e4c:	f006 fc7c 	bl	8007748 <xTaskCreate>
			}

			if (xTaskMotor == 0) {
 8000e50:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <vTaskBotaoSerialMode+0x1e4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d109      	bne.n	8000e6c <vTaskBotaoSerialMode+0x104>
				xTaskCreate(vTaskMotorPassos, "MotorPassos", 128, NULL, 1,
 8000e58:	4b3c      	ldr	r3, [pc, #240]	@ (8000f4c <vTaskBotaoSerialMode+0x1e4>)
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	493a      	ldr	r1, [pc, #232]	@ (8000f50 <vTaskBotaoSerialMode+0x1e8>)
 8000e66:	483b      	ldr	r0, [pc, #236]	@ (8000f54 <vTaskBotaoSerialMode+0x1ec>)
 8000e68:	f006 fc6e 	bl	8007748 <xTaskCreate>
						&xTaskMotor);

			}
			flagStatuss = 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]

		}
		if (flagBotao == 0 && flagStatuss == 1 || flagRacao == 1) {
 8000e70:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <vTaskBotaoSerialMode+0x1c8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <vTaskBotaoSerialMode+0x118>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d004      	beq.n	8000e8a <vTaskBotaoSerialMode+0x122>
 8000e80:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <vTaskBotaoSerialMode+0x1f0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d13d      	bne.n	8000f06 <vTaskBotaoSerialMode+0x19e>
			printf("\r FINALIZADO COM SUCESSO\n\n\r");
 8000e8a:	4834      	ldr	r0, [pc, #208]	@ (8000f5c <vTaskBotaoSerialMode+0x1f4>)
 8000e8c:	f007 ff0c 	bl	8008ca8 <iprintf>
			if (xTaskSensorUltrassonico != 0) {
 8000e90:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <vTaskBotaoSerialMode+0x1cc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <vTaskBotaoSerialMode+0x140>
				vTaskDelete(xTaskSensorUltrassonico);
 8000e98:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <vTaskBotaoSerialMode+0x1cc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fda3 	bl	80079e8 <vTaskDelete>
				xTaskSensorUltrassonico = 0;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <vTaskBotaoSerialMode+0x1cc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
			}
			if (xTaskMotor != 0) {
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <vTaskBotaoSerialMode+0x1e4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <vTaskBotaoSerialMode+0x158>
				vTaskDelete(xTaskMotor);
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <vTaskBotaoSerialMode+0x1e4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 fd97 	bl	80079e8 <vTaskDelete>
				xTaskMotor = 0;
 8000eba:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <vTaskBotaoSerialMode+0x1e4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
			}
			if (xTaskPrints != 0) {
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <vTaskBotaoSerialMode+0x1b4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <vTaskBotaoSerialMode+0x170>
				vTaskDelete(xTaskPrints);
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <vTaskBotaoSerialMode+0x1b4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fd8b 	bl	80079e8 <vTaskDelete>
				xTaskPrints = 0;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <vTaskBotaoSerialMode+0x1b4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
			}
			printf("\rEscolha o modo a ser iniciado:\n\r");
 8000ed8:	4821      	ldr	r0, [pc, #132]	@ (8000f60 <vTaskBotaoSerialMode+0x1f8>)
 8000eda:	f007 fee5 	bl	8008ca8 <iprintf>
			printf("Modo Hardware - H\n\r");
 8000ede:	4821      	ldr	r0, [pc, #132]	@ (8000f64 <vTaskBotaoSerialMode+0x1fc>)
 8000ee0:	f007 fee2 	bl	8008ca8 <iprintf>
			printf("Modo Serial - S\n\r");
 8000ee4:	4820      	ldr	r0, [pc, #128]	@ (8000f68 <vTaskBotaoSerialMode+0x200>)
 8000ee6:	f007 fedf 	bl	8008ca8 <iprintf>
        	printf("Parar - P\n\r");
 8000eea:	4820      	ldr	r0, [pc, #128]	@ (8000f6c <vTaskBotaoSerialMode+0x204>)
 8000eec:	f007 fedc 	bl	8008ca8 <iprintf>
			flagBotao = 0;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <vTaskBotaoSerialMode+0x1c8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
			flagStatuss = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
			xTaskBotao = 0;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <vTaskBotaoSerialMode+0x208>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
			vTaskDelete(NULL);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f006 fd71 	bl	80079e8 <vTaskDelete>
		}
		vTaskDelay(50);
 8000f06:	2032      	movs	r0, #50	@ 0x32
 8000f08:	f006 fdfe 	bl	8007b08 <vTaskDelay>
		estadoBotaoAtual = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000f0c:	e746      	b.n	8000d9c <vTaskBotaoSerialMode+0x34>
 8000f0e:	bf00      	nop
 8000f10:	20000544 	.word	0x20000544
 8000f14:	08009ae0 	.word	0x08009ae0
 8000f18:	08000921 	.word	0x08000921
 8000f1c:	20000550 	.word	0x20000550
 8000f20:	08009b08 	.word	0x08009b08
 8000f24:	08000ad9 	.word	0x08000ad9
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	2000055c 	.word	0x2000055c
 8000f30:	20000524 	.word	0x20000524
 8000f34:	20000538 	.word	0x20000538
 8000f38:	08009b10 	.word	0x08009b10
 8000f3c:	08000735 	.word	0x08000735
 8000f40:	2000052c 	.word	0x2000052c
 8000f44:	08009b1c 	.word	0x08009b1c
 8000f48:	08000a69 	.word	0x08000a69
 8000f4c:	20000534 	.word	0x20000534
 8000f50:	08009b24 	.word	0x08009b24
 8000f54:	080007c1 	.word	0x080007c1
 8000f58:	20000526 	.word	0x20000526
 8000f5c:	08009b30 	.word	0x08009b30
 8000f60:	08009b4c 	.word	0x08009b4c
 8000f64:	08009b70 	.word	0x08009b70
 8000f68:	08009b84 	.word	0x08009b84
 8000f6c:	08009b98 	.word	0x08009b98
 8000f70:	20000530 	.word	0x20000530

08000f74 <vTaskSerialMode>:
	}
}


void vTaskSerialMode(void *pvParameters) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
	printf("\rEscolha a quantidade de ração desejada:\n\r");
 8000f7c:	4882      	ldr	r0, [pc, #520]	@ (8001188 <vTaskSerialMode+0x214>)
 8000f7e:	f007 fe93 	bl	8008ca8 <iprintf>
	printf("100g - 1\n\r");
 8000f82:	4882      	ldr	r0, [pc, #520]	@ (800118c <vTaskSerialMode+0x218>)
 8000f84:	f007 fe90 	bl	8008ca8 <iprintf>
	printf("150g - 2\n\r");
 8000f88:	4881      	ldr	r0, [pc, #516]	@ (8001190 <vTaskSerialMode+0x21c>)
 8000f8a:	f007 fe8d 	bl	8008ca8 <iprintf>
	printf("200g - 3\n\r");
 8000f8e:	4881      	ldr	r0, [pc, #516]	@ (8001194 <vTaskSerialMode+0x220>)
 8000f90:	f007 fe8a 	bl	8008ca8 <iprintf>
	printf("250g - 4\n\r");
 8000f94:	4880      	ldr	r0, [pc, #512]	@ (8001198 <vTaskSerialMode+0x224>)
 8000f96:	f007 fe87 	bl	8008ca8 <iprintf>
	printf("300g - 5\n\r");
 8000f9a:	4880      	ldr	r0, [pc, #512]	@ (800119c <vTaskSerialMode+0x228>)
 8000f9c:	f007 fe84 	bl	8008ca8 <iprintf>
	printf("350g - 6\n\r");
 8000fa0:	487f      	ldr	r0, [pc, #508]	@ (80011a0 <vTaskSerialMode+0x22c>)
 8000fa2:	f007 fe81 	bl	8008ca8 <iprintf>
	printf("400g - 7\n\r");
 8000fa6:	487f      	ldr	r0, [pc, #508]	@ (80011a4 <vTaskSerialMode+0x230>)
 8000fa8:	f007 fe7e 	bl	8008ca8 <iprintf>
	for (;;) {
        switch (received_command) {
 8000fac:	4b7e      	ldr	r3, [pc, #504]	@ (80011a8 <vTaskSerialMode+0x234>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3b31      	subs	r3, #49	@ 0x31
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	f200 80e2 	bhi.w	800117e <vTaskSerialMode+0x20a>
 8000fba:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc0 <vTaskSerialMode+0x4c>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fdd 	.word	0x08000fdd
 8000fc4:	08001017 	.word	0x08001017
 8000fc8:	08001051 	.word	0x08001051
 8000fcc:	0800108b 	.word	0x0800108b
 8000fd0:	080010c5 	.word	0x080010c5
 8000fd4:	08001107 	.word	0x08001107
 8000fd8:	08001143 	.word	0x08001143
            case '1':
            	printf("Sua escolha foi de 100g\n\r");
 8000fdc:	4873      	ldr	r0, [pc, #460]	@ (80011ac <vTaskSerialMode+0x238>)
 8000fde:	f007 fe63 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 100;
 8000fe2:	4b73      	ldr	r3, [pc, #460]	@ (80011b0 <vTaskSerialMode+0x23c>)
 8000fe4:	2264      	movs	r2, #100	@ 0x64
 8000fe6:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 8000fe8:	4b72      	ldr	r3, [pc, #456]	@ (80011b4 <vTaskSerialMode+0x240>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 8000fee:	4b72      	ldr	r3, [pc, #456]	@ (80011b8 <vTaskSerialMode+0x244>)
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2280      	movs	r2, #128	@ 0x80
 8000ffa:	4970      	ldr	r1, [pc, #448]	@ (80011bc <vTaskSerialMode+0x248>)
 8000ffc:	4870      	ldr	r0, [pc, #448]	@ (80011c0 <vTaskSerialMode+0x24c>)
 8000ffe:	f006 fba3 	bl	8007748 <xTaskCreate>
                received_command = 0;
 8001002:	4b69      	ldr	r3, [pc, #420]	@ (80011a8 <vTaskSerialMode+0x234>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
                xTaskBotaoSerialMode =0;
 8001008:	4b6b      	ldr	r3, [pc, #428]	@ (80011b8 <vTaskSerialMode+0x244>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 800100e:	2000      	movs	r0, #0
 8001010:	f006 fcea 	bl	80079e8 <vTaskDelete>
                break;
 8001014:	e0b3      	b.n	800117e <vTaskSerialMode+0x20a>
            case '2':
            	printf("Sua escolha foi de 150g\n\r");
 8001016:	486b      	ldr	r0, [pc, #428]	@ (80011c4 <vTaskSerialMode+0x250>)
 8001018:	f007 fe46 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 150;
 800101c:	4b64      	ldr	r3, [pc, #400]	@ (80011b0 <vTaskSerialMode+0x23c>)
 800101e:	2296      	movs	r2, #150	@ 0x96
 8001020:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 8001022:	4b64      	ldr	r3, [pc, #400]	@ (80011b4 <vTaskSerialMode+0x240>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 8001028:	4b63      	ldr	r3, [pc, #396]	@ (80011b8 <vTaskSerialMode+0x244>)
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2301      	movs	r3, #1
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	4961      	ldr	r1, [pc, #388]	@ (80011bc <vTaskSerialMode+0x248>)
 8001036:	4862      	ldr	r0, [pc, #392]	@ (80011c0 <vTaskSerialMode+0x24c>)
 8001038:	f006 fb86 	bl	8007748 <xTaskCreate>
                received_command = 0;
 800103c:	4b5a      	ldr	r3, [pc, #360]	@ (80011a8 <vTaskSerialMode+0x234>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
                xTaskBotaoSerialMode = 0;
 8001042:	4b5d      	ldr	r3, [pc, #372]	@ (80011b8 <vTaskSerialMode+0x244>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 8001048:	2000      	movs	r0, #0
 800104a:	f006 fccd 	bl	80079e8 <vTaskDelete>
                break;
 800104e:	e096      	b.n	800117e <vTaskSerialMode+0x20a>
            case '3':
            	printf("Sua escolha foi de 200g\n\r");
 8001050:	485d      	ldr	r0, [pc, #372]	@ (80011c8 <vTaskSerialMode+0x254>)
 8001052:	f007 fe29 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 200;
 8001056:	4b56      	ldr	r3, [pc, #344]	@ (80011b0 <vTaskSerialMode+0x23c>)
 8001058:	22c8      	movs	r2, #200	@ 0xc8
 800105a:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 800105c:	4b55      	ldr	r3, [pc, #340]	@ (80011b4 <vTaskSerialMode+0x240>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 8001062:	4b55      	ldr	r3, [pc, #340]	@ (80011b8 <vTaskSerialMode+0x244>)
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	2301      	movs	r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	4953      	ldr	r1, [pc, #332]	@ (80011bc <vTaskSerialMode+0x248>)
 8001070:	4853      	ldr	r0, [pc, #332]	@ (80011c0 <vTaskSerialMode+0x24c>)
 8001072:	f006 fb69 	bl	8007748 <xTaskCreate>
                received_command = 0;
 8001076:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <vTaskSerialMode+0x234>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
                xTaskBotaoSerialMode = 0;
 800107c:	4b4e      	ldr	r3, [pc, #312]	@ (80011b8 <vTaskSerialMode+0x244>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 8001082:	2000      	movs	r0, #0
 8001084:	f006 fcb0 	bl	80079e8 <vTaskDelete>
                break;
 8001088:	e079      	b.n	800117e <vTaskSerialMode+0x20a>
            case '4':
            	printf("Sua escolha foi de 250g\n\r");
 800108a:	4850      	ldr	r0, [pc, #320]	@ (80011cc <vTaskSerialMode+0x258>)
 800108c:	f007 fe0c 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 250;
 8001090:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <vTaskSerialMode+0x23c>)
 8001092:	22fa      	movs	r2, #250	@ 0xfa
 8001094:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 8001096:	4b47      	ldr	r3, [pc, #284]	@ (80011b4 <vTaskSerialMode+0x240>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 800109c:	4b46      	ldr	r3, [pc, #280]	@ (80011b8 <vTaskSerialMode+0x244>)
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	4944      	ldr	r1, [pc, #272]	@ (80011bc <vTaskSerialMode+0x248>)
 80010aa:	4845      	ldr	r0, [pc, #276]	@ (80011c0 <vTaskSerialMode+0x24c>)
 80010ac:	f006 fb4c 	bl	8007748 <xTaskCreate>
                received_command = 0;
 80010b0:	4b3d      	ldr	r3, [pc, #244]	@ (80011a8 <vTaskSerialMode+0x234>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
                xTaskBotaoSerialMode = 0;
 80010b6:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <vTaskSerialMode+0x244>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 80010bc:	2000      	movs	r0, #0
 80010be:	f006 fc93 	bl	80079e8 <vTaskDelete>
                break;
 80010c2:	e05c      	b.n	800117e <vTaskSerialMode+0x20a>
            case '5':
            	printf("Sua escolha foi de 300g\n\r");
 80010c4:	4842      	ldr	r0, [pc, #264]	@ (80011d0 <vTaskSerialMode+0x25c>)
 80010c6:	f007 fdef 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 300;
 80010ca:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <vTaskSerialMode+0x23c>)
 80010cc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010d0:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 80010d2:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <vTaskSerialMode+0x240>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 80010d8:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <vTaskSerialMode+0x244>)
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	2301      	movs	r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	4935      	ldr	r1, [pc, #212]	@ (80011bc <vTaskSerialMode+0x248>)
 80010e6:	4836      	ldr	r0, [pc, #216]	@ (80011c0 <vTaskSerialMode+0x24c>)
 80010e8:	f006 fb2e 	bl	8007748 <xTaskCreate>
            	flagBotao = 1;
 80010ec:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <vTaskSerialMode+0x240>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
            	received_command = 0;
 80010f2:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <vTaskSerialMode+0x234>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
            	xTaskBotaoSerialMode = 0;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <vTaskSerialMode+0x244>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 80010fe:	2000      	movs	r0, #0
 8001100:	f006 fc72 	bl	80079e8 <vTaskDelete>
                break;
 8001104:	e03b      	b.n	800117e <vTaskSerialMode+0x20a>
            case '6':
            	printf("Sua escolha foi de 350g\n\r");
 8001106:	4833      	ldr	r0, [pc, #204]	@ (80011d4 <vTaskSerialMode+0x260>)
 8001108:	f007 fdce 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 350;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <vTaskSerialMode+0x23c>)
 800110e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001112:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <vTaskSerialMode+0x240>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <vTaskSerialMode+0x244>)
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2301      	movs	r3, #1
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	4925      	ldr	r1, [pc, #148]	@ (80011bc <vTaskSerialMode+0x248>)
 8001128:	4825      	ldr	r0, [pc, #148]	@ (80011c0 <vTaskSerialMode+0x24c>)
 800112a:	f006 fb0d 	bl	8007748 <xTaskCreate>
                received_command = 0;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <vTaskSerialMode+0x234>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
                xTaskBotaoSerialMode = 0;
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <vTaskSerialMode+0x244>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 800113a:	2000      	movs	r0, #0
 800113c:	f006 fc54 	bl	80079e8 <vTaskDelete>
                break;
 8001140:	e01d      	b.n	800117e <vTaskSerialMode+0x20a>
            case '7':
            	printf("Sua escolha foi de 400g\n\r");
 8001142:	4825      	ldr	r0, [pc, #148]	@ (80011d8 <vTaskSerialMode+0x264>)
 8001144:	f007 fdb0 	bl	8008ca8 <iprintf>
            	potenciometroQuantidadeSelecionado = 400;
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <vTaskSerialMode+0x23c>)
 800114a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800114e:	801a      	strh	r2, [r3, #0]
            	flagBotao = 1;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <vTaskSerialMode+0x240>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
            	xTaskCreate(vTaskBotaoSerialMode, "botaoSerialMode", 128, NULL, 1, &xTaskBotaoSerialMode);
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <vTaskSerialMode+0x244>)
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	2301      	movs	r3, #1
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2300      	movs	r3, #0
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	4916      	ldr	r1, [pc, #88]	@ (80011bc <vTaskSerialMode+0x248>)
 8001164:	4816      	ldr	r0, [pc, #88]	@ (80011c0 <vTaskSerialMode+0x24c>)
 8001166:	f006 faef 	bl	8007748 <xTaskCreate>
                received_command = 0;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <vTaskSerialMode+0x234>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
                xTaskBotaoSerialMode =0;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <vTaskSerialMode+0x244>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
            	vTaskDelete(NULL);
 8001176:	2000      	movs	r0, #0
 8001178:	f006 fc36 	bl	80079e8 <vTaskDelete>
                break;
 800117c:	bf00      	nop
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 800117e:	2064      	movs	r0, #100	@ 0x64
 8001180:	f006 fcc2 	bl	8007b08 <vTaskDelay>
        switch (received_command) {
 8001184:	e712      	b.n	8000fac <vTaskSerialMode+0x38>
 8001186:	bf00      	nop
 8001188:	08009ba4 	.word	0x08009ba4
 800118c:	08009bd4 	.word	0x08009bd4
 8001190:	08009be0 	.word	0x08009be0
 8001194:	08009bec 	.word	0x08009bec
 8001198:	08009bf8 	.word	0x08009bf8
 800119c:	08009c04 	.word	0x08009c04
 80011a0:	08009c10 	.word	0x08009c10
 80011a4:	08009c1c 	.word	0x08009c1c
 80011a8:	2000051a 	.word	0x2000051a
 80011ac:	08009c28 	.word	0x08009c28
 80011b0:	2000051c 	.word	0x2000051c
 80011b4:	20000524 	.word	0x20000524
 80011b8:	2000054c 	.word	0x2000054c
 80011bc:	08009c44 	.word	0x08009c44
 80011c0:	08000d69 	.word	0x08000d69
 80011c4:	08009c54 	.word	0x08009c54
 80011c8:	08009c70 	.word	0x08009c70
 80011cc:	08009c8c 	.word	0x08009c8c
 80011d0:	08009ca8 	.word	0x08009ca8
 80011d4:	08009cc4 	.word	0x08009cc4
 80011d8:	08009ce0 	.word	0x08009ce0

080011dc <vTaskControllerMode>:
    }
}

void vTaskControllerMode(void *pvParameters) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
	printf("\rEscolha o modo a ser iniciado:\n\r");
 80011e4:	4851      	ldr	r0, [pc, #324]	@ (800132c <vTaskControllerMode+0x150>)
 80011e6:	f007 fd5f 	bl	8008ca8 <iprintf>
	printf("Modo Hardware - H\n\r");
 80011ea:	4851      	ldr	r0, [pc, #324]	@ (8001330 <vTaskControllerMode+0x154>)
 80011ec:	f007 fd5c 	bl	8008ca8 <iprintf>
	printf("Modo Serial - S\n\r");
 80011f0:	4850      	ldr	r0, [pc, #320]	@ (8001334 <vTaskControllerMode+0x158>)
 80011f2:	f007 fd59 	bl	8008ca8 <iprintf>
	printf("Parar - P\n\r");
 80011f6:	4850      	ldr	r0, [pc, #320]	@ (8001338 <vTaskControllerMode+0x15c>)
 80011f8:	f007 fd56 	bl	8008ca8 <iprintf>
	for (;;) {
        switch (received_command) {
 80011fc:	4b4f      	ldr	r3, [pc, #316]	@ (800133c <vTaskControllerMode+0x160>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	3b48      	subs	r3, #72	@ 0x48
 8001204:	2b2b      	cmp	r3, #43	@ 0x2b
 8001206:	f200 808a 	bhi.w	800131e <vTaskControllerMode+0x142>
 800120a:	a201      	add	r2, pc, #4	@ (adr r2, 8001210 <vTaskControllerMode+0x34>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	080012c1 	.word	0x080012c1
 8001214:	0800131f 	.word	0x0800131f
 8001218:	0800131f 	.word	0x0800131f
 800121c:	0800131f 	.word	0x0800131f
 8001220:	0800131f 	.word	0x0800131f
 8001224:	0800131f 	.word	0x0800131f
 8001228:	0800131f 	.word	0x0800131f
 800122c:	0800131f 	.word	0x0800131f
 8001230:	080012f9 	.word	0x080012f9
 8001234:	0800131f 	.word	0x0800131f
 8001238:	0800131f 	.word	0x0800131f
 800123c:	080012dd 	.word	0x080012dd
 8001240:	0800131f 	.word	0x0800131f
 8001244:	0800131f 	.word	0x0800131f
 8001248:	0800131f 	.word	0x0800131f
 800124c:	0800131f 	.word	0x0800131f
 8001250:	0800131f 	.word	0x0800131f
 8001254:	0800131f 	.word	0x0800131f
 8001258:	0800131f 	.word	0x0800131f
 800125c:	0800131f 	.word	0x0800131f
 8001260:	0800131f 	.word	0x0800131f
 8001264:	0800131f 	.word	0x0800131f
 8001268:	0800131f 	.word	0x0800131f
 800126c:	0800131f 	.word	0x0800131f
 8001270:	0800131f 	.word	0x0800131f
 8001274:	0800131f 	.word	0x0800131f
 8001278:	0800131f 	.word	0x0800131f
 800127c:	0800131f 	.word	0x0800131f
 8001280:	0800131f 	.word	0x0800131f
 8001284:	0800131f 	.word	0x0800131f
 8001288:	0800131f 	.word	0x0800131f
 800128c:	0800131f 	.word	0x0800131f
 8001290:	080012c1 	.word	0x080012c1
 8001294:	0800131f 	.word	0x0800131f
 8001298:	0800131f 	.word	0x0800131f
 800129c:	0800131f 	.word	0x0800131f
 80012a0:	0800131f 	.word	0x0800131f
 80012a4:	0800131f 	.word	0x0800131f
 80012a8:	0800131f 	.word	0x0800131f
 80012ac:	0800131f 	.word	0x0800131f
 80012b0:	080012f9 	.word	0x080012f9
 80012b4:	0800131f 	.word	0x0800131f
 80012b8:	0800131f 	.word	0x0800131f
 80012bc:	080012dd 	.word	0x080012dd
            case 'h':
            case 'H':
            	printf("Modo Hardware\n\r");
 80012c0:	481f      	ldr	r0, [pc, #124]	@ (8001340 <vTaskControllerMode+0x164>)
 80012c2:	f007 fcf1 	bl	8008ca8 <iprintf>
            	xTaskCreate(vTaskBotao, "botao", 128, NULL, 1, &xTaskBotao);
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <vTaskControllerMode+0x168>)
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	491d      	ldr	r1, [pc, #116]	@ (8001348 <vTaskControllerMode+0x16c>)
 80012d4:	481d      	ldr	r0, [pc, #116]	@ (800134c <vTaskControllerMode+0x170>)
 80012d6:	f006 fa37 	bl	8007748 <xTaskCreate>
                break;
 80012da:	e020      	b.n	800131e <vTaskControllerMode+0x142>

            case 's':
            case 'S':
            	printf("Modo Serial\n\r");
 80012dc:	481c      	ldr	r0, [pc, #112]	@ (8001350 <vTaskControllerMode+0x174>)
 80012de:	f007 fce3 	bl	8008ca8 <iprintf>
            	xTaskCreate(vTaskSerialMode, "modoSerial", 128, NULL, 1, &xTaskSerialMOde);
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <vTaskControllerMode+0x178>)
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	491a      	ldr	r1, [pc, #104]	@ (8001358 <vTaskControllerMode+0x17c>)
 80012f0:	481a      	ldr	r0, [pc, #104]	@ (800135c <vTaskControllerMode+0x180>)
 80012f2:	f006 fa29 	bl	8007748 <xTaskCreate>
                break;
 80012f6:	e012      	b.n	800131e <vTaskControllerMode+0x142>
            case 'p':
            case 'P':
            	printf("CANCELADO!\n\r");
 80012f8:	4819      	ldr	r0, [pc, #100]	@ (8001360 <vTaskControllerMode+0x184>)
 80012fa:	f007 fcd5 	bl	8008ca8 <iprintf>
            	flagBotao = 0;
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <vTaskControllerMode+0x188>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
            	printf("\rEscolha o modo a ser iniciado:\n\r");
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <vTaskControllerMode+0x150>)
 8001306:	f007 fccf 	bl	8008ca8 <iprintf>
            	printf("Modo Hardware - H\n\r");
 800130a:	4809      	ldr	r0, [pc, #36]	@ (8001330 <vTaskControllerMode+0x154>)
 800130c:	f007 fccc 	bl	8008ca8 <iprintf>
            	printf("Modo Serial - S\n\r");
 8001310:	4808      	ldr	r0, [pc, #32]	@ (8001334 <vTaskControllerMode+0x158>)
 8001312:	f007 fcc9 	bl	8008ca8 <iprintf>
            	printf("Parar - P\n\r");
 8001316:	4808      	ldr	r0, [pc, #32]	@ (8001338 <vTaskControllerMode+0x15c>)
 8001318:	f007 fcc6 	bl	8008ca8 <iprintf>
                break;
 800131c:	bf00      	nop
        }
        received_command = 0;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <vTaskControllerMode+0x160>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]

        vTaskDelay(pdMS_TO_TICKS(100));
 8001324:	2064      	movs	r0, #100	@ 0x64
 8001326:	f006 fbef 	bl	8007b08 <vTaskDelay>
        switch (received_command) {
 800132a:	e767      	b.n	80011fc <vTaskControllerMode+0x20>
 800132c:	08009b4c 	.word	0x08009b4c
 8001330:	08009b70 	.word	0x08009b70
 8001334:	08009b84 	.word	0x08009b84
 8001338:	08009b98 	.word	0x08009b98
 800133c:	2000051a 	.word	0x2000051a
 8001340:	08009cfc 	.word	0x08009cfc
 8001344:	20000530 	.word	0x20000530
 8001348:	08009d0c 	.word	0x08009d0c
 800134c:	08000b25 	.word	0x08000b25
 8001350:	08009d14 	.word	0x08009d14
 8001354:	20000554 	.word	0x20000554
 8001358:	08009d24 	.word	0x08009d24
 800135c:	08000f75 	.word	0x08000f75
 8001360:	08009d30 	.word	0x08009d30
 8001364:	20000524 	.word	0x20000524

08001368 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b08a      	sub	sp, #40	@ 0x28
 800136c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800136e:	f000 fe53 	bl	8002018 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001372:	f000 f84f 	bl	8001414 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001376:	f000 f89e 	bl	80014b6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800137a:	f000 fa97 	bl	80018ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800137e:	f000 fa65 	bl	800184c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001382:	f000 f8c3 	bl	800150c <MX_ADC1_Init>
	MX_ADC2_Init();
 8001386:	f000 f937 	bl	80015f8 <MX_ADC2_Init>
	MX_TIM3_Init();
 800138a:	f000 fa0f 	bl	80017ac <MX_TIM3_Init>
	MX_TIM2_Init();
 800138e:	f000 f997 	bl	80016c0 <MX_TIM2_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <main+0x90>)
 8001394:	1d3c      	adds	r4, r7, #4
 8001396:	461d      	mov	r5, r3
 8001398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f005 ff95 	bl	80072d8 <osThreadCreate>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <main+0x94>)
 80013b2:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	xSemaphore = xSemaphoreCreateBinary();
 80013b4:	2203      	movs	r2, #3
 80013b6:	2100      	movs	r1, #0
 80013b8:	2001      	movs	r0, #1
 80013ba:	f006 f90b 	bl	80075d4 <xQueueGenericCreate>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <main+0x98>)
 80013c2:	6013      	str	r3, [r2, #0]

//	xTaskCreate(vTaskPotenciometroBalanca, "potenciometro balanca", 128, NULL, 1, NULL);
//	xTaskCreate(vTaskControllador, "Controller", 128, NULL, 1, NULL);
//	xTaskCreate(vTaskSensorUltrassonico, "SensorUltra", 128, NULL, 1,
//			&xTaskSensorUltrassonico);
	xTaskCreate(vTaskReceiveCommand, "comand", 128, NULL, 1, NULL);
 80013c4:	2300      	movs	r3, #0
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <main+0x9c>)
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <main+0xa0>)
 80013d4:	f006 f9b8 	bl	8007748 <xTaskCreate>
	xTaskCreate(vTaskControllerMode, "MODE", 128, NULL, 1, NULL);
 80013d8:	2300      	movs	r3, #0
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2301      	movs	r3, #1
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	4909      	ldr	r1, [pc, #36]	@ (800140c <main+0xa4>)
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <main+0xa8>)
 80013e8:	f006 f9ae 	bl	8007748 <xTaskCreate>

	vTaskStartScheduler();
 80013ec:	f006 fbc2 	bl	8007b74 <vTaskStartScheduler>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80013f0:	f005 ff6b 	bl	80072ca <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <main+0x8c>
 80013f8:	08009d5c 	.word	0x08009d5c
 80013fc:	20000510 	.word	0x20000510
 8001400:	20000520 	.word	0x20000520
 8001404:	08009d40 	.word	0x08009d40
 8001408:	08000901 	.word	0x08000901
 800140c:	08009d48 	.word	0x08009d48
 8001410:	080011dd 	.word	0x080011dd

08001414 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b096      	sub	sp, #88	@ 0x58
 8001418:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2244      	movs	r2, #68	@ 0x44
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fc95 	bl	8008d52 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001436:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800143a:	f002 fb57 	bl	8003aec <HAL_PWREx_ControlVoltageScaling>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001444:	f000 fb10 	bl	8001a68 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001450:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800145a:	2302      	movs	r3, #2
 800145c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001462:	230a      	movs	r3, #10
 8001464:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001466:	2307      	movs	r3, #7
 8001468:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fb8e 	bl	8003b98 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x72>
		Error_Handler();
 8001482:	f000 faf1 	bl	8001a68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2303      	movs	r3, #3
 800148c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800149a:	463b      	mov	r3, r7
 800149c:	2104      	movs	r1, #4
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 ff56 	bl	8004350 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x9a>
		Error_Handler();
 80014aa:	f000 fadd 	bl	8001a68 <Error_Handler>
	}
}
 80014ae:	bf00      	nop
 80014b0:	3758      	adds	r7, #88	@ 0x58
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b0a2      	sub	sp, #136	@ 0x88
 80014ba:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014bc:	463b      	mov	r3, r7
 80014be:	2288      	movs	r2, #136	@ 0x88
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 fc45 	bl	8008d52 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014cc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014d2:	67bb      	str	r3, [r7, #120]	@ 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80014d4:	2302      	movs	r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014e0:	2307      	movs	r3, #7
 80014e2:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f0:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014f2:	463b      	mov	r3, r7
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 f981 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <PeriphCommonClock_Config+0x4e>
		Error_Handler();
 8001500:	f000 fab2 	bl	8001a68 <Error_Handler>
	}
}
 8001504:	bf00      	nop
 8001506:	3788      	adds	r7, #136	@ 0x88
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800152e:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001530:	4a2f      	ldr	r2, [pc, #188]	@ (80015f0 <MX_ADC1_Init+0xe4>)
 8001532:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001534:	4b2d      	ldr	r3, [pc, #180]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <MX_ADC1_Init+0xe0>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001546:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <MX_ADC1_Init+0xe0>)
 800154e:	2204      	movs	r2, #4
 8001550:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001552:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001554:	2200      	movs	r2, #0
 8001556:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <MX_ADC1_Init+0xe0>)
 800155a:	2200      	movs	r2, #0
 800155c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800155e:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001560:	2201      	movs	r2, #1
 8001562:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <MX_ADC1_Init+0xe0>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001574:	2200      	movs	r2, #0
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <MX_ADC1_Init+0xe0>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001582:	2200      	movs	r2, #0
 8001584:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800158e:	4817      	ldr	r0, [pc, #92]	@ (80015ec <MX_ADC1_Init+0xe0>)
 8001590:	f000 ff8a 	bl	80024a8 <HAL_ADC_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC1_Init+0x92>
		Error_Handler();
 800159a:	f000 fa65 	bl	8001a68 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	@ (80015ec <MX_ADC1_Init+0xe0>)
 80015aa:	f001 ff0b 	bl	80033c4 <HAL_ADCEx_MultiModeConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0xac>
		Error_Handler();
 80015b4:	f000 fa58 	bl	8001a68 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_ADC1_Init+0xe8>)
 80015ba:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015bc:	2306      	movs	r3, #6
 80015be:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c4:	237f      	movs	r3, #127	@ 0x7f
 80015c6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c8:	2304      	movs	r3, #4
 80015ca:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_ADC1_Init+0xe0>)
 80015d6:	f001 fa57 	bl	8002a88 <HAL_ADC_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0xd8>
		Error_Handler();
 80015e0:	f000 fa42 	bl	8001a68 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000328 	.word	0x20000328
 80015f0:	50040000 	.word	0x50040000
 80015f4:	14f00020 	.word	0x14f00020

080015f8 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800160e:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001610:	4a29      	ldr	r2, [pc, #164]	@ (80016b8 <MX_ADC2_Init+0xc0>)
 8001612:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001626:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800162c:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 800162e:	2204      	movs	r2, #4
 8001630:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001634:	2200      	movs	r2, #0
 8001636:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 800163a:	2200      	movs	r2, #0
 800163c:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001640:	2201      	movs	r2, #1
 8001642:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001654:	2200      	movs	r2, #0
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001662:	2200      	movs	r2, #0
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800166e:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 8001670:	f000 ff1a 	bl	80024a8 <HAL_ADC_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_ADC2_Init+0x86>
		Error_Handler();
 800167a:	f000 f9f5 	bl	8001a68 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_ADC2_Init+0xc4>)
 8001680:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001682:	2306      	movs	r3, #6
 8001684:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800168a:	237f      	movs	r3, #127	@ 0x7f
 800168c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800168e:	2304      	movs	r3, #4
 8001690:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001696:	463b      	mov	r3, r7
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC2_Init+0xbc>)
 800169c:	f001 f9f4 	bl	8002a88 <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0xb2>
		Error_Handler();
 80016a6:	f000 f9df 	bl	8001a68 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000038c 	.word	0x2000038c
 80016b8:	50040100 	.word	0x50040100
 80016bc:	19200040 	.word	0x19200040

080016c0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	@ 0x38
 80016c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	615a      	str	r2, [r3, #20]
 80016f0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 127;
 80016fa:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 80016fc:	227f      	movs	r2, #127	@ 0x7f
 80016fe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2000 - 1;
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001708:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800170c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800171a:	4823      	ldr	r0, [pc, #140]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 800171c:	f003 fd2a 	bl	8005174 <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001726:	f000 f99f 	bl	8001a68 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001730:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001734:	4619      	mov	r1, r3
 8001736:	481c      	ldr	r0, [pc, #112]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001738:	f004 f968 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001742:	f000 f991 	bl	8001a68 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001746:	4818      	ldr	r0, [pc, #96]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001748:	f003 fddc 	bl	8005304 <HAL_TIM_PWM_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001752:	f000 f989 	bl	8001a68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4810      	ldr	r0, [pc, #64]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 8001766:	f004 fe7f 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001770:	f000 f97a 	bl	8001a68 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001774:	2360      	movs	r3, #96	@ 0x60
 8001776:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	4619      	mov	r1, r3
 800178a:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 800178c:	f004 f82a 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001796:	f000 f967 	bl	8001a68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800179a:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <MX_TIM2_Init+0xe8>)
 800179c:	f000 fa4a 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 80017a0:	bf00      	nop
 80017a2:	3738      	adds	r7, #56	@ 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200003f0 	.word	0x200003f0

080017ac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001848 <MX_TIM3_Init+0x9c>)
 80017ce:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 400 - 1;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017d2:	f240 128f 	movw	r2, #399	@ 0x18f
 80017d6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000 - 1;
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017e4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80017f2:	4814      	ldr	r0, [pc, #80]	@ (8001844 <MX_TIM3_Init+0x98>)
 80017f4:	f003 fcbe 	bl	8005174 <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x56>
		Error_Handler();
 80017fe:	f000 f933 	bl	8001a68 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001806:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_TIM3_Init+0x98>)
 8001810:	f004 f8fc 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0x72>
		Error_Handler();
 800181a:	f000 f925 	bl	8001a68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_TIM3_Init+0x98>)
 800182c:	f004 fe1c 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001836:	f000 f917 	bl	8001a68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000043c 	.word	0x2000043c
 8001848:	40000400 	.word	0x40000400

0800184c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001852:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <MX_USART2_UART_Init+0x5c>)
 8001854:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_USART2_UART_Init+0x58>)
 8001890:	f004 fe90 	bl	80065b4 <HAL_UART_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800189a:	f000 f8e5 	bl	8001a68 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000488 	.word	0x20000488
 80018a8:	40004400 	.word	0x40004400

080018ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a43      	ldr	r2, [pc, #268]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	4b3e      	ldr	r3, [pc, #248]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a3d      	ldr	r2, [pc, #244]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b3b      	ldr	r3, [pc, #236]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	4a37      	ldr	r2, [pc, #220]	@ (80019d4 <MX_GPIO_Init+0x128>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fe:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <MX_GPIO_Init+0x128>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <MX_GPIO_Init+0x128>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	4a31      	ldr	r2, [pc, #196]	@ (80019d4 <MX_GPIO_Init+0x128>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <MX_GPIO_Init+0x128>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9,
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f002 f89e 	bl	8003a6c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 8001936:	4828      	ldr	r0, [pc, #160]	@ (80019d8 <MX_GPIO_Init+0x12c>)
 8001938:	f002 f898 	bl	8003a6c <HAL_GPIO_WritePin>
	GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800193c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001940:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001942:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001946:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4822      	ldr	r0, [pc, #136]	@ (80019dc <MX_GPIO_Init+0x130>)
 8001954:	f001 fec8 	bl	80036e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA6 PA7 PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001958:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800195c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f001 feb8 	bl	80036e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB4 PB5 PB8
	 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8
 8001978:	f44f 63e6 	mov.w	r3, #1840	@ 0x730
 800197c:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <MX_GPIO_Init+0x12c>)
 8001992:	f001 fea9 	bl	80036e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <MX_GPIO_Init+0x130>)
 80019aa:	f001 fe9d 	bl	80036e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c6:	f001 fe8f 	bl	80036e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	@ 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400
 80019dc:	48000800 	.word	0x48000800

080019e0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, uint8_t *ptr, int len) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	switch (file) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d003      	beq.n	80019fa <_write+0x1a>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d009      	beq.n	8001a0c <_write+0x2c>
 80019f8:	e011      	b.n	8001a1e <_write+0x3e>
	case STDOUT_FILENO:
		HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	480a      	ldr	r0, [pc, #40]	@ (8001a30 <_write+0x50>)
 8001a06:	f004 fe23 	bl	8006650 <HAL_UART_Transmit>
		break;
 8001a0a:	e00b      	b.n	8001a24 <_write+0x44>

	case STDERR_FILENO:
		HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <_write+0x50>)
 8001a18:	f004 fe1a 	bl	8006650 <HAL_UART_Transmit>
		break;
 8001a1c:	e002      	b.n	8001a24 <_write+0x44>

	default:
		return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e000      	b.n	8001a26 <_write+0x46>
	}

	return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000488 	.word	0x20000488

08001a34 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f005 fc97 	bl	8007370 <osDelay>
 8001a42:	e7fb      	b.n	8001a3c <StartDefaultTask+0x8>

08001a44 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a56:	f000 faff 	bl	8002058 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	210f      	movs	r1, #15
 8001aae:	f06f 0001 	mvn.w	r0, #1
 8001ab2:	f001 fdef 	bl	8003694 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a34      	ldr	r2, [pc, #208]	@ (8001bb4 <HAL_ADC_MspInit+0xf0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12e      	bne.n	8001b44 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001ae6:	4b34      	ldr	r3, [pc, #208]	@ (8001bb8 <HAL_ADC_MspInit+0xf4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a32      	ldr	r2, [pc, #200]	@ (8001bb8 <HAL_ADC_MspInit+0xf4>)
 8001aee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001af0:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <HAL_ADC_MspInit+0xf4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d10b      	bne.n	8001b10 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001af8:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001afe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b04:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1c:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f001 fdd3 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b42:	e032      	b.n	8001baa <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <HAL_ADC_MspInit+0xfc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12d      	bne.n	8001baa <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_ADC_MspInit+0xf4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_ADC_MspInit+0xf4>)
 8001b56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <HAL_ADC_MspInit+0xf4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b64:	4a15      	ldr	r2, [pc, #84]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_ADC_MspInit+0xf8>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b94:	230b      	movs	r3, #11
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba6:	f001 fd9f 	bl	80036e8 <HAL_GPIO_Init>
}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	@ 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	50040000 	.word	0x50040000
 8001bb8:	20000560 	.word	0x20000560
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	50040100 	.word	0x50040100

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bee:	e018      	b.n	8001c22 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_TIM_Base_MspInit+0x6c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d113      	bne.n	8001c22 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	201d      	movs	r0, #29
 8001c18:	f001 fd3c 	bl	8003694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c1c:	201d      	movs	r0, #29
 8001c1e:	f001 fd55 	bl	80036cc <HAL_NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40000400 	.word	0x40000400

08001c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c54:	d11c      	bne.n	8001c90 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_TIM_MspPostInit+0x64>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <HAL_TIM_MspPostInit+0x64>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_TIM_MspPostInit+0x64>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8c:	f001 fd2c 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2288      	movs	r2, #136	@ 0x88
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f007 f848 	bl	8008d52 <memset>
  if(huart->Instance==USART2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a21      	ldr	r2, [pc, #132]	@ (8001d4c <HAL_UART_MspInit+0xb0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d13b      	bne.n	8001d44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fd8f 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ce4:	f7ff fec0 	bl	8001a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_UART_MspInit+0xb4>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	4a18      	ldr	r2, [pc, #96]	@ (8001d50 <HAL_UART_MspInit+0xb4>)
 8001cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf4:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <HAL_UART_MspInit+0xb4>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_UART_MspInit+0xb4>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d04:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <HAL_UART_MspInit+0xb4>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_UART_MspInit+0xb4>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d30:	2307      	movs	r3, #7
 8001d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d40:	f001 fcd2 	bl	80036e8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d44:	bf00      	nop
 8001d46:	37b0      	adds	r7, #176	@ 0xb0
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <HAL_InitTick+0xc8>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d66:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <HAL_InitTick+0xc8>)
 8001d68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <HAL_InitTick+0xc8>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d7a:	f107 020c 	add.w	r2, r7, #12
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fca7 	bl	80046d8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d8a:	f002 fc8f 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8001d8e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d92:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <HAL_InitTick+0xcc>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	0c9b      	lsrs	r3, r3, #18
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001da0:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_InitTick+0xd4>)
 8001da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001da6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001daa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001dc4:	4817      	ldr	r0, [pc, #92]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001dc6:	f003 f9d5 	bl	8005174 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11b      	bne.n	8001e10 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dd8:	4812      	ldr	r0, [pc, #72]	@ (8001e24 <HAL_InitTick+0xd0>)
 8001dda:	f003 fa23 	bl	8005224 <HAL_TIM_Base_Start_IT>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dec:	2019      	movs	r0, #25
 8001dee:	f001 fc6d 	bl	80036cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d808      	bhi.n	8001e0a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	2019      	movs	r0, #25
 8001dfe:	f001 fc49 	bl	8003694 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <HAL_InitTick+0xd8>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e002      	b.n	8001e10 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3730      	adds	r7, #48	@ 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	20000564 	.word	0x20000564
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	20000004 	.word	0x20000004

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <NMI_Handler+0x4>

08001e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <MemManage_Handler+0x4>

08001e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e6e:	f003 fbb1 	bl	80055d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000564 	.word	0x20000564

08001e7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <TIM3_IRQHandler+0x10>)
 8001e82:	f003 fba7 	bl	80055d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000043c 	.word	0x2000043c

08001e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e00a      	b.n	8001eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ea2:	f3af 8000 	nop.w
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf0      	blt.n	8001ea2 <_read+0x12>
  }

  return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:
  }
  return len;
}

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_isatty>:

int _isatty(int file)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f006 ff9a 	bl	8008e9c <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20018000 	.word	0x20018000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	200005b0 	.word	0x200005b0
 8001f9c:	20004858 	.word	0x20004858

08001fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ffc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc8:	f7ff ffea 	bl	8001fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	@ (8002004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <LoopForever+0xe>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8002010 <LoopForever+0x16>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f006 ff59 	bl	8008ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ff6:	f7ff f9b7 	bl	8001368 <main>

08001ffa <LoopForever>:

LoopForever:
    b LoopForever
 8001ffa:	e7fe      	b.n	8001ffa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ffc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002008:	08009e0c 	.word	0x08009e0c
  ldr r2, =_sbss
 800200c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002010:	20004858 	.word	0x20004858

08002014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC1_2_IRQHandler>
	...

08002018 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_Init+0x3c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0b      	ldr	r2, [pc, #44]	@ (8002054 <HAL_Init+0x3c>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202e:	2003      	movs	r0, #3
 8002030:	f001 fb25 	bl	800367e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002034:	200f      	movs	r0, #15
 8002036:	f7ff fe8d 	bl	8001d54 <HAL_InitTick>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	e001      	b.n	800204a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002046:	f7ff fd15 	bl	8001a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204a:	79fb      	ldrb	r3, [r7, #7]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008
 800207c:	200005b4 	.word	0x200005b4

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	@ (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	200005b4 	.word	0x200005b4

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d005      	beq.n	80020be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_Delay+0x44>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020be:	bf00      	nop
 80020c0:	f7ff ffde 	bl	8002080 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d8f7      	bhi.n	80020c0 <HAL_Delay+0x28>
  {
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008

080020e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3360      	adds	r3, #96	@ 0x60
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <LL_ADC_SetOffset+0x44>)
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	4313      	orrs	r3, r2
 8002178:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	03fff000 	.word	0x03fff000

08002190 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3360      	adds	r3, #96	@ 0x60
 800219e:	461a      	mov	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3360      	adds	r3, #96	@ 0x60
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3330      	adds	r3, #48	@ 0x30
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	211f      	movs	r1, #31
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	f003 011f 	and.w	r1, r3, #31
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	431a      	orrs	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3314      	adds	r3, #20
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0e5b      	lsrs	r3, r3, #25
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0d1b      	lsrs	r3, r3, #20
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2107      	movs	r1, #7
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	401a      	ands	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	0d1b      	lsrs	r3, r3, #20
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0318 	and.w	r3, r3, #24
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <LL_ADC_SetChannelSingleDiff+0x44>)
 80022ec:	40d9      	lsrs	r1, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	400b      	ands	r3, r1
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	0007ffff 	.word	0x0007ffff

08002310 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 031f 	and.w	r3, r3, #31
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002358:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6093      	str	r3, [r2, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800237c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002380:	d101      	bne.n	8002386 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <LL_ADC_IsEnabled+0x18>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <LL_ADC_IsEnabled+0x1a>
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002442:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002446:	f043 0204 	orr.w	r2, r3, #4
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d101      	bne.n	8002472 <LL_ADC_REG_IsConversionOngoing+0x18>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b08      	cmp	r3, #8
 8002492:	d101      	bne.n	8002498 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e130      	b.n	8002724 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff faf7 	bl	8001ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff3f 	bl	800236c <LL_ADC_IsDeepPowerDownEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff25 	bl	8002348 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff5a 	bl	80023bc <LL_ADC_IsInternalRegulatorEnabled>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff3e 	bl	8002394 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002518:	4b84      	ldr	r3, [pc, #528]	@ (800272c <HAL_ADC_Init+0x284>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	4a84      	ldr	r2, [pc, #528]	@ (8002730 <HAL_ADC_Init+0x288>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	3301      	adds	r3, #1
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800252c:	e002      	b.n	8002534 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3b01      	subs	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff3c 	bl	80023bc <LL_ADC_IsInternalRegulatorEnabled>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10d      	bne.n	8002566 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff75 	bl	800245a <LL_ADC_REG_IsConversionOngoing>
 8002570:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 80c9 	bne.w	8002712 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80c5 	bne.w	8002712 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002590:	f043 0202 	orr.w	r2, r3, #2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff35 	bl	800240c <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d115      	bne.n	80025d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a8:	4862      	ldr	r0, [pc, #392]	@ (8002734 <HAL_ADC_Init+0x28c>)
 80025aa:	f7ff ff2f 	bl	800240c <LL_ADC_IsEnabled>
 80025ae:	4604      	mov	r4, r0
 80025b0:	4861      	ldr	r0, [pc, #388]	@ (8002738 <HAL_ADC_Init+0x290>)
 80025b2:	f7ff ff2b 	bl	800240c <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	431c      	orrs	r4, r3
 80025ba:	4860      	ldr	r0, [pc, #384]	@ (800273c <HAL_ADC_Init+0x294>)
 80025bc:	f7ff ff26 	bl	800240c <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4323      	orrs	r3, r4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4619      	mov	r1, r3
 80025ce:	485c      	ldr	r0, [pc, #368]	@ (8002740 <HAL_ADC_Init+0x298>)
 80025d0:	f7ff fd86 	bl	80020e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7e5b      	ldrb	r3, [r3, #25]
 80025d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	3b01      	subs	r3, #1
 8002608:	045b      	lsls	r3, r3, #17
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b44      	ldr	r3, [pc, #272]	@ (8002744 <HAL_ADC_Init+0x29c>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff1b 	bl	8002480 <LL_ADC_INJ_IsConversionOngoing>
 800264a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d13d      	bne.n	80026ce <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d13a      	bne.n	80026ce <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800265c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002664:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002674:	f023 0302 	bic.w	r3, r3, #2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	69b9      	ldr	r1, [r7, #24]
 800267e:	430b      	orrs	r3, r1
 8002680:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002688:	2b01      	cmp	r3, #1
 800268a:	d118      	bne.n	80026be <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026ae:	430a      	orrs	r2, r1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	611a      	str	r2, [r3, #16]
 80026bc:	e007      	b.n	80026ce <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d10c      	bne.n	80026f0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	f023 010f 	bic.w	r1, r3, #15
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ee:	e007      	b.n	8002700 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 020f 	bic.w	r2, r2, #15
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	f023 0303 	bic.w	r3, r3, #3
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002710:	e007      	b.n	8002722 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002722:	7ffb      	ldrb	r3, [r7, #31]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3724      	adds	r7, #36	@ 0x24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}
 800272c:	20000000 	.word	0x20000000
 8002730:	053e2d63 	.word	0x053e2d63
 8002734:	50040000 	.word	0x50040000
 8002738:	50040100 	.word	0x50040100
 800273c:	50040200 	.word	0x50040200
 8002740:	50040300 	.word	0x50040300
 8002744:	fff0c007 	.word	0xfff0c007

08002748 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002750:	4857      	ldr	r0, [pc, #348]	@ (80028b0 <HAL_ADC_Start+0x168>)
 8002752:	f7ff fddd 	bl	8002310 <LL_ADC_GetMultimode>
 8002756:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fe7c 	bl	800245a <LL_ADC_REG_IsConversionOngoing>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 809c 	bne.w	80028a2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADC_Start+0x30>
 8002774:	2302      	movs	r3, #2
 8002776:	e097      	b.n	80028a8 <HAL_ADC_Start+0x160>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fd73 	bl	800326c <ADC_Enable>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 8083 	bne.w	8002898 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a42      	ldr	r2, [pc, #264]	@ (80028b4 <HAL_ADC_Start+0x16c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_Start+0x6e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_Start+0x70>
 80027b6:	4b40      	ldr	r3, [pc, #256]	@ (80028b8 <HAL_ADC_Start+0x170>)
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	4293      	cmp	r3, r2
 80027be:	d002      	beq.n	80027c6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d105      	bne.n	80027d2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027de:	d106      	bne.n	80027ee <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	f023 0206 	bic.w	r2, r3, #6
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	221c      	movs	r2, #28
 80027fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2a      	ldr	r2, [pc, #168]	@ (80028b4 <HAL_ADC_Start+0x16c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d002      	beq.n	8002814 <HAL_ADC_Start+0xcc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	e000      	b.n	8002816 <HAL_ADC_Start+0xce>
 8002814:	4b28      	ldr	r3, [pc, #160]	@ (80028b8 <HAL_ADC_Start+0x170>)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4293      	cmp	r3, r2
 800281c:	d008      	beq.n	8002830 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d002      	beq.n	8002830 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d114      	bne.n	800285a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002846:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fded 	bl	8002432 <LL_ADC_REG_StartConversion>
 8002858:	e025      	b.n	80028a6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <HAL_ADC_Start+0x16c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d002      	beq.n	8002876 <HAL_ADC_Start+0x12e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e000      	b.n	8002878 <HAL_ADC_Start+0x130>
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_ADC_Start+0x170>)
 8002878:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00f      	beq.n	80028a6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800288e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
 8002896:	e006      	b.n	80028a6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028a0:	e001      	b.n	80028a6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
 80028a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	50040300 	.word	0x50040300
 80028b4:	50040100 	.word	0x50040100
 80028b8:	50040000 	.word	0x50040000

080028bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c6:	4866      	ldr	r0, [pc, #408]	@ (8002a60 <HAL_ADC_PollForConversion+0x1a4>)
 80028c8:	f7ff fd22 	bl	8002310 <LL_ADC_GetMultimode>
 80028cc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d102      	bne.n	80028dc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028d6:	2308      	movs	r3, #8
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e02a      	b.n	8002932 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d002      	beq.n	80028ee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d111      	bne.n	8002912 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0a4      	b.n	8002a56 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800290c:	2304      	movs	r3, #4
 800290e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002910:	e00f      	b.n	8002932 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002912:	4853      	ldr	r0, [pc, #332]	@ (8002a60 <HAL_ADC_PollForConversion+0x1a4>)
 8002914:	f7ff fd0a 	bl	800232c <LL_ADC_GetMultiDMATransfer>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e093      	b.n	8002a56 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800292e:	2304      	movs	r3, #4
 8002930:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002932:	f7ff fba5 	bl	8002080 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002938:	e021      	b.n	800297e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d01d      	beq.n	800297e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002942:	f7ff fb9d 	bl	8002080 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <HAL_ADC_PollForConversion+0x9c>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d112      	bne.n	800297e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10b      	bne.n	800297e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e06b      	b.n	8002a56 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0d6      	beq.n	800293a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fc28 	bl	80021f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01c      	beq.n	80029e2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d118      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d111      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <HAL_ADC_PollForConversion+0x1a8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d002      	beq.n	80029f2 <HAL_ADC_PollForConversion+0x136>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	e000      	b.n	80029f4 <HAL_ADC_PollForConversion+0x138>
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_ADC_PollForConversion+0x1ac>)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d008      	beq.n	8002a0e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d002      	beq.n	8002a0e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	d104      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	e00c      	b.n	8002a32 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_ADC_PollForConversion+0x1a8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d002      	beq.n	8002a28 <HAL_ADC_PollForConversion+0x16c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e000      	b.n	8002a2a <HAL_ADC_PollForConversion+0x16e>
 8002a28:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <HAL_ADC_PollForConversion+0x1ac>)
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d104      	bne.n	8002a42 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e008      	b.n	8002a54 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	220c      	movs	r2, #12
 8002a52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	50040300 	.word	0x50040300
 8002a64:	50040100 	.word	0x50040100
 8002a68:	50040000 	.word	0x50040000

08002a6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0b6      	sub	sp, #216	@ 0xd8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x22>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e3c9      	b.n	800323e <HAL_ADC_ConfigChannel+0x7b6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fccf 	bl	800245a <LL_ADC_REG_IsConversionOngoing>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 83aa 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d824      	bhi.n	8002b1e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	3b02      	subs	r3, #2
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d81b      	bhi.n	8002b16 <HAL_ADC_ConfigChannel+0x8e>
 8002ade:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae4 <HAL_ADC_ConfigChannel+0x5c>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002afd 	.word	0x08002afd
 8002aec:	08002b05 	.word	0x08002b05
 8002af0:	08002b0d 	.word	0x08002b0d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002af4:	230c      	movs	r3, #12
 8002af6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002afa:	e010      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002afc:	2312      	movs	r3, #18
 8002afe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b02:	e00c      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b04:	2318      	movs	r3, #24
 8002b06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b0a:	e008      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b14:	e003      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b16:	2306      	movs	r3, #6
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002b1c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002b2c:	f7ff fb74 	bl	8002218 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fc90 	bl	800245a <LL_ADC_REG_IsConversionOngoing>
 8002b3a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fc9c 	bl	8002480 <LL_ADC_INJ_IsConversionOngoing>
 8002b48:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f040 81a4 	bne.w	8002e9e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 819f 	bne.w	8002e9e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f7ff fb7f 	bl	8002270 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d00a      	beq.n	8002baa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6919      	ldr	r1, [r3, #16]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ba4:	f7ff fad0 	bl	8002148 <LL_ADC_SetOffset>
 8002ba8:	e179      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff faed 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x14e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fae2 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	e01e      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x18c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fad7 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e004      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1a4>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	e018      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1d6>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e004      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d106      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff faa6 	bl	80021bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa8a 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x214>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa7f 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 021f 	and.w	r2, r3, #31
 8002c9a:	e01e      	b.n	8002cda <HAL_ADC_ConfigChannel+0x252>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa74 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e004      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x26a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	e018      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x29c>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fa43 	bl	80021bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fa27 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x2da>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa1c 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	e01e      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x318>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fa11 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e004      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x330>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	e014      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x35a>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e004      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d106      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f9e4 	bl	80021bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2103      	movs	r1, #3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f9c8 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x398>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2103      	movs	r1, #3
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff f9bd 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	f003 021f 	and.w	r2, r3, #31
 8002e1e:	e017      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x3c8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2103      	movs	r1, #3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f9b2 	bl	8002190 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002e3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x3e0>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	e011      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x404>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e78:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e003      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d106      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	2103      	movs	r1, #3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f98f 	bl	80021bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fab2 	bl	800240c <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 8140 	bne.w	8003130 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff fa03 	bl	80022c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a8f      	ldr	r2, [pc, #572]	@ (8003104 <HAL_ADC_ConfigChannel+0x67c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f040 8131 	bne.w	8003130 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10b      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x46e>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	bf94      	ite	ls
 8002eee:	2301      	movls	r3, #1
 8002ef0:	2300      	movhi	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	e019      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x4a2>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e003      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d079      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x4c2>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	3301      	adds	r3, #1
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f48:	e015      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x4ee>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f5a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x50e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	e017      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x53e>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	ea42 0103 	orr.w	r1, r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x564>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	0e9b      	lsrs	r3, r3, #26
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	051b      	lsls	r3, r3, #20
 8002fea:	e018      	b.n	800301e <HAL_ADC_ConfigChannel+0x596>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003004:	2320      	movs	r3, #32
 8003006:	e003      	b.n	8003010 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3301      	adds	r3, #1
 8003012:	f003 021f 	and.w	r2, r3, #31
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301e:	430b      	orrs	r3, r1
 8003020:	e081      	b.n	8003126 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_ADC_ConfigChannel+0x5b6>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800303c:	e015      	b.n	800306a <HAL_ADC_ConfigChannel+0x5e2>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADC_ConfigChannel+0x602>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	3301      	adds	r3, #1
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	e017      	b.n	80030ba <HAL_ADC_ConfigChannel+0x632>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	61bb      	str	r3, [r7, #24]
  return result;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x65e>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	3b1e      	subs	r3, #30
 80030de:	051b      	lsls	r3, r3, #20
 80030e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	e01e      	b.n	8003124 <HAL_ADC_ConfigChannel+0x69c>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	60fb      	str	r3, [r7, #12]
  return result;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e006      	b.n	8003110 <HAL_ADC_ConfigChannel+0x688>
 8003102:	bf00      	nop
 8003104:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 021f 	and.w	r2, r3, #31
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	3b1e      	subs	r3, #30
 800311e:	051b      	lsls	r3, r3, #20
 8003120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003124:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800312a:	4619      	mov	r1, r3
 800312c:	f7ff f8a0 	bl	8002270 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b44      	ldr	r3, [pc, #272]	@ (8003248 <HAL_ADC_ConfigChannel+0x7c0>)
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d07a      	beq.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800313c:	4843      	ldr	r0, [pc, #268]	@ (800324c <HAL_ADC_ConfigChannel+0x7c4>)
 800313e:	f7fe fff5 	bl	800212c <LL_ADC_GetCommonPathInternalCh>
 8003142:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a41      	ldr	r2, [pc, #260]	@ (8003250 <HAL_ADC_ConfigChannel+0x7c8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d12c      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d126      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3c      	ldr	r2, [pc, #240]	@ (8003254 <HAL_ADC_ConfigChannel+0x7cc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x6e8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3b      	ldr	r2, [pc, #236]	@ (8003258 <HAL_ADC_ConfigChannel+0x7d0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d15d      	bne.n	800322c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003174:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003178:	4619      	mov	r1, r3
 800317a:	4834      	ldr	r0, [pc, #208]	@ (800324c <HAL_ADC_ConfigChannel+0x7c4>)
 800317c:	f7fe ffc3 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003180:	4b36      	ldr	r3, [pc, #216]	@ (800325c <HAL_ADC_ConfigChannel+0x7d4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	099b      	lsrs	r3, r3, #6
 8003186:	4a36      	ldr	r2, [pc, #216]	@ (8003260 <HAL_ADC_ConfigChannel+0x7d8>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800319a:	e002      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3b01      	subs	r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f9      	bne.n	800319c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a8:	e040      	b.n	800322c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_ADC_ConfigChannel+0x7dc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d118      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d112      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a23      	ldr	r2, [pc, #140]	@ (8003254 <HAL_ADC_ConfigChannel+0x7cc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x74c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <HAL_ADC_ConfigChannel+0x7d0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d12d      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031dc:	4619      	mov	r1, r3
 80031de:	481b      	ldr	r0, [pc, #108]	@ (800324c <HAL_ADC_ConfigChannel+0x7c4>)
 80031e0:	f7fe ff91 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e4:	e024      	b.n	8003230 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003268 <HAL_ADC_ConfigChannel+0x7e0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d120      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a14      	ldr	r2, [pc, #80]	@ (8003254 <HAL_ADC_ConfigChannel+0x7cc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d115      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800320a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800320e:	4619      	mov	r1, r3
 8003210:	480e      	ldr	r0, [pc, #56]	@ (800324c <HAL_ADC_ConfigChannel+0x7c4>)
 8003212:	f7fe ff78 	bl	8002106 <LL_ADC_SetCommonPathInternalCh>
 8003216:	e00c      	b.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800322a:	e002      	b.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003230:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800323a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800323e:	4618      	mov	r0, r3
 8003240:	37d8      	adds	r7, #216	@ 0xd8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	80080000 	.word	0x80080000
 800324c:	50040300 	.word	0x50040300
 8003250:	c7520000 	.word	0xc7520000
 8003254:	50040000 	.word	0x50040000
 8003258:	50040200 	.word	0x50040200
 800325c:	20000000 	.word	0x20000000
 8003260:	053e2d63 	.word	0x053e2d63
 8003264:	cb840000 	.word	0xcb840000
 8003268:	80000001 	.word	0x80000001

0800326c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f8c5 	bl	800240c <LL_ADC_IsEnabled>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d169      	bne.n	800335c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <ADC_Enable+0xfc>)
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e055      	b.n	800335e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f894 	bl	80023e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032bc:	482b      	ldr	r0, [pc, #172]	@ (800336c <ADC_Enable+0x100>)
 80032be:	f7fe ff35 	bl	800212c <LL_ADC_GetCommonPathInternalCh>
 80032c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032cc:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <ADC_Enable+0x104>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <ADC_Enable+0x108>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032e6:	e002      	b.n	80032ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032f4:	f7fe fec4 	bl	8002080 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fa:	e028      	b.n	800334e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f883 	bl	800240c <LL_ADC_IsEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f867 	bl	80023e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003316:	f7fe feb3 	bl	8002080 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d914      	bls.n	800334e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d00d      	beq.n	800334e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e007      	b.n	800335e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d1cf      	bne.n	80032fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	8000003f 	.word	0x8000003f
 800336c:	50040300 	.word	0x50040300
 8003370:	20000000 	.word	0x20000000
 8003374:	053e2d63 	.word	0x053e2d63

08003378 <LL_ADC_IsEnabled>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <LL_ADC_IsEnabled+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_ADC_IsEnabled+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_ADC_REG_IsConversionOngoing>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d101      	bne.n	80033b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b09f      	sub	sp, #124	@ 0x7c
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e093      	b.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033ea:	2300      	movs	r3, #0
 80033ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033ee:	2300      	movs	r3, #0
 80033f0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a47      	ldr	r2, [pc, #284]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033fc:	4b46      	ldr	r3, [pc, #280]	@ (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	e001      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e072      	b.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ffb9 	bl	800339e <LL_ADC_REG_IsConversionOngoing>
 800342c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ffb3 	bl	800339e <LL_ADC_REG_IsConversionOngoing>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d154      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800343e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003440:	2b00      	cmp	r3, #0
 8003442:	d151      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003444:	4b35      	ldr	r3, [pc, #212]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003446:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02c      	beq.n	80034aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003462:	035b      	lsls	r3, r3, #13
 8003464:	430b      	orrs	r3, r1
 8003466:	431a      	orrs	r2, r3
 8003468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800346c:	4829      	ldr	r0, [pc, #164]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800346e:	f7ff ff83 	bl	8003378 <LL_ADC_IsEnabled>
 8003472:	4604      	mov	r4, r0
 8003474:	4828      	ldr	r0, [pc, #160]	@ (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003476:	f7ff ff7f 	bl	8003378 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	431c      	orrs	r4, r3
 800347e:	4828      	ldr	r0, [pc, #160]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003480:	f7ff ff7a 	bl	8003378 <LL_ADC_IsEnabled>
 8003484:	4603      	mov	r3, r0
 8003486:	4323      	orrs	r3, r4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d137      	bne.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800348c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003494:	f023 030f 	bic.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	6811      	ldr	r1, [r2, #0]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034a8:	e028      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b6:	4817      	ldr	r0, [pc, #92]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034b8:	f7ff ff5e 	bl	8003378 <LL_ADC_IsEnabled>
 80034bc:	4604      	mov	r4, r0
 80034be:	4816      	ldr	r0, [pc, #88]	@ (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034c0:	f7ff ff5a 	bl	8003378 <LL_ADC_IsEnabled>
 80034c4:	4603      	mov	r3, r0
 80034c6:	431c      	orrs	r4, r3
 80034c8:	4815      	ldr	r0, [pc, #84]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034ca:	f7ff ff55 	bl	8003378 <LL_ADC_IsEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4323      	orrs	r3, r4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d112      	bne.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034e6:	e009      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034fa:	e000      	b.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003506:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800350a:	4618      	mov	r0, r3
 800350c:	377c      	adds	r7, #124	@ 0x7c
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	50040000 	.word	0x50040000
 8003518:	50040100 	.word	0x50040100
 800351c:	50040300 	.word	0x50040300
 8003520:	50040200 	.word	0x50040200

08003524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003540:	4013      	ands	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800354c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003556:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <__NVIC_GetPriorityGrouping+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 0307 	and.w	r3, r3, #7
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db0b      	blt.n	80035b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4907      	ldr	r1, [pc, #28]	@ (80035c0 <__NVIC_EnableIRQ+0x38>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2001      	movs	r0, #1
 80035aa:	fa00 f202 	lsl.w	r2, r0, r2
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf28      	it	cs
 8003636:	2304      	movcs	r3, #4
 8003638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3304      	adds	r3, #4
 800363e:	2b06      	cmp	r3, #6
 8003640:	d902      	bls.n	8003648 <NVIC_EncodePriority+0x30>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b03      	subs	r3, #3
 8003646:	e000      	b.n	800364a <NVIC_EncodePriority+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	401a      	ands	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43d9      	mvns	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	4313      	orrs	r3, r2
         );
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	@ 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ff4c 	bl	8003524 <__NVIC_SetPriorityGrouping>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a6:	f7ff ff61 	bl	800356c <__NVIC_GetPriorityGrouping>
 80036aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	6978      	ldr	r0, [r7, #20]
 80036b2:	f7ff ffb1 	bl	8003618 <NVIC_EncodePriority>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ff80 	bl	80035c4 <__NVIC_SetPriority>
}
 80036c4:	bf00      	nop
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff54 	bl	8003588 <__NVIC_EnableIRQ>
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e17f      	b.n	80039f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8171 	beq.w	80039f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d005      	beq.n	8003728 <HAL_GPIO_Init+0x40>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d130      	bne.n	800378a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800375e:	2201      	movs	r2, #1
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0201 	and.w	r2, r3, #1
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b03      	cmp	r3, #3
 8003794:	d118      	bne.n	80037c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800379c:	2201      	movs	r2, #1
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	f003 0201 	and.w	r2, r3, #1
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d017      	beq.n	8003804 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d123      	bne.n	8003858 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	08da      	lsrs	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	6939      	ldr	r1, [r7, #16]
 8003854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80ac 	beq.w	80039f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a18 <HAL_GPIO_Init+0x330>)
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	4a5e      	ldr	r2, [pc, #376]	@ (8003a18 <HAL_GPIO_Init+0x330>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a18 <HAL_GPIO_Init+0x330>)
 80038a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038b2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038dc:	d025      	beq.n	800392a <HAL_GPIO_Init+0x242>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a20 <HAL_GPIO_Init+0x338>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <HAL_GPIO_Init+0x23e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003a24 <HAL_GPIO_Init+0x33c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <HAL_GPIO_Init+0x23a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a28 <HAL_GPIO_Init+0x340>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_GPIO_Init+0x236>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4c      	ldr	r2, [pc, #304]	@ (8003a2c <HAL_GPIO_Init+0x344>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00d      	beq.n	800391a <HAL_GPIO_Init+0x232>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4b      	ldr	r2, [pc, #300]	@ (8003a30 <HAL_GPIO_Init+0x348>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <HAL_GPIO_Init+0x22e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4a      	ldr	r2, [pc, #296]	@ (8003a34 <HAL_GPIO_Init+0x34c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_GPIO_Init+0x22a>
 800390e:	2306      	movs	r3, #6
 8003910:	e00c      	b.n	800392c <HAL_GPIO_Init+0x244>
 8003912:	2307      	movs	r3, #7
 8003914:	e00a      	b.n	800392c <HAL_GPIO_Init+0x244>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_Init+0x244>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_Init+0x244>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_Init+0x244>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_Init+0x244>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_Init+0x244>
 800392a:	2300      	movs	r3, #0
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800393c:	4937      	ldr	r1, [pc, #220]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800396e:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003974:	4b30      	ldr	r3, [pc, #192]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003998:	4a27      	ldr	r2, [pc, #156]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800399e:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039ec:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <HAL_GPIO_Init+0x350>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f47f ae78 	bne.w	80036f8 <HAL_GPIO_Init+0x10>
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	48000400 	.word	0x48000400
 8003a24:	48000800 	.word	0x48000800
 8003a28:	48000c00 	.word	0x48000c00
 8003a2c:	48001000 	.word	0x48001000
 8003a30:	48001400 	.word	0x48001400
 8003a34:	48001800 	.word	0x48001800
 8003a38:	40010400 	.word	0x40010400

08003a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e001      	b.n	8003a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	041a      	lsls	r2, r3, #16
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43d9      	mvns	r1, r3
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	400b      	ands	r3, r1
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ad4:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000

08003aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afa:	d130      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003afc:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b08:	d038      	beq.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b12:	4a1e      	ldr	r2, [pc, #120]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2232      	movs	r2, #50	@ 0x32
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	4a1b      	ldr	r2, [pc, #108]	@ (8003b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0c9b      	lsrs	r3, r3, #18
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b30:	e002      	b.n	8003b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b44:	d102      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f2      	bne.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b58:	d110      	bne.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e00f      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6a:	d007      	beq.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b74:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	20000000 	.word	0x20000000
 8003b94:	431bde83 	.word	0x431bde83

08003b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e3ca      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003baa:	4b97      	ldr	r3, [pc, #604]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb4:	4b94      	ldr	r3, [pc, #592]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80e4 	beq.w	8003d94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCC_OscConfig+0x4a>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	f040 808b 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 8087 	bne.w	8003cf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003be2:	4b89      	ldr	r3, [pc, #548]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_RCC_OscConfig+0x62>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e3a2      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	4b82      	ldr	r3, [pc, #520]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_RCC_OscConfig+0x7c>
 8003c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c12:	e005      	b.n	8003c20 <HAL_RCC_OscConfig+0x88>
 8003c14:	4b7c      	ldr	r3, [pc, #496]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d223      	bcs.n	8003c6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fd87 	bl	800473c <RCC_SetFlashLatencyFromMSIRange>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e383      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c38:	4b73      	ldr	r3, [pc, #460]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a72      	ldr	r2, [pc, #456]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	f043 0308 	orr.w	r3, r3, #8
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b70      	ldr	r3, [pc, #448]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	496d      	ldr	r1, [pc, #436]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c56:	4b6c      	ldr	r3, [pc, #432]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	4968      	ldr	r1, [pc, #416]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
 8003c6a:	e025      	b.n	8003cb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c6c:	4b66      	ldr	r3, [pc, #408]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c72:	f043 0308 	orr.w	r3, r3, #8
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b63      	ldr	r3, [pc, #396]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4960      	ldr	r1, [pc, #384]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	495b      	ldr	r1, [pc, #364]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd47 	bl	800473c <RCC_SetFlashLatencyFromMSIRange>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e343      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb8:	f000 fc4a 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b52      	ldr	r3, [pc, #328]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	4950      	ldr	r1, [pc, #320]	@ (8003e0c <HAL_RCC_OscConfig+0x274>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8003e10 <HAL_RCC_OscConfig+0x278>)
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8003e14 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe f839 	bl	8001d54 <HAL_InitTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d052      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	e327      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d032      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cf8:	4b43      	ldr	r3, [pc, #268]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a42      	ldr	r2, [pc, #264]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d04:	f7fe f9bc 	bl	8002080 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d0c:	f7fe f9b8 	bl	8002080 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e310      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d2a:	4b37      	ldr	r3, [pc, #220]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a36      	ldr	r2, [pc, #216]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d30:	f043 0308 	orr.w	r3, r3, #8
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b34      	ldr	r3, [pc, #208]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4931      	ldr	r1, [pc, #196]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d48:	4b2f      	ldr	r3, [pc, #188]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	492c      	ldr	r1, [pc, #176]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
 8003d5c:	e01a      	b.n	8003d94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d6a:	f7fe f989 	bl	8002080 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d72:	f7fe f985 	bl	8002080 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e2dd      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d84:	4b20      	ldr	r3, [pc, #128]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <HAL_RCC_OscConfig+0x1da>
 8003d90:	e000      	b.n	8003d94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d074      	beq.n	8003e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d005      	beq.n	8003db2 <HAL_RCC_OscConfig+0x21a>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d10e      	bne.n	8003dca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d10b      	bne.n	8003dca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d064      	beq.n	8003e88 <HAL_RCC_OscConfig+0x2f0>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d160      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e2ba      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x24a>
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e026      	b.n	8003e30 <HAL_RCC_OscConfig+0x298>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dea:	d115      	bne.n	8003e18 <HAL_RCC_OscConfig+0x280>
 8003dec:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a05      	ldr	r2, [pc, #20]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a02      	ldr	r2, [pc, #8]	@ (8003e08 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e014      	b.n	8003e30 <HAL_RCC_OscConfig+0x298>
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08009d80 	.word	0x08009d80
 8003e10:	20000000 	.word	0x20000000
 8003e14:	20000004 	.word	0x20000004
 8003e18:	4ba0      	ldr	r3, [pc, #640]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a9f      	ldr	r2, [pc, #636]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b9d      	ldr	r3, [pc, #628]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a9c      	ldr	r2, [pc, #624]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe f922 	bl	8002080 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fe f91e 	bl	8002080 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e276      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	4b92      	ldr	r3, [pc, #584]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x2a8>
 8003e5e:	e014      	b.n	8003e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f90e 	bl	8002080 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fe f90a 	bl	8002080 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	@ 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e262      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	4b88      	ldr	r3, [pc, #544]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2d0>
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d060      	beq.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x310>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d119      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d116      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x328>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e23f      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	4b76      	ldr	r3, [pc, #472]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	4973      	ldr	r1, [pc, #460]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed4:	e040      	b.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d023      	beq.n	8003f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ede:	4b6f      	ldr	r3, [pc, #444]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fe f8c9 	bl	8002080 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef2:	f7fe f8c5 	bl	8002080 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e21d      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f04:	4b65      	ldr	r3, [pc, #404]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f10:	4b62      	ldr	r3, [pc, #392]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	495f      	ldr	r1, [pc, #380]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	e018      	b.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f26:	4b5d      	ldr	r3, [pc, #372]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fe f8a5 	bl	8002080 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f8a1 	bl	8002080 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1f9      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4c:	4b53      	ldr	r3, [pc, #332]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d03c      	beq.n	8003fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f72:	4a4a      	ldr	r2, [pc, #296]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f880 	bl	8002080 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe f87c 	bl	8002080 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1d4      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f96:	4b41      	ldr	r3, [pc, #260]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ef      	beq.n	8003f84 <HAL_RCC_OscConfig+0x3ec>
 8003fa4:	e01b      	b.n	8003fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fac:	4a3b      	ldr	r2, [pc, #236]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fe f863 	bl	8002080 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbe:	f7fe f85f 	bl	8002080 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1b7      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1ef      	bne.n	8003fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a6 	beq.w	8004138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffc:	4b27      	ldr	r3, [pc, #156]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	4a26      	ldr	r2, [pc, #152]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004006:	6593      	str	r3, [r2, #88]	@ 0x58
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004014:	2301      	movs	r3, #1
 8004016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004018:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <HAL_RCC_OscConfig+0x508>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d118      	bne.n	8004056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004024:	4b1e      	ldr	r3, [pc, #120]	@ (80040a0 <HAL_RCC_OscConfig+0x508>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <HAL_RCC_OscConfig+0x508>)
 800402a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004030:	f7fe f826 	bl	8002080 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004038:	f7fe f822 	bl	8002080 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e17a      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <HAL_RCC_OscConfig+0x508>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d108      	bne.n	8004070 <HAL_RCC_OscConfig+0x4d8>
 800405e:	4b0f      	ldr	r3, [pc, #60]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004064:	4a0d      	ldr	r2, [pc, #52]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800406e:	e029      	b.n	80040c4 <HAL_RCC_OscConfig+0x52c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b05      	cmp	r3, #5
 8004076:	d115      	bne.n	80040a4 <HAL_RCC_OscConfig+0x50c>
 8004078:	4b08      	ldr	r3, [pc, #32]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	4a07      	ldr	r2, [pc, #28]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	4a03      	ldr	r2, [pc, #12]	@ (800409c <HAL_RCC_OscConfig+0x504>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004098:	e014      	b.n	80040c4 <HAL_RCC_OscConfig+0x52c>
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	40007000 	.word	0x40007000
 80040a4:	4b9c      	ldr	r3, [pc, #624]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	4a9b      	ldr	r2, [pc, #620]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040b4:	4b98      	ldr	r3, [pc, #608]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	4a97      	ldr	r2, [pc, #604]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d016      	beq.n	80040fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd ffd8 	bl	8002080 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fd ffd4 	bl	8002080 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e12a      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ed      	beq.n	80040d4 <HAL_RCC_OscConfig+0x53c>
 80040f8:	e015      	b.n	8004126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fd ffc1 	bl	8002080 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd ffbd 	bl	8002080 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e113      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004118:	4b7f      	ldr	r3, [pc, #508]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1ed      	bne.n	8004102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412c:	4b7a      	ldr	r3, [pc, #488]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	4a79      	ldr	r2, [pc, #484]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 8004132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004136:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80fe 	beq.w	800433e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	2b02      	cmp	r3, #2
 8004148:	f040 80d0 	bne.w	80042ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800414c:	4b72      	ldr	r3, [pc, #456]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0203 	and.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	429a      	cmp	r2, r3
 800415e:	d130      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	3b01      	subs	r3, #1
 800416c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d127      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11f      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800418c:	2a07      	cmp	r2, #7
 800418e:	bf14      	ite	ne
 8004190:	2201      	movne	r2, #1
 8004192:	2200      	moveq	r2, #0
 8004194:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004196:	4293      	cmp	r3, r2
 8004198:	d113      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	3b01      	subs	r3, #1
 80041bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d06e      	beq.n	80042a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d069      	beq.n	800429c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041c8:	4b53      	ldr	r3, [pc, #332]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041d4:	4b50      	ldr	r3, [pc, #320]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0ad      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80041ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041f0:	f7fd ff46 	bl	8002080 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd ff42 	bl	8002080 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e09a      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420a:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004216:	4b40      	ldr	r3, [pc, #256]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	4b40      	ldr	r3, [pc, #256]	@ (800431c <HAL_RCC_OscConfig+0x784>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004226:	3a01      	subs	r2, #1
 8004228:	0112      	lsls	r2, r2, #4
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004230:	0212      	lsls	r2, r2, #8
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004238:	0852      	lsrs	r2, r2, #1
 800423a:	3a01      	subs	r2, #1
 800423c:	0552      	lsls	r2, r2, #21
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004244:	0852      	lsrs	r2, r2, #1
 8004246:	3a01      	subs	r2, #1
 8004248:	0652      	lsls	r2, r2, #25
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004250:	0912      	lsrs	r2, r2, #4
 8004252:	0452      	lsls	r2, r2, #17
 8004254:	430a      	orrs	r2, r1
 8004256:	4930      	ldr	r1, [pc, #192]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 8004258:	4313      	orrs	r3, r2
 800425a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800425c:	4b2e      	ldr	r3, [pc, #184]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 8004262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a2a      	ldr	r2, [pc, #168]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 800426e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004274:	f7fd ff04 	bl	8002080 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd ff00 	bl	8002080 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e058      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428e:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800429a:	e050      	b.n	800433e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e04f      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d148      	bne.n	800433e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042b8:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042c4:	f7fd fedc 	bl	8002080 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fd fed8 	bl	8002080 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e030      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x734>
 80042ea:	e028      	b.n	800433e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d023      	beq.n	800433a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <HAL_RCC_OscConfig+0x780>)
 80042f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd febf 	bl	8002080 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004304:	e00c      	b.n	8004320 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004306:	f7fd febb 	bl	8002080 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d905      	bls.n	8004320 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e013      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
 8004318:	40021000 	.word	0x40021000
 800431c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <HAL_RCC_OscConfig+0x7b0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ec      	bne.n	8004306 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_OscConfig+0x7b0>)
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	4905      	ldr	r1, [pc, #20]	@ (8004348 <HAL_RCC_OscConfig+0x7b0>)
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_RCC_OscConfig+0x7b4>)
 8004334:	4013      	ands	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
 8004338:	e001      	b.n	800433e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	feeefffc 	.word	0xfeeefffc

08004350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0e7      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004364:	4b75      	ldr	r3, [pc, #468]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d910      	bls.n	8004394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b72      	ldr	r3, [pc, #456]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 0207 	bic.w	r2, r3, #7
 800437a:	4970      	ldr	r1, [pc, #448]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b6e      	ldr	r3, [pc, #440]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0cf      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b66      	ldr	r3, [pc, #408]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d908      	bls.n	80043c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b0:	4b63      	ldr	r3, [pc, #396]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4960      	ldr	r1, [pc, #384]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d04c      	beq.n	8004468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d121      	bne.n	8004426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0a6      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ee:	4b54      	ldr	r3, [pc, #336]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d115      	bne.n	8004426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e09a      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004406:	4b4e      	ldr	r3, [pc, #312]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e08e      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004416:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e086      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b46      	ldr	r3, [pc, #280]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4943      	ldr	r1, [pc, #268]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd fe22 	bl	8002080 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fd fe1e 	bl	8002080 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e06e      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b3a      	ldr	r3, [pc, #232]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	4b31      	ldr	r3, [pc, #196]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004480:	429a      	cmp	r2, r3
 8004482:	d208      	bcs.n	8004496 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004484:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	492b      	ldr	r1, [pc, #172]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004496:	4b29      	ldr	r3, [pc, #164]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d210      	bcs.n	80044c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a4:	4b25      	ldr	r3, [pc, #148]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 0207 	bic.w	r2, r3, #7
 80044ac:	4923      	ldr	r1, [pc, #140]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b4:	4b21      	ldr	r3, [pc, #132]	@ (800453c <HAL_RCC_ClockConfig+0x1ec>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e036      	b.n	8004534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	4918      	ldr	r1, [pc, #96]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4910      	ldr	r1, [pc, #64]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004504:	f000 f824 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	490b      	ldr	r1, [pc, #44]	@ (8004544 <HAL_RCC_ClockConfig+0x1f4>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	4a09      	ldr	r2, [pc, #36]	@ (8004548 <HAL_RCC_ClockConfig+0x1f8>)
 8004522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004524:	4b09      	ldr	r3, [pc, #36]	@ (800454c <HAL_RCC_ClockConfig+0x1fc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd fc13 	bl	8001d54 <HAL_InitTick>
 800452e:	4603      	mov	r3, r0
 8004530:	72fb      	strb	r3, [r7, #11]

  return status;
 8004532:	7afb      	ldrb	r3, [r7, #11]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40022000 	.word	0x40022000
 8004540:	40021000 	.word	0x40021000
 8004544:	08009d80 	.word	0x08009d80
 8004548:	20000000 	.word	0x20000000
 800454c:	20000004 	.word	0x20000004

08004550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	@ 0x24
 8004554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455e:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004568:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x34>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d121      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d11e      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004584:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004590:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045ac:	4a2b      	ldr	r2, [pc, #172]	@ (800465c <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d102      	bne.n	80045ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045c8:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e004      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045d4:	4b23      	ldr	r3, [pc, #140]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x114>)
 80045d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d134      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045de:	4b1e      	ldr	r3, [pc, #120]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d003      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0xac>
 80045f4:	e005      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x110>)
 80045f8:	617b      	str	r3, [r7, #20]
      break;
 80045fa:	e005      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045fc:	4b19      	ldr	r3, [pc, #100]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x114>)
 80045fe:	617b      	str	r3, [r7, #20]
      break;
 8004600:	e002      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	617b      	str	r3, [r7, #20]
      break;
 8004606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	3301      	adds	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	fb03 f202 	mul.w	r2, r3, r2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800462e:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x108>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	0e5b      	lsrs	r3, r3, #25
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	3301      	adds	r3, #1
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004648:	69bb      	ldr	r3, [r7, #24]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	08009d98 	.word	0x08009d98
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	@ (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000000 	.word	0x20000000

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004684:	f7ff fff0 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4904      	ldr	r1, [pc, #16]	@ (80046a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	08009d90 	.word	0x08009d90

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046b0:	f7ff ffda 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0adb      	lsrs	r3, r3, #11
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4904      	ldr	r1, [pc, #16]	@ (80046d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	08009d90 	.word	0x08009d90

080046d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	220f      	movs	r2, #15
 80046e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80046e8:	4b12      	ldr	r3, [pc, #72]	@ (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80046f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800470c:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <HAL_RCC_GetClockConfig+0x5c>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800471a:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <HAL_RCC_GetClockConfig+0x60>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0207 	and.w	r2, r3, #7
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	601a      	str	r2, [r3, #0]
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	40022000 	.word	0x40022000

0800473c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004748:	4b2a      	ldr	r3, [pc, #168]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004754:	f7ff f9bc 	bl	8003ad0 <HAL_PWREx_GetVoltageRange>
 8004758:	6178      	str	r0, [r7, #20]
 800475a:	e014      	b.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b25      	ldr	r3, [pc, #148]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004766:	6593      	str	r3, [r2, #88]	@ 0x58
 8004768:	4b22      	ldr	r3, [pc, #136]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004774:	f7ff f9ac 	bl	8003ad0 <HAL_PWREx_GetVoltageRange>
 8004778:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800477a:	4b1e      	ldr	r3, [pc, #120]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	4a1d      	ldr	r2, [pc, #116]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004784:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478c:	d10b      	bne.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b80      	cmp	r3, #128	@ 0x80
 8004792:	d919      	bls.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2ba0      	cmp	r3, #160	@ 0xa0
 8004798:	d902      	bls.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800479a:	2302      	movs	r3, #2
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	e013      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a0:	2301      	movs	r3, #1
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e010      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b80      	cmp	r3, #128	@ 0x80
 80047aa:	d902      	bls.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047ac:	2303      	movs	r3, #3
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e00a      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b80      	cmp	r3, #128	@ 0x80
 80047b6:	d102      	bne.n	80047be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047b8:	2302      	movs	r3, #2
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e004      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b70      	cmp	r3, #112	@ 0x70
 80047c2:	d101      	bne.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c4:	2301      	movs	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 0207 	bic.w	r2, r3, #7
 80047d0:	4909      	ldr	r1, [pc, #36]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d8:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d001      	beq.n	80047ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40022000 	.word	0x40022000

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004804:	2300      	movs	r3, #0
 8004806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004808:	2300      	movs	r3, #0
 800480a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d041      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800481c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004820:	d02a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004822:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004826:	d824      	bhi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004828:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800482c:	d008      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800482e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004832:	d81e      	bhi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800483c:	d010      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800483e:	e018      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004840:	4b86      	ldr	r3, [pc, #536]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a85      	ldr	r2, [pc, #532]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800484a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800484c:	e015      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fabb 	bl	8004dd0 <RCCEx_PLLSAI1_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800485e:	e00c      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3320      	adds	r3, #32
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fba6 	bl	8004fb8 <RCCEx_PLLSAI2_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	74fb      	strb	r3, [r7, #19]
      break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004880:	4b76      	ldr	r3, [pc, #472]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004886:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800488e:	4973      	ldr	r1, [pc, #460]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004896:	e001      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d041      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b0:	d02a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b6:	d824      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c2:	d81e      	bhi.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048cc:	d010      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ce:	e018      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d0:	4b62      	ldr	r3, [pc, #392]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a61      	ldr	r2, [pc, #388]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048dc:	e015      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fa73 	bl	8004dd0 <RCCEx_PLLSAI1_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ee:	e00c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3320      	adds	r3, #32
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fb5e 	bl	8004fb8 <RCCEx_PLLSAI2_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	74fb      	strb	r3, [r7, #19]
      break;
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004910:	4b52      	ldr	r3, [pc, #328]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800491e:	494f      	ldr	r1, [pc, #316]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a0 	beq.w	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b41      	ldr	r3, [pc, #260]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004958:	4a40      	ldr	r2, [pc, #256]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004960:	4b3e      	ldr	r3, [pc, #248]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496c:	2301      	movs	r3, #1
 800496e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004970:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800497a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800497c:	f7fd fb80 	bl	8002080 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004982:	e009      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004984:	f7fd fb7c 	bl	8002080 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	74fb      	strb	r3, [r7, #19]
        break;
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004998:	4b31      	ldr	r3, [pc, #196]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ef      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049a4:	7cfb      	ldrb	r3, [r7, #19]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d15c      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049aa:	4b2c      	ldr	r3, [pc, #176]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d019      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c8:	4b24      	ldr	r3, [pc, #144]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d4:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	4a20      	ldr	r2, [pc, #128]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f4:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fd fb3b 	bl	8002080 <HAL_GetTick>
 8004a0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0c:	e00b      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fd fb37 	bl	8002080 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d902      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	74fb      	strb	r3, [r7, #19]
            break;
 8004a24:	e006      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ec      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3a:	4b08      	ldr	r3, [pc, #32]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4a:	4904      	ldr	r1, [pc, #16]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a52:	e009      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a68:	7c7b      	ldrb	r3, [r7, #17]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d105      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	4a9d      	ldr	r2, [pc, #628]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a86:	4b98      	ldr	r3, [pc, #608]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8c:	f023 0203 	bic.w	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	4994      	ldr	r1, [pc, #592]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f023 020c 	bic.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	498c      	ldr	r1, [pc, #560]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aca:	4b87      	ldr	r3, [pc, #540]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	4983      	ldr	r1, [pc, #524]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	497b      	ldr	r1, [pc, #492]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1c:	4972      	ldr	r1, [pc, #456]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b30:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b3e:	496a      	ldr	r1, [pc, #424]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b52:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b60:	4961      	ldr	r1, [pc, #388]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b74:	4b5c      	ldr	r3, [pc, #368]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b82:	4959      	ldr	r1, [pc, #356]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b96:	4b54      	ldr	r3, [pc, #336]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba4:	4950      	ldr	r1, [pc, #320]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	4948      	ldr	r1, [pc, #288]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bda:	4b43      	ldr	r3, [pc, #268]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	493f      	ldr	r1, [pc, #252]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d028      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c0a:	4937      	ldr	r1, [pc, #220]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c1c:	4b32      	ldr	r3, [pc, #200]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a31      	ldr	r2, [pc, #196]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c26:	60d3      	str	r3, [r2, #12]
 8004c28:	e011      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	2101      	movs	r1, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f8c8 	bl	8004dd0 <RCCEx_PLLSAI1_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d028      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c5a:	4b23      	ldr	r3, [pc, #140]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c68:	491f      	ldr	r1, [pc, #124]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c78:	d106      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c84:	60d3      	str	r3, [r2, #12]
 8004c86:	e011      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c90:	d10c      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2101      	movs	r1, #1
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f899 	bl	8004dd0 <RCCEx_PLLSAI1_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02b      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc6:	4908      	ldr	r1, [pc, #32]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd6:	d109      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd8:	4b03      	ldr	r3, [pc, #12]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a02      	ldr	r2, [pc, #8]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce2:	60d3      	str	r3, [r2, #12]
 8004ce4:	e014      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 f867 	bl	8004dd0 <RCCEx_PLLSAI1_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d06:	7cfb      	ldrb	r3, [r7, #19]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02f      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d2a:	4928      	ldr	r1, [pc, #160]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d3a:	d10d      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	2102      	movs	r1, #2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f844 	bl	8004dd0 <RCCEx_PLLSAI1_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	74bb      	strb	r3, [r7, #18]
 8004d56:	e011      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3320      	adds	r3, #32
 8004d66:	2102      	movs	r1, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 f925 	bl	8004fb8 <RCCEx_PLLSAI2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d72:	7cfb      	ldrb	r3, [r7, #19]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d88:	4b10      	ldr	r3, [pc, #64]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d96:	490d      	ldr	r1, [pc, #52]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004daa:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dba:	4904      	ldr	r1, [pc, #16]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000

08004dd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dde:	4b75      	ldr	r3, [pc, #468]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dea:	4b72      	ldr	r3, [pc, #456]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0203 	and.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10d      	bne.n	8004e16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e02:	4b6c      	ldr	r3, [pc, #432]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
       ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d047      	beq.n	8004ea6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	e044      	b.n	8004ea6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d018      	beq.n	8004e56 <RCCEx_PLLSAI1_Config+0x86>
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d825      	bhi.n	8004e74 <RCCEx_PLLSAI1_Config+0xa4>
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d002      	beq.n	8004e32 <RCCEx_PLLSAI1_Config+0x62>
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d009      	beq.n	8004e44 <RCCEx_PLLSAI1_Config+0x74>
 8004e30:	e020      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e32:	4b60      	ldr	r3, [pc, #384]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d11d      	bne.n	8004e7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e42:	e01a      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e44:	4b5b      	ldr	r3, [pc, #364]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d116      	bne.n	8004e7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e54:	e013      	b.n	8004e7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e56:	4b57      	ldr	r3, [pc, #348]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10f      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e62:	4b54      	ldr	r3, [pc, #336]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e72:	e006      	b.n	8004e82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e004      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e002      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e82:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10d      	bne.n	8004ea6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6819      	ldr	r1, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	4944      	ldr	r1, [pc, #272]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d17d      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eac:	4b41      	ldr	r3, [pc, #260]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a40      	ldr	r2, [pc, #256]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fd f8e2 	bl	8002080 <HAL_GetTick>
 8004ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ebe:	e009      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec0:	f7fd f8de 	bl	8002080 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d902      	bls.n	8004ed4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed2:	e005      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ed4:	4b37      	ldr	r3, [pc, #220]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ef      	bne.n	8004ec0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d160      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d111      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eec:	4b31      	ldr	r3, [pc, #196]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6892      	ldr	r2, [r2, #8]
 8004efc:	0211      	lsls	r1, r2, #8
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68d2      	ldr	r2, [r2, #12]
 8004f02:	0912      	lsrs	r2, r2, #4
 8004f04:	0452      	lsls	r2, r2, #17
 8004f06:	430a      	orrs	r2, r1
 8004f08:	492a      	ldr	r1, [pc, #168]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]
 8004f0e:	e027      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d112      	bne.n	8004f3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f16:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6892      	ldr	r2, [r2, #8]
 8004f26:	0211      	lsls	r1, r2, #8
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6912      	ldr	r2, [r2, #16]
 8004f2c:	0852      	lsrs	r2, r2, #1
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	0552      	lsls	r2, r2, #21
 8004f32:	430a      	orrs	r2, r1
 8004f34:	491f      	ldr	r1, [pc, #124]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
 8004f3a:	e011      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	0211      	lsls	r1, r2, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6952      	ldr	r2, [r2, #20]
 8004f52:	0852      	lsrs	r2, r2, #1
 8004f54:	3a01      	subs	r2, #1
 8004f56:	0652      	lsls	r2, r2, #25
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	4916      	ldr	r1, [pc, #88]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f60:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a13      	ldr	r2, [pc, #76]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fd f888 	bl	8002080 <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f74:	f7fd f884 	bl	8002080 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
          break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f88:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ef      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	4904      	ldr	r1, [pc, #16]	@ (8004fb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fd2:	4b67      	ldr	r3, [pc, #412]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0203 	and.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d10d      	bne.n	8004ffe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fea:	4b61      	ldr	r3, [pc, #388]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
       ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d047      	beq.n	800508e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e044      	b.n	800508e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d018      	beq.n	800503e <RCCEx_PLLSAI2_Config+0x86>
 800500c:	2b03      	cmp	r3, #3
 800500e:	d825      	bhi.n	800505c <RCCEx_PLLSAI2_Config+0xa4>
 8005010:	2b01      	cmp	r3, #1
 8005012:	d002      	beq.n	800501a <RCCEx_PLLSAI2_Config+0x62>
 8005014:	2b02      	cmp	r3, #2
 8005016:	d009      	beq.n	800502c <RCCEx_PLLSAI2_Config+0x74>
 8005018:	e020      	b.n	800505c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800501a:	4b55      	ldr	r3, [pc, #340]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11d      	bne.n	8005062 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502a:	e01a      	b.n	8005062 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800502c:	4b50      	ldr	r3, [pc, #320]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d116      	bne.n	8005066 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503c:	e013      	b.n	8005066 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800503e:	4b4c      	ldr	r3, [pc, #304]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800504a:	4b49      	ldr	r3, [pc, #292]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800505a:	e006      	b.n	800506a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e004      	b.n	800506c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005062:	bf00      	nop
 8005064:	e002      	b.n	800506c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506a:	bf00      	nop
    }

    if(status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10d      	bne.n	800508e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005072:	4b3f      	ldr	r3, [pc, #252]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	3b01      	subs	r3, #1
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	430b      	orrs	r3, r1
 8005088:	4939      	ldr	r1, [pc, #228]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d167      	bne.n	8005164 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a35      	ldr	r2, [pc, #212]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fc ffee 	bl	8002080 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a8:	f7fc ffea 	bl	8002080 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ef      	bne.n	80050a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d14a      	bne.n	8005164 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d111      	bne.n	80050f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d4:	4b26      	ldr	r3, [pc, #152]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6892      	ldr	r2, [r2, #8]
 80050e4:	0211      	lsls	r1, r2, #8
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68d2      	ldr	r2, [r2, #12]
 80050ea:	0912      	lsrs	r2, r2, #4
 80050ec:	0452      	lsls	r2, r2, #17
 80050ee:	430a      	orrs	r2, r1
 80050f0:	491f      	ldr	r1, [pc, #124]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	614b      	str	r3, [r1, #20]
 80050f6:	e011      	b.n	800511c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005100:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6892      	ldr	r2, [r2, #8]
 8005108:	0211      	lsls	r1, r2, #8
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6912      	ldr	r2, [r2, #16]
 800510e:	0852      	lsrs	r2, r2, #1
 8005110:	3a01      	subs	r2, #1
 8005112:	0652      	lsls	r2, r2, #25
 8005114:	430a      	orrs	r2, r1
 8005116:	4916      	ldr	r1, [pc, #88]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005118:	4313      	orrs	r3, r2
 800511a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800511c:	4b14      	ldr	r3, [pc, #80]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a13      	ldr	r2, [pc, #76]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005126:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005128:	f7fc ffaa 	bl	8002080 <HAL_GetTick>
 800512c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800512e:	e009      	b.n	8005144 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005130:	f7fc ffa6 	bl	8002080 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	73fb      	strb	r3, [r7, #15]
          break;
 8005142:	e005      	b.n	8005150 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005144:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ef      	beq.n	8005130 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	4904      	ldr	r1, [pc, #16]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005160:	4313      	orrs	r3, r2
 8005162:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc fd12 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fd1c 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e04f      	b.n	80052dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a23      	ldr	r2, [pc, #140]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01d      	beq.n	800529a <HAL_TIM_Base_Start_IT+0x76>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d018      	beq.n	800529a <HAL_TIM_Base_Start_IT+0x76>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_TIM_Base_Start_IT+0xc8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_TIM_Base_Start_IT+0x76>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_TIM_Base_Start_IT+0x76>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_TIM_Base_Start_IT+0x76>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_TIM_Base_Start_IT+0x76>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d115      	bne.n	80052c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <HAL_TIM_Base_Start_IT+0xdc>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d015      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0xb4>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b2:	d011      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	e008      	b.n	80052d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e000      	b.n	80052da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	00010007 	.word	0x00010007

08005304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e049      	b.n	80053aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f841 	bl	80053b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fc54 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_TIM_PWM_Start+0x24>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	e03c      	b.n	8005466 <HAL_TIM_PWM_Start+0x9e>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d109      	bne.n	8005406 <HAL_TIM_PWM_Start+0x3e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	bf14      	ite	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	2300      	moveq	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e02f      	b.n	8005466 <HAL_TIM_PWM_Start+0x9e>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d109      	bne.n	8005420 <HAL_TIM_PWM_Start+0x58>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e022      	b.n	8005466 <HAL_TIM_PWM_Start+0x9e>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d109      	bne.n	800543a <HAL_TIM_PWM_Start+0x72>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	bf14      	ite	ne
 8005432:	2301      	movne	r3, #1
 8005434:	2300      	moveq	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e015      	b.n	8005466 <HAL_TIM_PWM_Start+0x9e>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b10      	cmp	r3, #16
 800543e:	d109      	bne.n	8005454 <HAL_TIM_PWM_Start+0x8c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e008      	b.n	8005466 <HAL_TIM_PWM_Start+0x9e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e09c      	b.n	80055a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0xb6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800547c:	e023      	b.n	80054c6 <HAL_TIM_PWM_Start+0xfe>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0xc6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800548c:	e01b      	b.n	80054c6 <HAL_TIM_PWM_Start+0xfe>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0xd6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	e013      	b.n	80054c6 <HAL_TIM_PWM_Start+0xfe>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0xe6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054ac:	e00b      	b.n	80054c6 <HAL_TIM_PWM_Start+0xfe>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start+0xf6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054bc:	e003      	b.n	80054c6 <HAL_TIM_PWM_Start+0xfe>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ffa4 	bl	800641c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a35      	ldr	r2, [pc, #212]	@ (80055b0 <HAL_TIM_PWM_Start+0x1e8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_TIM_PWM_Start+0x13e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a34      	ldr	r2, [pc, #208]	@ (80055b4 <HAL_TIM_PWM_Start+0x1ec>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_TIM_PWM_Start+0x13e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a32      	ldr	r2, [pc, #200]	@ (80055b8 <HAL_TIM_PWM_Start+0x1f0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_TIM_PWM_Start+0x13e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a31      	ldr	r2, [pc, #196]	@ (80055bc <HAL_TIM_PWM_Start+0x1f4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_TIM_PWM_Start+0x13e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2f      	ldr	r2, [pc, #188]	@ (80055c0 <HAL_TIM_PWM_Start+0x1f8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_Start+0x142>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <HAL_TIM_PWM_Start+0x144>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800551e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a22      	ldr	r2, [pc, #136]	@ (80055b0 <HAL_TIM_PWM_Start+0x1e8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01d      	beq.n	8005566 <HAL_TIM_PWM_Start+0x19e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005532:	d018      	beq.n	8005566 <HAL_TIM_PWM_Start+0x19e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <HAL_TIM_PWM_Start+0x1fc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_TIM_PWM_Start+0x19e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_TIM_PWM_Start+0x200>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_TIM_PWM_Start+0x19e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_TIM_PWM_Start+0x204>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_TIM_PWM_Start+0x19e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a17      	ldr	r2, [pc, #92]	@ (80055b4 <HAL_TIM_PWM_Start+0x1ec>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIM_PWM_Start+0x19e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <HAL_TIM_PWM_Start+0x1f0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d115      	bne.n	8005592 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b18      	ldr	r3, [pc, #96]	@ (80055d0 <HAL_TIM_PWM_Start+0x208>)
 800556e:	4013      	ands	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b06      	cmp	r3, #6
 8005576:	d015      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x1dc>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800557e:	d011      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	e008      	b.n	80055a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	00010007 	.word	0x00010007

080055d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0202 	mvn.w	r2, #2
 8005608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fac7 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fab9 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 faca 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0204 	mvn.w	r2, #4
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 faa1 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa93 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 faa4 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01b      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0208 	mvn.w	r2, #8
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa7b 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa6d 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa7e 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d020      	beq.n	800571c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01b      	beq.n	800571c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0210 	mvn.w	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2208      	movs	r2, #8
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa55 	bl	8005bb2 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa47 	bl	8005b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa58 	bl	8005bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0201 	mvn.w	r2, #1
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc f982 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 ff0f 	bl	800658c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 ff07 	bl	80065a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa12 	bl	8005bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0220 	mvn.w	r2, #32
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fecf 	bl	8006578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ff      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b14      	cmp	r3, #20
 800580e:	f200 80f0 	bhi.w	80059f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800586d 	.word	0x0800586d
 800581c:	080059f3 	.word	0x080059f3
 8005820:	080059f3 	.word	0x080059f3
 8005824:	080059f3 	.word	0x080059f3
 8005828:	080058ad 	.word	0x080058ad
 800582c:	080059f3 	.word	0x080059f3
 8005830:	080059f3 	.word	0x080059f3
 8005834:	080059f3 	.word	0x080059f3
 8005838:	080058ef 	.word	0x080058ef
 800583c:	080059f3 	.word	0x080059f3
 8005840:	080059f3 	.word	0x080059f3
 8005844:	080059f3 	.word	0x080059f3
 8005848:	0800592f 	.word	0x0800592f
 800584c:	080059f3 	.word	0x080059f3
 8005850:	080059f3 	.word	0x080059f3
 8005854:	080059f3 	.word	0x080059f3
 8005858:	08005971 	.word	0x08005971
 800585c:	080059f3 	.word	0x080059f3
 8005860:	080059f3 	.word	0x080059f3
 8005864:	080059f3 	.word	0x080059f3
 8005868:	080059b1 	.word	0x080059b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fa62 	bl	8005d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6999      	ldr	r1, [r3, #24]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	619a      	str	r2, [r3, #24]
      break;
 80058aa:	e0a5      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fad2 	bl	8005e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]
      break;
 80058ec:	e084      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fb3b 	bl	8005f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0208 	orr.w	r2, r2, #8
 8005908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69d9      	ldr	r1, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	61da      	str	r2, [r3, #28]
      break;
 800592c:	e064      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fba3 	bl	8006080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
      break;
 800596e:	e043      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fbec 	bl	8006154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059ae:	e023      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fc30 	bl	800621c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059f0:	e002      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
      break;
 80059f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop

08005a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_ConfigClockSource+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0b6      	b.n	8005b96 <HAL_TIM_ConfigClockSource+0x18a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a64:	d03e      	beq.n	8005ae4 <HAL_TIM_ConfigClockSource+0xd8>
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a6a:	f200 8087 	bhi.w	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a72:	f000 8086 	beq.w	8005b82 <HAL_TIM_ConfigClockSource+0x176>
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7a:	d87f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a7c:	2b70      	cmp	r3, #112	@ 0x70
 8005a7e:	d01a      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xaa>
 8005a80:	2b70      	cmp	r3, #112	@ 0x70
 8005a82:	d87b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a84:	2b60      	cmp	r3, #96	@ 0x60
 8005a86:	d050      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x11e>
 8005a88:	2b60      	cmp	r3, #96	@ 0x60
 8005a8a:	d877      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a8c:	2b50      	cmp	r3, #80	@ 0x50
 8005a8e:	d03c      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xfe>
 8005a90:	2b50      	cmp	r3, #80	@ 0x50
 8005a92:	d873      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d058      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x13e>
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d86f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005a9c:	2b30      	cmp	r3, #48	@ 0x30
 8005a9e:	d064      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005aa0:	2b30      	cmp	r3, #48	@ 0x30
 8005aa2:	d86b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d060      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d867      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d05c      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d05a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15e>
 8005ab4:	e062      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac6:	f000 fc89 	bl	80063dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	609a      	str	r2, [r3, #8]
      break;
 8005ae2:	e04f      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005af4:	f000 fc72 	bl	80063dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b06:	609a      	str	r2, [r3, #8]
      break;
 8005b08:	e03c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 fbe6 	bl	80062e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2150      	movs	r1, #80	@ 0x50
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fc3f 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005b28:	e02c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 fc05 	bl	8006346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2160      	movs	r1, #96	@ 0x60
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fc2f 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005b48:	e01c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fbc6 	bl	80062e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2140      	movs	r1, #64	@ 0x40
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fc1f 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005b68:	e00c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 fc16 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005b7a:	e003      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a46      	ldr	r2, [pc, #280]	@ (8005d1c <TIM_Base_SetConfig+0x12c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0e:	d00f      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a43      	ldr	r2, [pc, #268]	@ (8005d20 <TIM_Base_SetConfig+0x130>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a42      	ldr	r2, [pc, #264]	@ (8005d24 <TIM_Base_SetConfig+0x134>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a41      	ldr	r2, [pc, #260]	@ (8005d28 <TIM_Base_SetConfig+0x138>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a40      	ldr	r2, [pc, #256]	@ (8005d2c <TIM_Base_SetConfig+0x13c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a35      	ldr	r2, [pc, #212]	@ (8005d1c <TIM_Base_SetConfig+0x12c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01f      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c50:	d01b      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a32      	ldr	r2, [pc, #200]	@ (8005d20 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d017      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a31      	ldr	r2, [pc, #196]	@ (8005d24 <TIM_Base_SetConfig+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a30      	ldr	r2, [pc, #192]	@ (8005d28 <TIM_Base_SetConfig+0x138>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00f      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005d2c <TIM_Base_SetConfig+0x13c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2e      	ldr	r2, [pc, #184]	@ (8005d30 <TIM_Base_SetConfig+0x140>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d34 <TIM_Base_SetConfig+0x144>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	@ (8005d38 <TIM_Base_SetConfig+0x148>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d108      	bne.n	8005c9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <TIM_Base_SetConfig+0x12c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <TIM_Base_SetConfig+0x13c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a17      	ldr	r2, [pc, #92]	@ (8005d30 <TIM_Base_SetConfig+0x140>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a16      	ldr	r2, [pc, #88]	@ (8005d34 <TIM_Base_SetConfig+0x144>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0xf8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	@ (8005d38 <TIM_Base_SetConfig+0x148>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d105      	bne.n	8005d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800

08005d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f023 0201 	bic.w	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 0302 	bic.w	r3, r3, #2
 8005d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a2c      	ldr	r2, [pc, #176]	@ (8005e48 <TIM_OC1_SetConfig+0x10c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00f      	beq.n	8005dbc <TIM_OC1_SetConfig+0x80>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e4c <TIM_OC1_SetConfig+0x110>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00b      	beq.n	8005dbc <TIM_OC1_SetConfig+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a2a      	ldr	r2, [pc, #168]	@ (8005e50 <TIM_OC1_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d007      	beq.n	8005dbc <TIM_OC1_SetConfig+0x80>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a29      	ldr	r2, [pc, #164]	@ (8005e54 <TIM_OC1_SetConfig+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC1_SetConfig+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a28      	ldr	r2, [pc, #160]	@ (8005e58 <TIM_OC1_SetConfig+0x11c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d10c      	bne.n	8005dd6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0308 	bic.w	r3, r3, #8
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 0304 	bic.w	r3, r3, #4
 8005dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <TIM_OC1_SetConfig+0x10c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00f      	beq.n	8005dfe <TIM_OC1_SetConfig+0xc2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e4c <TIM_OC1_SetConfig+0x110>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00b      	beq.n	8005dfe <TIM_OC1_SetConfig+0xc2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <TIM_OC1_SetConfig+0x114>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d007      	beq.n	8005dfe <TIM_OC1_SetConfig+0xc2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a18      	ldr	r2, [pc, #96]	@ (8005e54 <TIM_OC1_SetConfig+0x118>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d003      	beq.n	8005dfe <TIM_OC1_SetConfig+0xc2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a17      	ldr	r2, [pc, #92]	@ (8005e58 <TIM_OC1_SetConfig+0x11c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d111      	bne.n	8005e22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40013400 	.word	0x40013400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40014400 	.word	0x40014400
 8005e58:	40014800 	.word	0x40014800

08005e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f023 0210 	bic.w	r2, r3, #16
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0320 	bic.w	r3, r3, #32
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a28      	ldr	r2, [pc, #160]	@ (8005f5c <TIM_OC2_SetConfig+0x100>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC2_SetConfig+0x6c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a27      	ldr	r2, [pc, #156]	@ (8005f60 <TIM_OC2_SetConfig+0x104>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d10d      	bne.n	8005ee4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <TIM_OC2_SetConfig+0x100>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_OC2_SetConfig+0xb0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <TIM_OC2_SetConfig+0x104>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_OC2_SetConfig+0xb0>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f64 <TIM_OC2_SetConfig+0x108>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_OC2_SetConfig+0xb0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <TIM_OC2_SetConfig+0x10c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC2_SetConfig+0xb0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <TIM_OC2_SetConfig+0x110>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d113      	bne.n	8005f34 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800

08005f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a27      	ldr	r2, [pc, #156]	@ (800606c <TIM_OC3_SetConfig+0xfc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d003      	beq.n	8005fda <TIM_OC3_SetConfig+0x6a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	@ (8006070 <TIM_OC3_SetConfig+0x100>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d10d      	bne.n	8005ff6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800606c <TIM_OC3_SetConfig+0xfc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00f      	beq.n	800601e <TIM_OC3_SetConfig+0xae>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a1b      	ldr	r2, [pc, #108]	@ (8006070 <TIM_OC3_SetConfig+0x100>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_OC3_SetConfig+0xae>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a1a      	ldr	r2, [pc, #104]	@ (8006074 <TIM_OC3_SetConfig+0x104>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <TIM_OC3_SetConfig+0xae>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <TIM_OC3_SetConfig+0x108>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_OC3_SetConfig+0xae>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a18      	ldr	r2, [pc, #96]	@ (800607c <TIM_OC3_SetConfig+0x10c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d113      	bne.n	8006046 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	621a      	str	r2, [r3, #32]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40013400 	.word	0x40013400
 8006074:	40014000 	.word	0x40014000
 8006078:	40014400 	.word	0x40014400
 800607c:	40014800 	.word	0x40014800

08006080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	031b      	lsls	r3, r3, #12
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a18      	ldr	r2, [pc, #96]	@ (8006140 <TIM_OC4_SetConfig+0xc0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_OC4_SetConfig+0x84>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a17      	ldr	r2, [pc, #92]	@ (8006144 <TIM_OC4_SetConfig+0xc4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_OC4_SetConfig+0x84>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a16      	ldr	r2, [pc, #88]	@ (8006148 <TIM_OC4_SetConfig+0xc8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_OC4_SetConfig+0x84>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a15      	ldr	r2, [pc, #84]	@ (800614c <TIM_OC4_SetConfig+0xcc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC4_SetConfig+0x84>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a14      	ldr	r2, [pc, #80]	@ (8006150 <TIM_OC4_SetConfig+0xd0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d109      	bne.n	8006118 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800610a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	019b      	lsls	r3, r3, #6
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40013400 	.word	0x40013400
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800

08006154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a17      	ldr	r2, [pc, #92]	@ (8006208 <TIM_OC5_SetConfig+0xb4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00f      	beq.n	80061ce <TIM_OC5_SetConfig+0x7a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a16      	ldr	r2, [pc, #88]	@ (800620c <TIM_OC5_SetConfig+0xb8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00b      	beq.n	80061ce <TIM_OC5_SetConfig+0x7a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <TIM_OC5_SetConfig+0xbc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <TIM_OC5_SetConfig+0x7a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a14      	ldr	r2, [pc, #80]	@ (8006214 <TIM_OC5_SetConfig+0xc0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC5_SetConfig+0x7a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a13      	ldr	r2, [pc, #76]	@ (8006218 <TIM_OC5_SetConfig+0xc4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d109      	bne.n	80061e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	bf00      	nop
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40013400 	.word	0x40013400
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800

0800621c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	051b      	lsls	r3, r3, #20
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a18      	ldr	r2, [pc, #96]	@ (80062d4 <TIM_OC6_SetConfig+0xb8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <TIM_OC6_SetConfig+0x7c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a17      	ldr	r2, [pc, #92]	@ (80062d8 <TIM_OC6_SetConfig+0xbc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00b      	beq.n	8006298 <TIM_OC6_SetConfig+0x7c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a16      	ldr	r2, [pc, #88]	@ (80062dc <TIM_OC6_SetConfig+0xc0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <TIM_OC6_SetConfig+0x7c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a15      	ldr	r2, [pc, #84]	@ (80062e0 <TIM_OC6_SetConfig+0xc4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC6_SetConfig+0x7c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a14      	ldr	r2, [pc, #80]	@ (80062e4 <TIM_OC6_SetConfig+0xc8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d109      	bne.n	80062ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800629e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 030a 	bic.w	r3, r3, #10
 8006324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006346:	b480      	push	{r7}
 8006348:	b087      	sub	sp, #28
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f023 0210 	bic.w	r2, r3, #16
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f043 0307 	orr.w	r3, r3, #7
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	2201      	movs	r2, #1
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	43db      	mvns	r3, r3
 800643e:	401a      	ands	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	fa01 f303 	lsl.w	r3, r1, r3
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e068      	b.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01d      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f2:	d018      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1a      	ldr	r2, [pc, #104]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a13      	ldr	r2, [pc, #76]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a14      	ldr	r2, [pc, #80]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d10c      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800652c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40014000 	.word	0x40014000

08006578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e040      	b.n	8006648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fb60 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	@ 0x24
 80065e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fc32 	bl	8006e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f977 	bl	80068f4 <UART_SetConfig>
 8006606:	4603      	mov	r3, r0
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e01b      	b.n	8006648 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800661e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800662e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fcb1 	bl	8006fa8 <UART_CheckIdleState>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006664:	2b20      	cmp	r3, #32
 8006666:	d177      	bne.n	8006758 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Transmit+0x24>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e070      	b.n	800675a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2221      	movs	r2, #33	@ 0x21
 8006684:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006686:	f7fb fcfb 	bl	8002080 <HAL_GetTick>
 800668a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	88fa      	ldrh	r2, [r7, #6]
 8006698:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a4:	d108      	bne.n	80066b8 <HAL_UART_Transmit+0x68>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e003      	b.n	80066c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066c0:	e02f      	b.n	8006722 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2180      	movs	r1, #128	@ 0x80
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fd13 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e03b      	b.n	800675a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	881a      	ldrh	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f4:	b292      	uxth	r2, r2
 80066f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	3302      	adds	r3, #2
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	e007      	b.n	8006710 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3301      	adds	r3, #1
 800670e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1c9      	bne.n	80066c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2200      	movs	r2, #0
 8006736:	2140      	movs	r1, #64	@ 0x40
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fcdd 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e005      	b.n	800675a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2220      	movs	r2, #32
 8006752:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	e000      	b.n	800675a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b08a      	sub	sp, #40	@ 0x28
 8006766:	af02      	add	r7, sp, #8
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	603b      	str	r3, [r7, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006778:	2b20      	cmp	r3, #32
 800677a:	f040 80b6 	bne.w	80068ea <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_UART_Receive+0x28>
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e0ae      	b.n	80068ec <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2222      	movs	r2, #34	@ 0x22
 800679a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067a4:	f7fb fc6c 	bl	8002080 <HAL_GetTick>
 80067a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c2:	d10e      	bne.n	80067e2 <HAL_UART_Receive+0x80>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_UART_Receive+0x76>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80067d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067d6:	e02d      	b.n	8006834 <HAL_UART_Receive+0xd2>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	22ff      	movs	r2, #255	@ 0xff
 80067dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067e0:	e028      	b.n	8006834 <HAL_UART_Receive+0xd2>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <HAL_UART_Receive+0xa4>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_UART_Receive+0x9a>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	22ff      	movs	r2, #255	@ 0xff
 80067f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067fa:	e01b      	b.n	8006834 <HAL_UART_Receive+0xd2>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	227f      	movs	r2, #127	@ 0x7f
 8006800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006804:	e016      	b.n	8006834 <HAL_UART_Receive+0xd2>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800680e:	d10d      	bne.n	800682c <HAL_UART_Receive+0xca>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_UART_Receive+0xc0>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	227f      	movs	r2, #127	@ 0x7f
 800681c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006820:	e008      	b.n	8006834 <HAL_UART_Receive+0xd2>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	223f      	movs	r2, #63	@ 0x3f
 8006826:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800682a:	e003      	b.n	8006834 <HAL_UART_Receive+0xd2>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800683a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006844:	d108      	bne.n	8006858 <HAL_UART_Receive+0xf6>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e003      	b.n	8006860 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006860:	e037      	b.n	80068d2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	2120      	movs	r1, #32
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fc43 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e033      	b.n	80068ec <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10c      	bne.n	80068a4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006890:	b29a      	uxth	r2, r3
 8006892:	8a7b      	ldrh	r3, [r7, #18]
 8006894:	4013      	ands	r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	3302      	adds	r3, #2
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e00d      	b.n	80068c0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	4013      	ands	r3, r2
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3301      	adds	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1c1      	bne.n	8006862 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f8:	b08a      	sub	sp, #40	@ 0x28
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	431a      	orrs	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	431a      	orrs	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4313      	orrs	r3, r2
 800691a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4ba4      	ldr	r3, [pc, #656]	@ (8006bb4 <UART_SetConfig+0x2c0>)
 8006924:	4013      	ands	r3, r2
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800692c:	430b      	orrs	r3, r1
 800692e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a99      	ldr	r2, [pc, #612]	@ (8006bb8 <UART_SetConfig+0x2c4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695c:	4313      	orrs	r3, r2
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a90      	ldr	r2, [pc, #576]	@ (8006bbc <UART_SetConfig+0x2c8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d126      	bne.n	80069cc <UART_SetConfig+0xd8>
 800697e:	4b90      	ldr	r3, [pc, #576]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	2b03      	cmp	r3, #3
 800698a:	d81b      	bhi.n	80069c4 <UART_SetConfig+0xd0>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <UART_SetConfig+0xa0>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069b5 	.word	0x080069b5
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069bd 	.word	0x080069bd
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069aa:	e116      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069ac:	2302      	movs	r3, #2
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b2:	e112      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ba:	e10e      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069c2:	e10a      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ca:	e106      	b.n	8006bda <UART_SetConfig+0x2e6>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a7c      	ldr	r2, [pc, #496]	@ (8006bc4 <UART_SetConfig+0x2d0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d138      	bne.n	8006a48 <UART_SetConfig+0x154>
 80069d6:	4b7a      	ldr	r3, [pc, #488]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069dc:	f003 030c 	and.w	r3, r3, #12
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d82d      	bhi.n	8006a40 <UART_SetConfig+0x14c>
 80069e4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <UART_SetConfig+0xf8>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a21 	.word	0x08006a21
 80069f0:	08006a41 	.word	0x08006a41
 80069f4:	08006a41 	.word	0x08006a41
 80069f8:	08006a41 	.word	0x08006a41
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006a41 	.word	0x08006a41
 8006a04:	08006a41 	.word	0x08006a41
 8006a08:	08006a41 	.word	0x08006a41
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a41 	.word	0x08006a41
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a26:	e0d8      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2e:	e0d4      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a36:	e0d0      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3e:	e0cc      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a46:	e0c8      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8006bc8 <UART_SetConfig+0x2d4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d125      	bne.n	8006a9e <UART_SetConfig+0x1aa>
 8006a52:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a5c:	2b30      	cmp	r3, #48	@ 0x30
 8006a5e:	d016      	beq.n	8006a8e <UART_SetConfig+0x19a>
 8006a60:	2b30      	cmp	r3, #48	@ 0x30
 8006a62:	d818      	bhi.n	8006a96 <UART_SetConfig+0x1a2>
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d00a      	beq.n	8006a7e <UART_SetConfig+0x18a>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d814      	bhi.n	8006a96 <UART_SetConfig+0x1a2>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <UART_SetConfig+0x182>
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d008      	beq.n	8006a86 <UART_SetConfig+0x192>
 8006a74:	e00f      	b.n	8006a96 <UART_SetConfig+0x1a2>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7c:	e0ad      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a84:	e0a9      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a86:	2304      	movs	r3, #4
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8c:	e0a5      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a94:	e0a1      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a96:	2310      	movs	r3, #16
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a9c:	e09d      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8006bcc <UART_SetConfig+0x2d8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d125      	bne.n	8006af4 <UART_SetConfig+0x200>
 8006aa8:	4b45      	ldr	r3, [pc, #276]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ab4:	d016      	beq.n	8006ae4 <UART_SetConfig+0x1f0>
 8006ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ab8:	d818      	bhi.n	8006aec <UART_SetConfig+0x1f8>
 8006aba:	2b80      	cmp	r3, #128	@ 0x80
 8006abc:	d00a      	beq.n	8006ad4 <UART_SetConfig+0x1e0>
 8006abe:	2b80      	cmp	r3, #128	@ 0x80
 8006ac0:	d814      	bhi.n	8006aec <UART_SetConfig+0x1f8>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <UART_SetConfig+0x1d8>
 8006ac6:	2b40      	cmp	r3, #64	@ 0x40
 8006ac8:	d008      	beq.n	8006adc <UART_SetConfig+0x1e8>
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x1f8>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ad2:	e082      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ada:	e07e      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae2:	e07a      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aea:	e076      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af2:	e072      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a35      	ldr	r2, [pc, #212]	@ (8006bd0 <UART_SetConfig+0x2dc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d12a      	bne.n	8006b54 <UART_SetConfig+0x260>
 8006afe:	4b30      	ldr	r3, [pc, #192]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b0c:	d01a      	beq.n	8006b44 <UART_SetConfig+0x250>
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b12:	d81b      	bhi.n	8006b4c <UART_SetConfig+0x258>
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b18:	d00c      	beq.n	8006b34 <UART_SetConfig+0x240>
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1e:	d815      	bhi.n	8006b4c <UART_SetConfig+0x258>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <UART_SetConfig+0x238>
 8006b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b28:	d008      	beq.n	8006b3c <UART_SetConfig+0x248>
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x258>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b32:	e052      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b3a:	e04e      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b42:	e04a      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b4a:	e046      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b52:	e042      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a17      	ldr	r2, [pc, #92]	@ (8006bb8 <UART_SetConfig+0x2c4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d13a      	bne.n	8006bd4 <UART_SetConfig+0x2e0>
 8006b5e:	4b18      	ldr	r3, [pc, #96]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b6c:	d01a      	beq.n	8006ba4 <UART_SetConfig+0x2b0>
 8006b6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b72:	d81b      	bhi.n	8006bac <UART_SetConfig+0x2b8>
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b78:	d00c      	beq.n	8006b94 <UART_SetConfig+0x2a0>
 8006b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b7e:	d815      	bhi.n	8006bac <UART_SetConfig+0x2b8>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <UART_SetConfig+0x298>
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b88:	d008      	beq.n	8006b9c <UART_SetConfig+0x2a8>
 8006b8a:	e00f      	b.n	8006bac <UART_SetConfig+0x2b8>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b92:	e022      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b94:	2302      	movs	r3, #2
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b9a:	e01e      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba2:	e01a      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006baa:	e016      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006bac:	2310      	movs	r3, #16
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb2:	e012      	b.n	8006bda <UART_SetConfig+0x2e6>
 8006bb4:	efff69f3 	.word	0xefff69f3
 8006bb8:	40008000 	.word	0x40008000
 8006bbc:	40013800 	.word	0x40013800
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	40004400 	.word	0x40004400
 8006bc8:	40004800 	.word	0x40004800
 8006bcc:	40004c00 	.word	0x40004c00
 8006bd0:	40005000 	.word	0x40005000
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a9f      	ldr	r2, [pc, #636]	@ (8006e5c <UART_SetConfig+0x568>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d17a      	bne.n	8006cda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006be4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d824      	bhi.n	8006c36 <UART_SetConfig+0x342>
 8006bec:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <UART_SetConfig+0x300>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c27 	.word	0x08006c27
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fd fd32 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	61f8      	str	r0, [r7, #28]
        break;
 8006c1e:	e010      	b.n	8006c42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b8f      	ldr	r3, [pc, #572]	@ (8006e60 <UART_SetConfig+0x56c>)
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e00d      	b.n	8006c42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fd fc93 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006c2a:	61f8      	str	r0, [r7, #28]
        break;
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80fb 	beq.w	8006e40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d305      	bcc.n	8006c66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d903      	bls.n	8006c6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c6c:	e0e8      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2200      	movs	r2, #0
 8006c72:	461c      	mov	r4, r3
 8006c74:	4615      	mov	r5, r2
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	022b      	lsls	r3, r5, #8
 8006c80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c84:	0222      	lsls	r2, r4, #8
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	6849      	ldr	r1, [r1, #4]
 8006c8a:	0849      	lsrs	r1, r1, #1
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4688      	mov	r8, r1
 8006c90:	4681      	mov	r9, r0
 8006c92:	eb12 0a08 	adds.w	sl, r2, r8
 8006c96:	eb43 0b09 	adc.w	fp, r3, r9
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	f7f9 fae0 	bl	8000270 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cbe:	d308      	bcc.n	8006cd2 <UART_SetConfig+0x3de>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cc6:	d204      	bcs.n	8006cd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	60da      	str	r2, [r3, #12]
 8006cd0:	e0b6      	b.n	8006e40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006cd8:	e0b2      	b.n	8006e40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ce2:	d15e      	bne.n	8006da2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d828      	bhi.n	8006d3e <UART_SetConfig+0x44a>
 8006cec:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <UART_SetConfig+0x400>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	08006d3f 	.word	0x08006d3f
 8006d04:	08006d2f 	.word	0x08006d2f
 8006d08:	08006d3f 	.word	0x08006d3f
 8006d0c:	08006d3f 	.word	0x08006d3f
 8006d10:	08006d3f 	.word	0x08006d3f
 8006d14:	08006d37 	.word	0x08006d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d18:	f7fd fcb2 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8006d1c:	61f8      	str	r0, [r7, #28]
        break;
 8006d1e:	e014      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d20:	f7fd fcc4 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8006d24:	61f8      	str	r0, [r7, #28]
        break;
 8006d26:	e010      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d28:	4b4d      	ldr	r3, [pc, #308]	@ (8006e60 <UART_SetConfig+0x56c>)
 8006d2a:	61fb      	str	r3, [r7, #28]
        break;
 8006d2c:	e00d      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2e:	f7fd fc0f 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006d32:	61f8      	str	r0, [r7, #28]
        break;
 8006d34:	e009      	b.n	8006d4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3a:	61fb      	str	r3, [r7, #28]
        break;
 8006d3c:	e005      	b.n	8006d4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d077      	beq.n	8006e40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	005a      	lsls	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b0f      	cmp	r3, #15
 8006d6a:	d916      	bls.n	8006d9a <UART_SetConfig+0x4a6>
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d72:	d212      	bcs.n	8006d9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f023 030f 	bic.w	r3, r3, #15
 8006d7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	8afb      	ldrh	r3, [r7, #22]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	8afa      	ldrh	r2, [r7, #22]
 8006d96:	60da      	str	r2, [r3, #12]
 8006d98:	e052      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006da0:	e04e      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006da2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d827      	bhi.n	8006dfa <UART_SetConfig+0x506>
 8006daa:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <UART_SetConfig+0x4bc>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	08006dfb 	.word	0x08006dfb
 8006dc0:	08006deb 	.word	0x08006deb
 8006dc4:	08006dfb 	.word	0x08006dfb
 8006dc8:	08006dfb 	.word	0x08006dfb
 8006dcc:	08006dfb 	.word	0x08006dfb
 8006dd0:	08006df3 	.word	0x08006df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd4:	f7fd fc54 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8006dd8:	61f8      	str	r0, [r7, #28]
        break;
 8006dda:	e014      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ddc:	f7fd fc66 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8006de0:	61f8      	str	r0, [r7, #28]
        break;
 8006de2:	e010      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e60 <UART_SetConfig+0x56c>)
 8006de6:	61fb      	str	r3, [r7, #28]
        break;
 8006de8:	e00d      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dea:	f7fd fbb1 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006dee:	61f8      	str	r0, [r7, #28]
        break;
 8006df0:	e009      	b.n	8006e06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df6:	61fb      	str	r3, [r7, #28]
        break;
 8006df8:	e005      	b.n	8006e06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e04:	bf00      	nop
    }

    if (pclk != 0U)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d019      	beq.n	8006e40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	085a      	lsrs	r2, r3, #1
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	d909      	bls.n	8006e3a <UART_SetConfig+0x546>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2c:	d205      	bcs.n	8006e3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	e002      	b.n	8006e40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3728      	adds	r7, #40	@ 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40008000 	.word	0x40008000
 8006e60:	00f42400 	.word	0x00f42400

08006e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f62:	d10a      	bne.n	8006f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b098      	sub	sp, #96	@ 0x60
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb8:	f7fb f862 	bl	8002080 <HAL_GetTick>
 8006fbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d12e      	bne.n	800702a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f88c 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d021      	beq.n	800702a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007004:	647b      	str	r3, [r7, #68]	@ 0x44
 8007006:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800700a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e6      	bne.n	8006fe6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e062      	b.n	80070f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d149      	bne.n	80070cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007040:	2200      	movs	r2, #0
 8007042:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f856 	bl	80070f8 <UART_WaitOnFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03c      	beq.n	80070cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	623b      	str	r3, [r7, #32]
   return(result);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007070:	633b      	str	r3, [r7, #48]	@ 0x30
 8007072:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	60fb      	str	r3, [r7, #12]
   return(result);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a4:	61fa      	str	r2, [r7, #28]
 80070a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	69b9      	ldr	r1, [r7, #24]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	617b      	str	r3, [r7, #20]
   return(result);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e011      	b.n	80070f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3758      	adds	r7, #88	@ 0x58
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	e04f      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d04b      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007112:	f7fa ffb5 	bl	8002080 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <UART_WaitOnFlagUntilTimeout+0x30>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e04e      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d037      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b80      	cmp	r3, #128	@ 0x80
 800713e:	d034      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b40      	cmp	r3, #64	@ 0x40
 8007144:	d031      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b08      	cmp	r3, #8
 8007152:	d110      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2208      	movs	r2, #8
 800715a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f838 	bl	80071d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2208      	movs	r2, #8
 8007166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e029      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007184:	d111      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800718e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f81e 	bl	80071d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e00f      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4013      	ands	r3, r2
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	bf0c      	ite	eq
 80071ba:	2301      	moveq	r3, #1
 80071bc:	2300      	movne	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d0a0      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b095      	sub	sp, #84	@ 0x54
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e6      	bne.n	80071da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3308      	adds	r3, #8
 8007212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	61fb      	str	r3, [r7, #28]
   return(result);
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e5      	bne.n	800720c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007244:	2b01      	cmp	r3, #1
 8007246:	d118      	bne.n	800727a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	e853 3f00 	ldrex	r3, [r3]
 8007254:	60bb      	str	r3, [r7, #8]
   return(result);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f023 0310 	bic.w	r3, r3, #16
 800725c:	647b      	str	r3, [r7, #68]	@ 0x44
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	613b      	str	r3, [r7, #16]
   return(result);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e6      	bne.n	8007248 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800728e:	bf00      	nop
 8007290:	3754      	adds	r7, #84	@ 0x54
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4603      	mov	r3, r0
 80072a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072ac:	2b84      	cmp	r3, #132	@ 0x84
 80072ae:	d005      	beq.n	80072bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	3303      	adds	r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072bc:	68fb      	ldr	r3, [r7, #12]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80072ce:	f000 fc51 	bl	8007b74 <vTaskStartScheduler>
  
  return osOK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80072d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072da:	b089      	sub	sp, #36	@ 0x24
 80072dc:	af04      	add	r7, sp, #16
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d020      	beq.n	800732c <osThreadCreate+0x54>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01c      	beq.n	800732c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685c      	ldr	r4, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691e      	ldr	r6, [r3, #16]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff ffc8 	bl	800729a <makeFreeRtosPriority>
 800730a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007314:	9202      	str	r2, [sp, #8]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	9100      	str	r1, [sp, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	4632      	mov	r2, r6
 800731e:	4629      	mov	r1, r5
 8007320:	4620      	mov	r0, r4
 8007322:	f000 f9b1 	bl	8007688 <xTaskCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e01c      	b.n	8007366 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685c      	ldr	r4, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007338:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ffaa 	bl	800729a <makeFreeRtosPriority>
 8007346:	4602      	mov	r2, r0
 8007348:	f107 030c 	add.w	r3, r7, #12
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	9200      	str	r2, [sp, #0]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4632      	mov	r2, r6
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
 8007358:	f000 f9f6 	bl	8007748 <xTaskCreate>
 800735c:	4603      	mov	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d001      	beq.n	8007366 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007366:	68fb      	ldr	r3, [r7, #12]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007370 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <osDelay+0x16>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	e000      	b.n	8007388 <osDelay+0x18>
 8007386:	2301      	movs	r3, #1
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fbbd 	bl	8007b08 <vTaskDelay>
  
  return osOK;
 800738e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f103 0208 	add.w	r2, r3, #8
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f04f 32ff 	mov.w	r2, #4294967295
 80073b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f103 0208 	add.w	r2, r3, #8
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f103 0208 	add.w	r2, r3, #8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	601a      	str	r2, [r3, #0]
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d103      	bne.n	800745a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	e00c      	b.n	8007474 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3308      	adds	r3, #8
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	e002      	b.n	8007468 <vListInsert+0x2e>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	d2f6      	bcs.n	8007462 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6892      	ldr	r2, [r2, #8]
 80074c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6852      	ldr	r2, [r2, #4]
 80074cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d103      	bne.n	80074e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800752c:	f001 f82c 	bl	8008588 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755c:	3b01      	subs	r3, #1
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007562:	fb01 f303 	mul.w	r3, r1, r3
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	22ff      	movs	r2, #255	@ 0xff
 8007570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	22ff      	movs	r2, #255	@ 0xff
 8007578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d114      	bne.n	80075ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01a      	beq.n	80075c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3310      	adds	r3, #16
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fd24 	bl	8007fdc <xTaskRemoveFromEventList>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d012      	beq.n	80075c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <xQueueGenericReset+0xd0>)
 800759c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	e009      	b.n	80075c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3310      	adds	r3, #16
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fef1 	bl	8007398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3324      	adds	r3, #36	@ 0x24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff feec 	bl	8007398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075c0:	f001 f814 	bl	80085ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075c4:	2301      	movs	r3, #1
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	@ 0x28
 80075d8:	af02      	add	r7, sp, #8
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10b      	bne.n	8007600 <xQueueGenericCreate+0x2c>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	613b      	str	r3, [r7, #16]
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	e7fd      	b.n	80075fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	3348      	adds	r3, #72	@ 0x48
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f89a 	bl	8008748 <pvPortMalloc>
 8007614:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d011      	beq.n	8007640 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	3348      	adds	r3, #72	@ 0x48
 8007624:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800762e:	79fa      	ldrb	r2, [r7, #7]
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f805 	bl	800764a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007640:	69bb      	ldr	r3, [r7, #24]
	}
 8007642:	4618      	mov	r0, r3
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e002      	b.n	800766c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007678:	2101      	movs	r1, #1
 800767a:	69b8      	ldr	r0, [r7, #24]
 800767c:	f7ff ff40 	bl	8007500 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08e      	sub	sp, #56	@ 0x38
 800768c:	af04      	add	r7, sp, #16
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	623b      	str	r3, [r7, #32]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	61fb      	str	r3, [r7, #28]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076d2:	23a0      	movs	r3, #160	@ 0xa0
 80076d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80076da:	d00b      	beq.n	80076f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	61bb      	str	r3, [r7, #24]
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01e      	beq.n	800773a <xTaskCreateStatic+0xb2>
 80076fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01b      	beq.n	800773a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800770a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	2202      	movs	r2, #2
 8007710:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007714:	2300      	movs	r3, #0
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	9302      	str	r3, [sp, #8]
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f851 	bl	80077d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007732:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007734:	f000 f8ee 	bl	8007914 <prvAddNewTaskToReadyList>
 8007738:	e001      	b.n	800773e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800773e:	697b      	ldr	r3, [r7, #20]
	}
 8007740:	4618      	mov	r0, r3
 8007742:	3728      	adds	r7, #40	@ 0x28
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08c      	sub	sp, #48	@ 0x30
 800774c:	af04      	add	r7, sp, #16
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fff3 	bl	8008748 <pvPortMalloc>
 8007762:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00e      	beq.n	8007788 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800776a:	20a0      	movs	r0, #160	@ 0xa0
 800776c:	f000 ffec 	bl	8008748 <pvPortMalloc>
 8007770:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	631a      	str	r2, [r3, #48]	@ 0x30
 800777e:	e005      	b.n	800778c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007780:	6978      	ldr	r0, [r7, #20]
 8007782:	f001 f8af 	bl	80088e4 <vPortFree>
 8007786:	e001      	b.n	800778c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800779a:	88fa      	ldrh	r2, [r7, #6]
 800779c:	2300      	movs	r3, #0
 800779e:	9303      	str	r3, [sp, #12]
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	9302      	str	r3, [sp, #8]
 80077a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f80f 	bl	80077d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077b6:	69f8      	ldr	r0, [r7, #28]
 80077b8:	f000 f8ac 	bl	8007914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077bc:	2301      	movs	r3, #1
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	e002      	b.n	80077c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077c8:	69bb      	ldr	r3, [r7, #24]
	}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077ec:	3b01      	subs	r3, #1
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	617b      	str	r3, [r7, #20]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01f      	beq.n	8007864 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e012      	b.n	8007850 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	7819      	ldrb	r1, [r3, #0]
 8007832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	3334      	adds	r3, #52	@ 0x34
 800783a:	460a      	mov	r2, r1
 800783c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	4413      	add	r3, r2
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d006      	beq.n	8007858 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	3301      	adds	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d9e9      	bls.n	800782a <prvInitialiseNewTask+0x56>
 8007856:	e000      	b.n	800785a <prvInitialiseNewTask+0x86>
			{
				break;
 8007858:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007862:	e003      	b.n	800786c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786e:	2b06      	cmp	r3, #6
 8007870:	d901      	bls.n	8007876 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007872:	2306      	movs	r3, #6
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800787a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007880:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	2200      	movs	r2, #0
 8007886:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	3304      	adds	r3, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fda3 	bl	80073d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	3318      	adds	r3, #24
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fd9e 	bl	80073d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	f1c3 0207 	rsb	r2, r3, #7
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	334c      	adds	r3, #76	@ 0x4c
 80078c6:	224c      	movs	r2, #76	@ 0x4c
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fa41 	bl	8008d52 <memset>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007908 <prvInitialiseNewTask+0x134>)
 80078d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	4a0c      	ldr	r2, [pc, #48]	@ (800790c <prvInitialiseNewTask+0x138>)
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	4a0c      	ldr	r2, [pc, #48]	@ (8007910 <prvInitialiseNewTask+0x13c>)
 80078e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	69b8      	ldr	r0, [r7, #24]
 80078e8:	f000 fd1e 	bl	8008328 <pxPortInitialiseStack>
 80078ec:	4602      	mov	r2, r0
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078fe:	bf00      	nop
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	2000470c 	.word	0x2000470c
 800790c:	20004774 	.word	0x20004774
 8007910:	200047dc 	.word	0x200047dc

08007914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800791c:	f000 fe34 	bl	8008588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007920:	4b2a      	ldr	r3, [pc, #168]	@ (80079cc <prvAddNewTaskToReadyList+0xb8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	4a29      	ldr	r2, [pc, #164]	@ (80079cc <prvAddNewTaskToReadyList+0xb8>)
 8007928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800792a:	4b29      	ldr	r3, [pc, #164]	@ (80079d0 <prvAddNewTaskToReadyList+0xbc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007932:	4a27      	ldr	r2, [pc, #156]	@ (80079d0 <prvAddNewTaskToReadyList+0xbc>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007938:	4b24      	ldr	r3, [pc, #144]	@ (80079cc <prvAddNewTaskToReadyList+0xb8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d110      	bne.n	8007962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007940:	f000 fbc8 	bl	80080d4 <prvInitialiseTaskLists>
 8007944:	e00d      	b.n	8007962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007946:	4b23      	ldr	r3, [pc, #140]	@ (80079d4 <prvAddNewTaskToReadyList+0xc0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800794e:	4b20      	ldr	r3, [pc, #128]	@ (80079d0 <prvAddNewTaskToReadyList+0xbc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	429a      	cmp	r2, r3
 800795a:	d802      	bhi.n	8007962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800795c:	4a1c      	ldr	r2, [pc, #112]	@ (80079d0 <prvAddNewTaskToReadyList+0xbc>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007962:	4b1d      	ldr	r3, [pc, #116]	@ (80079d8 <prvAddNewTaskToReadyList+0xc4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	4a1b      	ldr	r2, [pc, #108]	@ (80079d8 <prvAddNewTaskToReadyList+0xc4>)
 800796a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	2201      	movs	r2, #1
 8007972:	409a      	lsls	r2, r3
 8007974:	4b19      	ldr	r3, [pc, #100]	@ (80079dc <prvAddNewTaskToReadyList+0xc8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4313      	orrs	r3, r2
 800797a:	4a18      	ldr	r2, [pc, #96]	@ (80079dc <prvAddNewTaskToReadyList+0xc8>)
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4a15      	ldr	r2, [pc, #84]	@ (80079e0 <prvAddNewTaskToReadyList+0xcc>)
 800798c:	441a      	add	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f7ff fd2c 	bl	80073f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800799a:	f000 fe27 	bl	80085ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800799e:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <prvAddNewTaskToReadyList+0xc0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079a6:	4b0a      	ldr	r3, [pc, #40]	@ (80079d0 <prvAddNewTaskToReadyList+0xbc>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d207      	bcs.n	80079c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079b4:	4b0b      	ldr	r3, [pc, #44]	@ (80079e4 <prvAddNewTaskToReadyList+0xd0>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200006b8 	.word	0x200006b8
 80079d0:	200005b8 	.word	0x200005b8
 80079d4:	200006c4 	.word	0x200006c4
 80079d8:	200006d4 	.word	0x200006d4
 80079dc:	200006c0 	.word	0x200006c0
 80079e0:	200005bc 	.word	0x200005bc
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80079f0:	f000 fdca 	bl	8008588 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <vTaskDelete+0x18>
 80079fa:	4b39      	ldr	r3, [pc, #228]	@ (8007ae0 <vTaskDelete+0xf8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	e000      	b.n	8007a02 <vTaskDelete+0x1a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fd4f 	bl	80074ac <uxListRemove>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d115      	bne.n	8007a40 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a18:	4932      	ldr	r1, [pc, #200]	@ (8007ae4 <vTaskDelete+0xfc>)
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <vTaskDelete+0x58>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	2201      	movs	r2, #1
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	43da      	mvns	r2, r3
 8007a36:	4b2c      	ldr	r3, [pc, #176]	@ (8007ae8 <vTaskDelete+0x100>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae8 <vTaskDelete+0x100>)
 8007a3e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3318      	adds	r3, #24
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff fd2d 	bl	80074ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007a52:	4b26      	ldr	r3, [pc, #152]	@ (8007aec <vTaskDelete+0x104>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3301      	adds	r3, #1
 8007a58:	4a24      	ldr	r2, [pc, #144]	@ (8007aec <vTaskDelete+0x104>)
 8007a5a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007a5c:	4b20      	ldr	r3, [pc, #128]	@ (8007ae0 <vTaskDelete+0xf8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d10b      	bne.n	8007a7e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4820      	ldr	r0, [pc, #128]	@ (8007af0 <vTaskDelete+0x108>)
 8007a6e:	f7ff fcc0 	bl	80073f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007a72:	4b20      	ldr	r3, [pc, #128]	@ (8007af4 <vTaskDelete+0x10c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a1e      	ldr	r2, [pc, #120]	@ (8007af4 <vTaskDelete+0x10c>)
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e009      	b.n	8007a92 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007af8 <vTaskDelete+0x110>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	4a1c      	ldr	r2, [pc, #112]	@ (8007af8 <vTaskDelete+0x110>)
 8007a86:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fb91 	bl	80081b0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007a8e:	f000 fbc5 	bl	800821c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007a92:	f000 fdab 	bl	80085ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007a96:	4b19      	ldr	r3, [pc, #100]	@ (8007afc <vTaskDelete+0x114>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d01c      	beq.n	8007ad8 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <vTaskDelete+0xf8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d117      	bne.n	8007ad8 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007aa8:	4b15      	ldr	r3, [pc, #84]	@ (8007b00 <vTaskDelete+0x118>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <vTaskDelete+0xe0>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60bb      	str	r3, [r7, #8]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b04 <vTaskDelete+0x11c>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	200005b8 	.word	0x200005b8
 8007ae4:	200005bc 	.word	0x200005bc
 8007ae8:	200006c0 	.word	0x200006c0
 8007aec:	200006d4 	.word	0x200006d4
 8007af0:	2000068c 	.word	0x2000068c
 8007af4:	200006a0 	.word	0x200006a0
 8007af8:	200006b8 	.word	0x200006b8
 8007afc:	200006c4 	.word	0x200006c4
 8007b00:	200006e0 	.word	0x200006e0
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d018      	beq.n	8007b4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b1a:	4b14      	ldr	r3, [pc, #80]	@ (8007b6c <vTaskDelay+0x64>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <vTaskDelay+0x32>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	60bb      	str	r3, [r7, #8]
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b3a:	f000 f885 	bl	8007c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fb8b 	bl	800825c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b46:	f000 f88d 	bl	8007c64 <xTaskResumeAll>
 8007b4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d107      	bne.n	8007b62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b52:	4b07      	ldr	r3, [pc, #28]	@ (8007b70 <vTaskDelay+0x68>)
 8007b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b62:	bf00      	nop
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	200006e0 	.word	0x200006e0
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	@ 0x28
 8007b78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b82:	463a      	mov	r2, r7
 8007b84:	1d39      	adds	r1, r7, #4
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7f8 fce8 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	9202      	str	r2, [sp, #8]
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	460a      	mov	r2, r1
 8007ba2:	4921      	ldr	r1, [pc, #132]	@ (8007c28 <vTaskStartScheduler+0xb4>)
 8007ba4:	4821      	ldr	r0, [pc, #132]	@ (8007c2c <vTaskStartScheduler+0xb8>)
 8007ba6:	f7ff fd6f 	bl	8007688 <xTaskCreateStatic>
 8007baa:	4603      	mov	r3, r0
 8007bac:	4a20      	ldr	r2, [pc, #128]	@ (8007c30 <vTaskStartScheduler+0xbc>)
 8007bae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c30 <vTaskStartScheduler+0xbc>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e001      	b.n	8007bc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d11b      	bne.n	8007c00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	613b      	str	r3, [r7, #16]
}
 8007bda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bdc:	4b15      	ldr	r3, [pc, #84]	@ (8007c34 <vTaskStartScheduler+0xc0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	334c      	adds	r3, #76	@ 0x4c
 8007be2:	4a15      	ldr	r2, [pc, #84]	@ (8007c38 <vTaskStartScheduler+0xc4>)
 8007be4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007be6:	4b15      	ldr	r3, [pc, #84]	@ (8007c3c <vTaskStartScheduler+0xc8>)
 8007be8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bee:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <vTaskStartScheduler+0xcc>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007bf4:	4b13      	ldr	r3, [pc, #76]	@ (8007c44 <vTaskStartScheduler+0xd0>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bfa:	f000 fc21 	bl	8008440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bfe:	e00f      	b.n	8007c20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d10b      	bne.n	8007c20 <vTaskStartScheduler+0xac>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	60fb      	str	r3, [r7, #12]
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <vTaskStartScheduler+0xa8>
}
 8007c20:	bf00      	nop
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	08009d78 	.word	0x08009d78
 8007c2c:	080080a5 	.word	0x080080a5
 8007c30:	200006dc 	.word	0x200006dc
 8007c34:	200005b8 	.word	0x200005b8
 8007c38:	2000001c 	.word	0x2000001c
 8007c3c:	200006d8 	.word	0x200006d8
 8007c40:	200006c4 	.word	0x200006c4
 8007c44:	200006bc 	.word	0x200006bc

08007c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c4c:	4b04      	ldr	r3, [pc, #16]	@ (8007c60 <vTaskSuspendAll+0x18>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	4a03      	ldr	r2, [pc, #12]	@ (8007c60 <vTaskSuspendAll+0x18>)
 8007c54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c56:	bf00      	nop
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	200006e0 	.word	0x200006e0

08007c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c72:	4b42      	ldr	r3, [pc, #264]	@ (8007d7c <xTaskResumeAll+0x118>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <xTaskResumeAll+0x2e>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	603b      	str	r3, [r7, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c92:	f000 fc79 	bl	8008588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c96:	4b39      	ldr	r3, [pc, #228]	@ (8007d7c <xTaskResumeAll+0x118>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4a37      	ldr	r2, [pc, #220]	@ (8007d7c <xTaskResumeAll+0x118>)
 8007c9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca0:	4b36      	ldr	r3, [pc, #216]	@ (8007d7c <xTaskResumeAll+0x118>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d161      	bne.n	8007d6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ca8:	4b35      	ldr	r3, [pc, #212]	@ (8007d80 <xTaskResumeAll+0x11c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d05d      	beq.n	8007d6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cb0:	e02e      	b.n	8007d10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb2:	4b34      	ldr	r3, [pc, #208]	@ (8007d84 <xTaskResumeAll+0x120>)
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fbf4 	bl	80074ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fbef 	bl	80074ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	409a      	lsls	r2, r3
 8007cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8007d88 <xTaskResumeAll+0x124>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8007d88 <xTaskResumeAll+0x124>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4a27      	ldr	r2, [pc, #156]	@ (8007d8c <xTaskResumeAll+0x128>)
 8007cee:	441a      	add	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7ff fb7b 	bl	80073f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d00:	4b23      	ldr	r3, [pc, #140]	@ (8007d90 <xTaskResumeAll+0x12c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d302      	bcc.n	8007d10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d0a:	4b22      	ldr	r3, [pc, #136]	@ (8007d94 <xTaskResumeAll+0x130>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d10:	4b1c      	ldr	r3, [pc, #112]	@ (8007d84 <xTaskResumeAll+0x120>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1cc      	bne.n	8007cb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d1e:	f000 fa7d 	bl	800821c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d22:	4b1d      	ldr	r3, [pc, #116]	@ (8007d98 <xTaskResumeAll+0x134>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d010      	beq.n	8007d50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d2e:	f000 f837 	bl	8007da0 <xTaskIncrementTick>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d38:	4b16      	ldr	r3, [pc, #88]	@ (8007d94 <xTaskResumeAll+0x130>)
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f1      	bne.n	8007d2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d4a:	4b13      	ldr	r3, [pc, #76]	@ (8007d98 <xTaskResumeAll+0x134>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d50:	4b10      	ldr	r3, [pc, #64]	@ (8007d94 <xTaskResumeAll+0x130>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d9c <xTaskResumeAll+0x138>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d6c:	f000 fc3e 	bl	80085ec <vPortExitCritical>

	return xAlreadyYielded;
 8007d70:	68bb      	ldr	r3, [r7, #8]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200006e0 	.word	0x200006e0
 8007d80:	200006b8 	.word	0x200006b8
 8007d84:	20000678 	.word	0x20000678
 8007d88:	200006c0 	.word	0x200006c0
 8007d8c:	200005bc 	.word	0x200005bc
 8007d90:	200005b8 	.word	0x200005b8
 8007d94:	200006cc 	.word	0x200006cc
 8007d98:	200006c8 	.word	0x200006c8
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007daa:	4b4f      	ldr	r3, [pc, #316]	@ (8007ee8 <xTaskIncrementTick+0x148>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 808f 	bne.w	8007ed2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007db4:	4b4d      	ldr	r3, [pc, #308]	@ (8007eec <xTaskIncrementTick+0x14c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8007eec <xTaskIncrementTick+0x14c>)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d121      	bne.n	8007e0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dc8:	4b49      	ldr	r3, [pc, #292]	@ (8007ef0 <xTaskIncrementTick+0x150>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <xTaskIncrementTick+0x4a>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	603b      	str	r3, [r7, #0]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xTaskIncrementTick+0x46>
 8007dea:	4b41      	ldr	r3, [pc, #260]	@ (8007ef0 <xTaskIncrementTick+0x150>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	4b40      	ldr	r3, [pc, #256]	@ (8007ef4 <xTaskIncrementTick+0x154>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef0 <xTaskIncrementTick+0x150>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef4 <xTaskIncrementTick+0x154>)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef8 <xTaskIncrementTick+0x158>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a3c      	ldr	r2, [pc, #240]	@ (8007ef8 <xTaskIncrementTick+0x158>)
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	f000 fa08 	bl	800821c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8007efc <xTaskIncrementTick+0x15c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d348      	bcc.n	8007ea8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e16:	4b36      	ldr	r3, [pc, #216]	@ (8007ef0 <xTaskIncrementTick+0x150>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e20:	4b36      	ldr	r3, [pc, #216]	@ (8007efc <xTaskIncrementTick+0x15c>)
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295
 8007e26:	601a      	str	r2, [r3, #0]
					break;
 8007e28:	e03e      	b.n	8007ea8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2a:	4b31      	ldr	r3, [pc, #196]	@ (8007ef0 <xTaskIncrementTick+0x150>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d203      	bcs.n	8007e4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e42:	4a2e      	ldr	r2, [pc, #184]	@ (8007efc <xTaskIncrementTick+0x15c>)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e48:	e02e      	b.n	8007ea8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fb2c 	bl	80074ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3318      	adds	r3, #24
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fb23 	bl	80074ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	409a      	lsls	r2, r3
 8007e6e:	4b24      	ldr	r3, [pc, #144]	@ (8007f00 <xTaskIncrementTick+0x160>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	4a22      	ldr	r2, [pc, #136]	@ (8007f00 <xTaskIncrementTick+0x160>)
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4a1f      	ldr	r2, [pc, #124]	@ (8007f04 <xTaskIncrementTick+0x164>)
 8007e86:	441a      	add	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7ff faaf 	bl	80073f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e98:	4b1b      	ldr	r3, [pc, #108]	@ (8007f08 <xTaskIncrementTick+0x168>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d3b9      	bcc.n	8007e16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ea6:	e7b6      	b.n	8007e16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ea8:	4b17      	ldr	r3, [pc, #92]	@ (8007f08 <xTaskIncrementTick+0x168>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eae:	4915      	ldr	r1, [pc, #84]	@ (8007f04 <xTaskIncrementTick+0x164>)
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d901      	bls.n	8007ec4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ec4:	4b11      	ldr	r3, [pc, #68]	@ (8007f0c <xTaskIncrementTick+0x16c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e004      	b.n	8007edc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <xTaskIncrementTick+0x170>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8007f10 <xTaskIncrementTick+0x170>)
 8007eda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007edc:	697b      	ldr	r3, [r7, #20]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200006e0 	.word	0x200006e0
 8007eec:	200006bc 	.word	0x200006bc
 8007ef0:	20000670 	.word	0x20000670
 8007ef4:	20000674 	.word	0x20000674
 8007ef8:	200006d0 	.word	0x200006d0
 8007efc:	200006d8 	.word	0x200006d8
 8007f00:	200006c0 	.word	0x200006c0
 8007f04:	200005bc 	.word	0x200005bc
 8007f08:	200005b8 	.word	0x200005b8
 8007f0c:	200006cc 	.word	0x200006cc
 8007f10:	200006c8 	.word	0x200006c8

08007f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc4 <vTaskSwitchContext+0xb0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f22:	4b29      	ldr	r3, [pc, #164]	@ (8007fc8 <vTaskSwitchContext+0xb4>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f28:	e045      	b.n	8007fb6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007f2a:	4b27      	ldr	r3, [pc, #156]	@ (8007fc8 <vTaskSwitchContext+0xb4>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <vTaskSwitchContext+0xb8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	fab3 f383 	clz	r3, r3
 8007f3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	f1c3 031f 	rsb	r3, r3, #31
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	4922      	ldr	r1, [pc, #136]	@ (8007fd0 <vTaskSwitchContext+0xbc>)
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	607b      	str	r3, [r7, #4]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <vTaskSwitchContext+0x5a>
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4a14      	ldr	r2, [pc, #80]	@ (8007fd0 <vTaskSwitchContext+0xbc>)
 8007f7e:	4413      	add	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	605a      	str	r2, [r3, #4]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3308      	adds	r3, #8
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d104      	bne.n	8007fa2 <vTaskSwitchContext+0x8e>
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	605a      	str	r2, [r3, #4]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd4 <vTaskSwitchContext+0xc0>)
 8007faa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fac:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <vTaskSwitchContext+0xc0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	334c      	adds	r3, #76	@ 0x4c
 8007fb2:	4a09      	ldr	r2, [pc, #36]	@ (8007fd8 <vTaskSwitchContext+0xc4>)
 8007fb4:	6013      	str	r3, [r2, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	200006e0 	.word	0x200006e0
 8007fc8:	200006cc 	.word	0x200006cc
 8007fcc:	200006c0 	.word	0x200006c0
 8007fd0:	200005bc 	.word	0x200005bc
 8007fd4:	200005b8 	.word	0x200005b8
 8007fd8:	2000001c 	.word	0x2000001c

08007fdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60fb      	str	r3, [r7, #12]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	3318      	adds	r3, #24
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fa4c 	bl	80074ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008014:	4b1d      	ldr	r3, [pc, #116]	@ (800808c <xTaskRemoveFromEventList+0xb0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11c      	bne.n	8008056 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3304      	adds	r3, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fa43 	bl	80074ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	2201      	movs	r2, #1
 800802c:	409a      	lsls	r2, r3
 800802e:	4b18      	ldr	r3, [pc, #96]	@ (8008090 <xTaskRemoveFromEventList+0xb4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4313      	orrs	r3, r2
 8008034:	4a16      	ldr	r2, [pc, #88]	@ (8008090 <xTaskRemoveFromEventList+0xb4>)
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4a13      	ldr	r2, [pc, #76]	@ (8008094 <xTaskRemoveFromEventList+0xb8>)
 8008046:	441a      	add	r2, r3
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f7ff f9cf 	bl	80073f2 <vListInsertEnd>
 8008054:	e005      	b.n	8008062 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3318      	adds	r3, #24
 800805a:	4619      	mov	r1, r3
 800805c:	480e      	ldr	r0, [pc, #56]	@ (8008098 <xTaskRemoveFromEventList+0xbc>)
 800805e:	f7ff f9c8 	bl	80073f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <xTaskRemoveFromEventList+0xc0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	429a      	cmp	r2, r3
 800806e:	d905      	bls.n	800807c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008074:	4b0a      	ldr	r3, [pc, #40]	@ (80080a0 <xTaskRemoveFromEventList+0xc4>)
 8008076:	2201      	movs	r2, #1
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e001      	b.n	8008080 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008080:	697b      	ldr	r3, [r7, #20]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200006e0 	.word	0x200006e0
 8008090:	200006c0 	.word	0x200006c0
 8008094:	200005bc 	.word	0x200005bc
 8008098:	20000678 	.word	0x20000678
 800809c:	200005b8 	.word	0x200005b8
 80080a0:	200006cc 	.word	0x200006cc

080080a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080ac:	f000 f852 	bl	8008154 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080b0:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <prvIdleTask+0x28>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d9f9      	bls.n	80080ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80080b8:	4b05      	ldr	r3, [pc, #20]	@ (80080d0 <prvIdleTask+0x2c>)
 80080ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080c8:	e7f0      	b.n	80080ac <prvIdleTask+0x8>
 80080ca:	bf00      	nop
 80080cc:	200005bc 	.word	0x200005bc
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080da:	2300      	movs	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	e00c      	b.n	80080fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4a12      	ldr	r2, [pc, #72]	@ (8008134 <prvInitialiseTaskLists+0x60>)
 80080ec:	4413      	add	r3, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff f952 	bl	8007398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3301      	adds	r3, #1
 80080f8:	607b      	str	r3, [r7, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b06      	cmp	r3, #6
 80080fe:	d9ef      	bls.n	80080e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008100:	480d      	ldr	r0, [pc, #52]	@ (8008138 <prvInitialiseTaskLists+0x64>)
 8008102:	f7ff f949 	bl	8007398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008106:	480d      	ldr	r0, [pc, #52]	@ (800813c <prvInitialiseTaskLists+0x68>)
 8008108:	f7ff f946 	bl	8007398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800810c:	480c      	ldr	r0, [pc, #48]	@ (8008140 <prvInitialiseTaskLists+0x6c>)
 800810e:	f7ff f943 	bl	8007398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008112:	480c      	ldr	r0, [pc, #48]	@ (8008144 <prvInitialiseTaskLists+0x70>)
 8008114:	f7ff f940 	bl	8007398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008118:	480b      	ldr	r0, [pc, #44]	@ (8008148 <prvInitialiseTaskLists+0x74>)
 800811a:	f7ff f93d 	bl	8007398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800811e:	4b0b      	ldr	r3, [pc, #44]	@ (800814c <prvInitialiseTaskLists+0x78>)
 8008120:	4a05      	ldr	r2, [pc, #20]	@ (8008138 <prvInitialiseTaskLists+0x64>)
 8008122:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008124:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <prvInitialiseTaskLists+0x7c>)
 8008126:	4a05      	ldr	r2, [pc, #20]	@ (800813c <prvInitialiseTaskLists+0x68>)
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200005bc 	.word	0x200005bc
 8008138:	20000648 	.word	0x20000648
 800813c:	2000065c 	.word	0x2000065c
 8008140:	20000678 	.word	0x20000678
 8008144:	2000068c 	.word	0x2000068c
 8008148:	200006a4 	.word	0x200006a4
 800814c:	20000670 	.word	0x20000670
 8008150:	20000674 	.word	0x20000674

08008154 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800815a:	e019      	b.n	8008190 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800815c:	f000 fa14 	bl	8008588 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008160:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <prvCheckTasksWaitingTermination+0x50>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3304      	adds	r3, #4
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff f99d 	bl	80074ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <prvCheckTasksWaitingTermination+0x54>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3b01      	subs	r3, #1
 8008178:	4a0b      	ldr	r2, [pc, #44]	@ (80081a8 <prvCheckTasksWaitingTermination+0x54>)
 800817a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800817c:	4b0b      	ldr	r3, [pc, #44]	@ (80081ac <prvCheckTasksWaitingTermination+0x58>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	4a0a      	ldr	r2, [pc, #40]	@ (80081ac <prvCheckTasksWaitingTermination+0x58>)
 8008184:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008186:	f000 fa31 	bl	80085ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f810 	bl	80081b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008190:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <prvCheckTasksWaitingTermination+0x58>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e1      	bne.n	800815c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008198:	bf00      	nop
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	2000068c 	.word	0x2000068c
 80081a8:	200006b8 	.word	0x200006b8
 80081ac:	200006a0 	.word	0x200006a0

080081b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	334c      	adds	r3, #76	@ 0x4c
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fde1 	bl	8008d84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d108      	bne.n	80081de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fb87 	bl	80088e4 <vPortFree>
				vPortFree( pxTCB );
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fb84 	bl	80088e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081dc:	e019      	b.n	8008212 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d103      	bne.n	80081f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb7b 	bl	80088e4 <vPortFree>
	}
 80081ee:	e010      	b.n	8008212 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d00b      	beq.n	8008212 <prvDeleteTCB+0x62>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	60fb      	str	r3, [r7, #12]
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	e7fd      	b.n	800820e <prvDeleteTCB+0x5e>
	}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008222:	4b0c      	ldr	r3, [pc, #48]	@ (8008254 <prvResetNextTaskUnblockTime+0x38>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800822c:	4b0a      	ldr	r3, [pc, #40]	@ (8008258 <prvResetNextTaskUnblockTime+0x3c>)
 800822e:	f04f 32ff 	mov.w	r2, #4294967295
 8008232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008234:	e008      	b.n	8008248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008236:	4b07      	ldr	r3, [pc, #28]	@ (8008254 <prvResetNextTaskUnblockTime+0x38>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	4a04      	ldr	r2, [pc, #16]	@ (8008258 <prvResetNextTaskUnblockTime+0x3c>)
 8008246:	6013      	str	r3, [r2, #0]
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	20000670 	.word	0x20000670
 8008258:	200006d8 	.word	0x200006d8

0800825c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008266:	4b29      	ldr	r3, [pc, #164]	@ (800830c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826c:	4b28      	ldr	r3, [pc, #160]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff f91a 	bl	80074ac <uxListRemove>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10b      	bne.n	8008296 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800827e:	4b24      	ldr	r3, [pc, #144]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008284:	2201      	movs	r2, #1
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	43da      	mvns	r2, r3
 800828c:	4b21      	ldr	r3, [pc, #132]	@ (8008314 <prvAddCurrentTaskToDelayedList+0xb8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4013      	ands	r3, r2
 8008292:	4a20      	ldr	r2, [pc, #128]	@ (8008314 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008294:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d10a      	bne.n	80082b4 <prvAddCurrentTaskToDelayedList+0x58>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	481a      	ldr	r0, [pc, #104]	@ (8008318 <prvAddCurrentTaskToDelayedList+0xbc>)
 80082ae:	f7ff f8a0 	bl	80073f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082b2:	e026      	b.n	8008302 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4413      	add	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082bc:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d209      	bcs.n	80082e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082cc:	4b13      	ldr	r3, [pc, #76]	@ (800831c <prvAddCurrentTaskToDelayedList+0xc0>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3304      	adds	r3, #4
 80082d6:	4619      	mov	r1, r3
 80082d8:	4610      	mov	r0, r2
 80082da:	f7ff f8ae 	bl	800743a <vListInsert>
}
 80082de:	e010      	b.n	8008302 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008320 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7ff f8a4 	bl	800743a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d202      	bcs.n	8008302 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082fc:	4a09      	ldr	r2, [pc, #36]	@ (8008324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6013      	str	r3, [r2, #0]
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200006bc 	.word	0x200006bc
 8008310:	200005b8 	.word	0x200005b8
 8008314:	200006c0 	.word	0x200006c0
 8008318:	200006a4 	.word	0x200006a4
 800831c:	20000674 	.word	0x20000674
 8008320:	20000670 	.word	0x20000670
 8008324:	200006d8 	.word	0x200006d8

08008328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3b04      	subs	r3, #4
 8008338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3b04      	subs	r3, #4
 8008346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b04      	subs	r3, #4
 8008356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008358:	4a0c      	ldr	r2, [pc, #48]	@ (800838c <pxPortInitialiseStack+0x64>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3b14      	subs	r3, #20
 8008362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b04      	subs	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f06f 0202 	mvn.w	r2, #2
 8008376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3b20      	subs	r3, #32
 800837c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	08008391 	.word	0x08008391

08008390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800839a:	4b13      	ldr	r3, [pc, #76]	@ (80083e8 <prvTaskExitError+0x58>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d00b      	beq.n	80083bc <prvTaskExitError+0x2c>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	60fb      	str	r3, [r7, #12]
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	e7fd      	b.n	80083b8 <prvTaskExitError+0x28>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60bb      	str	r3, [r7, #8]
}
 80083ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083d0:	bf00      	nop
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0fc      	beq.n	80083d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	2000000c 	.word	0x2000000c
 80083ec:	00000000 	.word	0x00000000

080083f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083f0:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <pxCurrentTCBConst2>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	6808      	ldr	r0, [r1, #0]
 80083f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	f380 8809 	msr	PSP, r0
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	f380 8811 	msr	BASEPRI, r0
 800840a:	4770      	bx	lr
 800840c:	f3af 8000 	nop.w

08008410 <pxCurrentTCBConst2>:
 8008410:	200005b8 	.word	0x200005b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008418:	4808      	ldr	r0, [pc, #32]	@ (800843c <prvPortStartFirstTask+0x24>)
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f380 8808 	msr	MSP, r0
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f380 8814 	msr	CONTROL, r0
 800842a:	b662      	cpsie	i
 800842c:	b661      	cpsie	f
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	df00      	svc	0
 8008438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800843a:	bf00      	nop
 800843c:	e000ed08 	.word	0xe000ed08

08008440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008446:	4b47      	ldr	r3, [pc, #284]	@ (8008564 <xPortStartScheduler+0x124>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a47      	ldr	r2, [pc, #284]	@ (8008568 <xPortStartScheduler+0x128>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10b      	bne.n	8008468 <xPortStartScheduler+0x28>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	613b      	str	r3, [r7, #16]
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008468:	4b3e      	ldr	r3, [pc, #248]	@ (8008564 <xPortStartScheduler+0x124>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a3f      	ldr	r2, [pc, #252]	@ (800856c <xPortStartScheduler+0x12c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10b      	bne.n	800848a <xPortStartScheduler+0x4a>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60fb      	str	r3, [r7, #12]
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	e7fd      	b.n	8008486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800848a:	4b39      	ldr	r3, [pc, #228]	@ (8008570 <xPortStartScheduler+0x130>)
 800848c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	22ff      	movs	r2, #255	@ 0xff
 800849a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	4b31      	ldr	r3, [pc, #196]	@ (8008574 <xPortStartScheduler+0x134>)
 80084b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084b2:	4b31      	ldr	r3, [pc, #196]	@ (8008578 <xPortStartScheduler+0x138>)
 80084b4:	2207      	movs	r2, #7
 80084b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084b8:	e009      	b.n	80084ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80084ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008578 <xPortStartScheduler+0x138>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3b01      	subs	r3, #1
 80084c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008578 <xPortStartScheduler+0x138>)
 80084c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d6:	2b80      	cmp	r3, #128	@ 0x80
 80084d8:	d0ef      	beq.n	80084ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084da:	4b27      	ldr	r3, [pc, #156]	@ (8008578 <xPortStartScheduler+0x138>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f1c3 0307 	rsb	r3, r3, #7
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d00b      	beq.n	80084fe <xPortStartScheduler+0xbe>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60bb      	str	r3, [r7, #8]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008578 <xPortStartScheduler+0x138>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	021b      	lsls	r3, r3, #8
 8008504:	4a1c      	ldr	r2, [pc, #112]	@ (8008578 <xPortStartScheduler+0x138>)
 8008506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008508:	4b1b      	ldr	r3, [pc, #108]	@ (8008578 <xPortStartScheduler+0x138>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008510:	4a19      	ldr	r2, [pc, #100]	@ (8008578 <xPortStartScheduler+0x138>)
 8008512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	b2da      	uxtb	r2, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800851c:	4b17      	ldr	r3, [pc, #92]	@ (800857c <xPortStartScheduler+0x13c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a16      	ldr	r2, [pc, #88]	@ (800857c <xPortStartScheduler+0x13c>)
 8008522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008528:	4b14      	ldr	r3, [pc, #80]	@ (800857c <xPortStartScheduler+0x13c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a13      	ldr	r2, [pc, #76]	@ (800857c <xPortStartScheduler+0x13c>)
 800852e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008534:	f000 f8da 	bl	80086ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008538:	4b11      	ldr	r3, [pc, #68]	@ (8008580 <xPortStartScheduler+0x140>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800853e:	f000 f8f9 	bl	8008734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008542:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <xPortStartScheduler+0x144>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a0f      	ldr	r2, [pc, #60]	@ (8008584 <xPortStartScheduler+0x144>)
 8008548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800854c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800854e:	f7ff ff63 	bl	8008418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008552:	f7ff fcdf 	bl	8007f14 <vTaskSwitchContext>
	prvTaskExitError();
 8008556:	f7ff ff1b 	bl	8008390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	e000ed00 	.word	0xe000ed00
 8008568:	410fc271 	.word	0x410fc271
 800856c:	410fc270 	.word	0x410fc270
 8008570:	e000e400 	.word	0xe000e400
 8008574:	200006e4 	.word	0x200006e4
 8008578:	200006e8 	.word	0x200006e8
 800857c:	e000ed20 	.word	0xe000ed20
 8008580:	2000000c 	.word	0x2000000c
 8008584:	e000ef34 	.word	0xe000ef34

08008588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	607b      	str	r3, [r7, #4]
}
 80085a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085a2:	4b10      	ldr	r3, [pc, #64]	@ (80085e4 <vPortEnterCritical+0x5c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	4a0e      	ldr	r2, [pc, #56]	@ (80085e4 <vPortEnterCritical+0x5c>)
 80085aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085ac:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <vPortEnterCritical+0x5c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d110      	bne.n	80085d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <vPortEnterCritical+0x60>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	603b      	str	r3, [r7, #0]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <vPortEnterCritical+0x4a>
	}
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	2000000c 	.word	0x2000000c
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085f2:	4b12      	ldr	r3, [pc, #72]	@ (800863c <vPortExitCritical+0x50>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <vPortExitCritical+0x26>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	607b      	str	r3, [r7, #4]
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	e7fd      	b.n	800860e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008612:	4b0a      	ldr	r3, [pc, #40]	@ (800863c <vPortExitCritical+0x50>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3b01      	subs	r3, #1
 8008618:	4a08      	ldr	r2, [pc, #32]	@ (800863c <vPortExitCritical+0x50>)
 800861a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800861c:	4b07      	ldr	r3, [pc, #28]	@ (800863c <vPortExitCritical+0x50>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d105      	bne.n	8008630 <vPortExitCritical+0x44>
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800862e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	2000000c 	.word	0x2000000c

08008640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008640:	f3ef 8009 	mrs	r0, PSP
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4b15      	ldr	r3, [pc, #84]	@ (80086a0 <pxCurrentTCBConst>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	f01e 0f10 	tst.w	lr, #16
 8008650:	bf08      	it	eq
 8008652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	6010      	str	r0, [r2, #0]
 800865c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008664:	f380 8811 	msr	BASEPRI, r0
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f7ff fc50 	bl	8007f14 <vTaskSwitchContext>
 8008674:	f04f 0000 	mov.w	r0, #0
 8008678:	f380 8811 	msr	BASEPRI, r0
 800867c:	bc09      	pop	{r0, r3}
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	6808      	ldr	r0, [r1, #0]
 8008682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008686:	f01e 0f10 	tst.w	lr, #16
 800868a:	bf08      	it	eq
 800868c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008690:	f380 8809 	msr	PSP, r0
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w

080086a0 <pxCurrentTCBConst>:
 80086a0:	200005b8 	.word	0x200005b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop

080086a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	607b      	str	r3, [r7, #4]
}
 80086c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086c2:	f7ff fb6d 	bl	8007da0 <xTaskIncrementTick>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086cc:	4b06      	ldr	r3, [pc, #24]	@ (80086e8 <SysTick_Handler+0x40>)
 80086ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	2300      	movs	r3, #0
 80086d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f383 8811 	msr	BASEPRI, r3
}
 80086de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <vPortSetupTimerInterrupt+0x34>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008724 <vPortSetupTimerInterrupt+0x38>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <vPortSetupTimerInterrupt+0x3c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a0a      	ldr	r2, [pc, #40]	@ (800872c <vPortSetupTimerInterrupt+0x40>)
 8008702:	fba2 2303 	umull	r2, r3, r2, r3
 8008706:	099b      	lsrs	r3, r3, #6
 8008708:	4a09      	ldr	r2, [pc, #36]	@ (8008730 <vPortSetupTimerInterrupt+0x44>)
 800870a:	3b01      	subs	r3, #1
 800870c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800870e:	4b04      	ldr	r3, [pc, #16]	@ (8008720 <vPortSetupTimerInterrupt+0x34>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000e010 	.word	0xe000e010
 8008724:	e000e018 	.word	0xe000e018
 8008728:	20000000 	.word	0x20000000
 800872c:	10624dd3 	.word	0x10624dd3
 8008730:	e000e014 	.word	0xe000e014

08008734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008744 <vPortEnableVFP+0x10>
 8008738:	6801      	ldr	r1, [r0, #0]
 800873a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800873e:	6001      	str	r1, [r0, #0]
 8008740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008742:	bf00      	nop
 8008744:	e000ed88 	.word	0xe000ed88

08008748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08a      	sub	sp, #40	@ 0x28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008750:	2300      	movs	r3, #0
 8008752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008754:	f7ff fa78 	bl	8007c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008758:	4b5c      	ldr	r3, [pc, #368]	@ (80088cc <pvPortMalloc+0x184>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008760:	f000 f924 	bl	80089ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008764:	4b5a      	ldr	r3, [pc, #360]	@ (80088d0 <pvPortMalloc+0x188>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	f040 8095 	bne.w	800889c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01e      	beq.n	80087b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008778:	2208      	movs	r2, #8
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4413      	add	r3, r2
 800877e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	2b00      	cmp	r3, #0
 8008788:	d015      	beq.n	80087b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f023 0307 	bic.w	r3, r3, #7
 8008790:	3308      	adds	r3, #8
 8008792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <pvPortMalloc+0x6e>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	617b      	str	r3, [r7, #20]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d06f      	beq.n	800889c <pvPortMalloc+0x154>
 80087bc:	4b45      	ldr	r3, [pc, #276]	@ (80088d4 <pvPortMalloc+0x18c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d86a      	bhi.n	800889c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087c6:	4b44      	ldr	r3, [pc, #272]	@ (80088d8 <pvPortMalloc+0x190>)
 80087c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087ca:	4b43      	ldr	r3, [pc, #268]	@ (80088d8 <pvPortMalloc+0x190>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087d0:	e004      	b.n	80087dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d903      	bls.n	80087ee <pvPortMalloc+0xa6>
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f1      	bne.n	80087d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087ee:	4b37      	ldr	r3, [pc, #220]	@ (80088cc <pvPortMalloc+0x184>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d051      	beq.n	800889c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2208      	movs	r2, #8
 80087fe:	4413      	add	r3, r2
 8008800:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	1ad2      	subs	r2, r2, r3
 8008812:	2308      	movs	r3, #8
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	429a      	cmp	r2, r3
 8008818:	d920      	bls.n	800885c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800881a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <pvPortMalloc+0xfc>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	613b      	str	r3, [r7, #16]
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008856:	69b8      	ldr	r0, [r7, #24]
 8008858:	f000 f90a 	bl	8008a70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800885c:	4b1d      	ldr	r3, [pc, #116]	@ (80088d4 <pvPortMalloc+0x18c>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	4a1b      	ldr	r2, [pc, #108]	@ (80088d4 <pvPortMalloc+0x18c>)
 8008868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800886a:	4b1a      	ldr	r3, [pc, #104]	@ (80088d4 <pvPortMalloc+0x18c>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b1b      	ldr	r3, [pc, #108]	@ (80088dc <pvPortMalloc+0x194>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d203      	bcs.n	800887e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008876:	4b17      	ldr	r3, [pc, #92]	@ (80088d4 <pvPortMalloc+0x18c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a18      	ldr	r2, [pc, #96]	@ (80088dc <pvPortMalloc+0x194>)
 800887c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	4b13      	ldr	r3, [pc, #76]	@ (80088d0 <pvPortMalloc+0x188>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	431a      	orrs	r2, r3
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008892:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <pvPortMalloc+0x198>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	4a11      	ldr	r2, [pc, #68]	@ (80088e0 <pvPortMalloc+0x198>)
 800889a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800889c:	f7ff f9e2 	bl	8007c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00b      	beq.n	80088c2 <pvPortMalloc+0x17a>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	60fb      	str	r3, [r7, #12]
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	e7fd      	b.n	80088be <pvPortMalloc+0x176>
	return pvReturn;
 80088c2:	69fb      	ldr	r3, [r7, #28]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3728      	adds	r7, #40	@ 0x28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	200046f4 	.word	0x200046f4
 80088d0:	20004708 	.word	0x20004708
 80088d4:	200046f8 	.word	0x200046f8
 80088d8:	200046ec 	.word	0x200046ec
 80088dc:	200046fc 	.word	0x200046fc
 80088e0:	20004700 	.word	0x20004700

080088e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d04f      	beq.n	8008996 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088f6:	2308      	movs	r3, #8
 80088f8:	425b      	negs	r3, r3
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	4413      	add	r3, r2
 80088fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	4b25      	ldr	r3, [pc, #148]	@ (80089a0 <vPortFree+0xbc>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4013      	ands	r3, r2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <vPortFree+0x46>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	60fb      	str	r3, [r7, #12]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <vPortFree+0x66>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60bb      	str	r3, [r7, #8]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	4b14      	ldr	r3, [pc, #80]	@ (80089a0 <vPortFree+0xbc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4013      	ands	r3, r2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01e      	beq.n	8008996 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11a      	bne.n	8008996 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	4b0e      	ldr	r3, [pc, #56]	@ (80089a0 <vPortFree+0xbc>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	43db      	mvns	r3, r3
 800896a:	401a      	ands	r2, r3
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008970:	f7ff f96a 	bl	8007c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	4b0a      	ldr	r3, [pc, #40]	@ (80089a4 <vPortFree+0xc0>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4413      	add	r3, r2
 800897e:	4a09      	ldr	r2, [pc, #36]	@ (80089a4 <vPortFree+0xc0>)
 8008980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008982:	6938      	ldr	r0, [r7, #16]
 8008984:	f000 f874 	bl	8008a70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008988:	4b07      	ldr	r3, [pc, #28]	@ (80089a8 <vPortFree+0xc4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3301      	adds	r3, #1
 800898e:	4a06      	ldr	r2, [pc, #24]	@ (80089a8 <vPortFree+0xc4>)
 8008990:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008992:	f7ff f967 	bl	8007c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008996:	bf00      	nop
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20004708 	.word	0x20004708
 80089a4:	200046f8 	.word	0x200046f8
 80089a8:	20004704 	.word	0x20004704

080089ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80089b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089b8:	4b27      	ldr	r3, [pc, #156]	@ (8008a58 <prvHeapInit+0xac>)
 80089ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00c      	beq.n	80089e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3307      	adds	r3, #7
 80089ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0307 	bic.w	r3, r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	4a1f      	ldr	r2, [pc, #124]	@ (8008a58 <prvHeapInit+0xac>)
 80089dc:	4413      	add	r3, r2
 80089de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089e4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a5c <prvHeapInit+0xb0>)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089ea:	4b1c      	ldr	r3, [pc, #112]	@ (8008a5c <prvHeapInit+0xb0>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	4413      	add	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089f8:	2208      	movs	r2, #8
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0307 	bic.w	r3, r3, #7
 8008a06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a15      	ldr	r2, [pc, #84]	@ (8008a60 <prvHeapInit+0xb4>)
 8008a0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a0e:	4b14      	ldr	r3, [pc, #80]	@ (8008a60 <prvHeapInit+0xb4>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2200      	movs	r2, #0
 8008a14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a16:	4b12      	ldr	r3, [pc, #72]	@ (8008a60 <prvHeapInit+0xb4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	1ad2      	subs	r2, r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a60 <prvHeapInit+0xb4>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4a0a      	ldr	r2, [pc, #40]	@ (8008a64 <prvHeapInit+0xb8>)
 8008a3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4a09      	ldr	r2, [pc, #36]	@ (8008a68 <prvHeapInit+0xbc>)
 8008a42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a44:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <prvHeapInit+0xc0>)
 8008a46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a4a:	601a      	str	r2, [r3, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	200006ec 	.word	0x200006ec
 8008a5c:	200046ec 	.word	0x200046ec
 8008a60:	200046f4 	.word	0x200046f4
 8008a64:	200046fc 	.word	0x200046fc
 8008a68:	200046f8 	.word	0x200046f8
 8008a6c:	20004708 	.word	0x20004708

08008a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a78:	4b28      	ldr	r3, [pc, #160]	@ (8008b1c <prvInsertBlockIntoFreeList+0xac>)
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e002      	b.n	8008a84 <prvInsertBlockIntoFreeList+0x14>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d8f7      	bhi.n	8008a7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4413      	add	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d108      	bne.n	8008ab2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	441a      	add	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d118      	bne.n	8008af8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b15      	ldr	r3, [pc, #84]	@ (8008b20 <prvInsertBlockIntoFreeList+0xb0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d00d      	beq.n	8008aee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	441a      	add	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e008      	b.n	8008b00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008aee:	4b0c      	ldr	r3, [pc, #48]	@ (8008b20 <prvInsertBlockIntoFreeList+0xb0>)
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	e003      	b.n	8008b00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d002      	beq.n	8008b0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	200046ec 	.word	0x200046ec
 8008b20:	200046f4 	.word	0x200046f4

08008b24 <std>:
 8008b24:	2300      	movs	r3, #0
 8008b26:	b510      	push	{r4, lr}
 8008b28:	4604      	mov	r4, r0
 8008b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b32:	6083      	str	r3, [r0, #8]
 8008b34:	8181      	strh	r1, [r0, #12]
 8008b36:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b38:	81c2      	strh	r2, [r0, #14]
 8008b3a:	6183      	str	r3, [r0, #24]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	2208      	movs	r2, #8
 8008b40:	305c      	adds	r0, #92	@ 0x5c
 8008b42:	f000 f906 	bl	8008d52 <memset>
 8008b46:	4b0d      	ldr	r3, [pc, #52]	@ (8008b7c <std+0x58>)
 8008b48:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b80 <std+0x5c>)
 8008b4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b84 <std+0x60>)
 8008b50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b52:	4b0d      	ldr	r3, [pc, #52]	@ (8008b88 <std+0x64>)
 8008b54:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b56:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <std+0x68>)
 8008b58:	6224      	str	r4, [r4, #32]
 8008b5a:	429c      	cmp	r4, r3
 8008b5c:	d006      	beq.n	8008b6c <std+0x48>
 8008b5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b62:	4294      	cmp	r4, r2
 8008b64:	d002      	beq.n	8008b6c <std+0x48>
 8008b66:	33d0      	adds	r3, #208	@ 0xd0
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	d105      	bne.n	8008b78 <std+0x54>
 8008b6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b74:	f000 b9bc 	b.w	8008ef0 <__retarget_lock_init_recursive>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08008ccd 	.word	0x08008ccd
 8008b80:	08008cef 	.word	0x08008cef
 8008b84:	08008d27 	.word	0x08008d27
 8008b88:	08008d4b 	.word	0x08008d4b
 8008b8c:	2000470c 	.word	0x2000470c

08008b90 <stdio_exit_handler>:
 8008b90:	4a02      	ldr	r2, [pc, #8]	@ (8008b9c <stdio_exit_handler+0xc>)
 8008b92:	4903      	ldr	r1, [pc, #12]	@ (8008ba0 <stdio_exit_handler+0x10>)
 8008b94:	4803      	ldr	r0, [pc, #12]	@ (8008ba4 <stdio_exit_handler+0x14>)
 8008b96:	f000 b869 	b.w	8008c6c <_fwalk_sglue>
 8008b9a:	bf00      	nop
 8008b9c:	20000010 	.word	0x20000010
 8008ba0:	08009791 	.word	0x08009791
 8008ba4:	20000020 	.word	0x20000020

08008ba8 <cleanup_stdio>:
 8008ba8:	6841      	ldr	r1, [r0, #4]
 8008baa:	4b0c      	ldr	r3, [pc, #48]	@ (8008bdc <cleanup_stdio+0x34>)
 8008bac:	4299      	cmp	r1, r3
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	d001      	beq.n	8008bb8 <cleanup_stdio+0x10>
 8008bb4:	f000 fdec 	bl	8009790 <_fflush_r>
 8008bb8:	68a1      	ldr	r1, [r4, #8]
 8008bba:	4b09      	ldr	r3, [pc, #36]	@ (8008be0 <cleanup_stdio+0x38>)
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d002      	beq.n	8008bc6 <cleanup_stdio+0x1e>
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fde5 	bl	8009790 <_fflush_r>
 8008bc6:	68e1      	ldr	r1, [r4, #12]
 8008bc8:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <cleanup_stdio+0x3c>)
 8008bca:	4299      	cmp	r1, r3
 8008bcc:	d004      	beq.n	8008bd8 <cleanup_stdio+0x30>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd4:	f000 bddc 	b.w	8009790 <_fflush_r>
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	bf00      	nop
 8008bdc:	2000470c 	.word	0x2000470c
 8008be0:	20004774 	.word	0x20004774
 8008be4:	200047dc 	.word	0x200047dc

08008be8 <global_stdio_init.part.0>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <global_stdio_init.part.0+0x30>)
 8008bec:	4c0b      	ldr	r4, [pc, #44]	@ (8008c1c <global_stdio_init.part.0+0x34>)
 8008bee:	4a0c      	ldr	r2, [pc, #48]	@ (8008c20 <global_stdio_init.part.0+0x38>)
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2104      	movs	r1, #4
 8008bf8:	f7ff ff94 	bl	8008b24 <std>
 8008bfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c00:	2201      	movs	r2, #1
 8008c02:	2109      	movs	r1, #9
 8008c04:	f7ff ff8e 	bl	8008b24 <std>
 8008c08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c12:	2112      	movs	r1, #18
 8008c14:	f7ff bf86 	b.w	8008b24 <std>
 8008c18:	20004844 	.word	0x20004844
 8008c1c:	2000470c 	.word	0x2000470c
 8008c20:	08008b91 	.word	0x08008b91

08008c24 <__sfp_lock_acquire>:
 8008c24:	4801      	ldr	r0, [pc, #4]	@ (8008c2c <__sfp_lock_acquire+0x8>)
 8008c26:	f000 b964 	b.w	8008ef2 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	2000484d 	.word	0x2000484d

08008c30 <__sfp_lock_release>:
 8008c30:	4801      	ldr	r0, [pc, #4]	@ (8008c38 <__sfp_lock_release+0x8>)
 8008c32:	f000 b95f 	b.w	8008ef4 <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	2000484d 	.word	0x2000484d

08008c3c <__sinit>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	4604      	mov	r4, r0
 8008c40:	f7ff fff0 	bl	8008c24 <__sfp_lock_acquire>
 8008c44:	6a23      	ldr	r3, [r4, #32]
 8008c46:	b11b      	cbz	r3, 8008c50 <__sinit+0x14>
 8008c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4c:	f7ff bff0 	b.w	8008c30 <__sfp_lock_release>
 8008c50:	4b04      	ldr	r3, [pc, #16]	@ (8008c64 <__sinit+0x28>)
 8008c52:	6223      	str	r3, [r4, #32]
 8008c54:	4b04      	ldr	r3, [pc, #16]	@ (8008c68 <__sinit+0x2c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1f5      	bne.n	8008c48 <__sinit+0xc>
 8008c5c:	f7ff ffc4 	bl	8008be8 <global_stdio_init.part.0>
 8008c60:	e7f2      	b.n	8008c48 <__sinit+0xc>
 8008c62:	bf00      	nop
 8008c64:	08008ba9 	.word	0x08008ba9
 8008c68:	20004844 	.word	0x20004844

08008c6c <_fwalk_sglue>:
 8008c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c70:	4607      	mov	r7, r0
 8008c72:	4688      	mov	r8, r1
 8008c74:	4614      	mov	r4, r2
 8008c76:	2600      	movs	r6, #0
 8008c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8008c80:	d505      	bpl.n	8008c8e <_fwalk_sglue+0x22>
 8008c82:	6824      	ldr	r4, [r4, #0]
 8008c84:	2c00      	cmp	r4, #0
 8008c86:	d1f7      	bne.n	8008c78 <_fwalk_sglue+0xc>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8e:	89ab      	ldrh	r3, [r5, #12]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d907      	bls.n	8008ca4 <_fwalk_sglue+0x38>
 8008c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	d003      	beq.n	8008ca4 <_fwalk_sglue+0x38>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	47c0      	blx	r8
 8008ca2:	4306      	orrs	r6, r0
 8008ca4:	3568      	adds	r5, #104	@ 0x68
 8008ca6:	e7e9      	b.n	8008c7c <_fwalk_sglue+0x10>

08008ca8 <iprintf>:
 8008ca8:	b40f      	push	{r0, r1, r2, r3}
 8008caa:	b507      	push	{r0, r1, r2, lr}
 8008cac:	4906      	ldr	r1, [pc, #24]	@ (8008cc8 <iprintf+0x20>)
 8008cae:	ab04      	add	r3, sp, #16
 8008cb0:	6808      	ldr	r0, [r1, #0]
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	6881      	ldr	r1, [r0, #8]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f000 fa3f 	bl	800913c <_vfiprintf_r>
 8008cbe:	b003      	add	sp, #12
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr
 8008cc8:	2000001c 	.word	0x2000001c

08008ccc <__sread>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	460c      	mov	r4, r1
 8008cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd4:	f000 f8be 	bl	8008e54 <_read_r>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	bfab      	itete	ge
 8008cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cde:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce0:	181b      	addge	r3, r3, r0
 8008ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ce6:	bfac      	ite	ge
 8008ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cea:	81a3      	strhlt	r3, [r4, #12]
 8008cec:	bd10      	pop	{r4, pc}

08008cee <__swrite>:
 8008cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf2:	461f      	mov	r7, r3
 8008cf4:	898b      	ldrh	r3, [r1, #12]
 8008cf6:	05db      	lsls	r3, r3, #23
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	d505      	bpl.n	8008d0c <__swrite+0x1e>
 8008d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d04:	2302      	movs	r3, #2
 8008d06:	2200      	movs	r2, #0
 8008d08:	f000 f892 	bl	8008e30 <_lseek_r>
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	4632      	mov	r2, r6
 8008d1a:	463b      	mov	r3, r7
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d22:	f000 b8a9 	b.w	8008e78 <_write_r>

08008d26 <__sseek>:
 8008d26:	b510      	push	{r4, lr}
 8008d28:	460c      	mov	r4, r1
 8008d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2e:	f000 f87f 	bl	8008e30 <_lseek_r>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	bf15      	itete	ne
 8008d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d42:	81a3      	strheq	r3, [r4, #12]
 8008d44:	bf18      	it	ne
 8008d46:	81a3      	strhne	r3, [r4, #12]
 8008d48:	bd10      	pop	{r4, pc}

08008d4a <__sclose>:
 8008d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4e:	f000 b809 	b.w	8008d64 <_close_r>

08008d52 <memset>:
 8008d52:	4402      	add	r2, r0
 8008d54:	4603      	mov	r3, r0
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d100      	bne.n	8008d5c <memset+0xa>
 8008d5a:	4770      	bx	lr
 8008d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8008d60:	e7f9      	b.n	8008d56 <memset+0x4>
	...

08008d64 <_close_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d06      	ldr	r5, [pc, #24]	@ (8008d80 <_close_r+0x1c>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7f9 f8ab 	bl	8001eca <_close>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_close_r+0x1a>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_close_r+0x1a>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	20004848 	.word	0x20004848

08008d84 <_reclaim_reent>:
 8008d84:	4b29      	ldr	r3, [pc, #164]	@ (8008e2c <_reclaim_reent+0xa8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4283      	cmp	r3, r0
 8008d8a:	b570      	push	{r4, r5, r6, lr}
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	d04b      	beq.n	8008e28 <_reclaim_reent+0xa4>
 8008d90:	69c3      	ldr	r3, [r0, #28]
 8008d92:	b1ab      	cbz	r3, 8008dc0 <_reclaim_reent+0x3c>
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	b16b      	cbz	r3, 8008db4 <_reclaim_reent+0x30>
 8008d98:	2500      	movs	r5, #0
 8008d9a:	69e3      	ldr	r3, [r4, #28]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	5959      	ldr	r1, [r3, r5]
 8008da0:	2900      	cmp	r1, #0
 8008da2:	d13b      	bne.n	8008e1c <_reclaim_reent+0x98>
 8008da4:	3504      	adds	r5, #4
 8008da6:	2d80      	cmp	r5, #128	@ 0x80
 8008da8:	d1f7      	bne.n	8008d9a <_reclaim_reent+0x16>
 8008daa:	69e3      	ldr	r3, [r4, #28]
 8008dac:	4620      	mov	r0, r4
 8008dae:	68d9      	ldr	r1, [r3, #12]
 8008db0:	f000 f8a2 	bl	8008ef8 <_free_r>
 8008db4:	69e3      	ldr	r3, [r4, #28]
 8008db6:	6819      	ldr	r1, [r3, #0]
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0x3c>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f89c 	bl	8008ef8 <_free_r>
 8008dc0:	6961      	ldr	r1, [r4, #20]
 8008dc2:	b111      	cbz	r1, 8008dca <_reclaim_reent+0x46>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 f897 	bl	8008ef8 <_free_r>
 8008dca:	69e1      	ldr	r1, [r4, #28]
 8008dcc:	b111      	cbz	r1, 8008dd4 <_reclaim_reent+0x50>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f892 	bl	8008ef8 <_free_r>
 8008dd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x5a>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 f88d 	bl	8008ef8 <_free_r>
 8008dde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008de0:	b111      	cbz	r1, 8008de8 <_reclaim_reent+0x64>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f888 	bl	8008ef8 <_free_r>
 8008de8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dea:	b111      	cbz	r1, 8008df2 <_reclaim_reent+0x6e>
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 f883 	bl	8008ef8 <_free_r>
 8008df2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008df4:	b111      	cbz	r1, 8008dfc <_reclaim_reent+0x78>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f87e 	bl	8008ef8 <_free_r>
 8008dfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dfe:	b111      	cbz	r1, 8008e06 <_reclaim_reent+0x82>
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 f879 	bl	8008ef8 <_free_r>
 8008e06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e08:	b111      	cbz	r1, 8008e10 <_reclaim_reent+0x8c>
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 f874 	bl	8008ef8 <_free_r>
 8008e10:	6a23      	ldr	r3, [r4, #32]
 8008e12:	b14b      	cbz	r3, 8008e28 <_reclaim_reent+0xa4>
 8008e14:	4620      	mov	r0, r4
 8008e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e1a:	4718      	bx	r3
 8008e1c:	680e      	ldr	r6, [r1, #0]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f86a 	bl	8008ef8 <_free_r>
 8008e24:	4631      	mov	r1, r6
 8008e26:	e7bb      	b.n	8008da0 <_reclaim_reent+0x1c>
 8008e28:	bd70      	pop	{r4, r5, r6, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000001c 	.word	0x2000001c

08008e30 <_lseek_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d07      	ldr	r5, [pc, #28]	@ (8008e50 <_lseek_r+0x20>)
 8008e34:	4604      	mov	r4, r0
 8008e36:	4608      	mov	r0, r1
 8008e38:	4611      	mov	r1, r2
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	602a      	str	r2, [r5, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f7f9 f86a 	bl	8001f18 <_lseek>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_lseek_r+0x1e>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_lseek_r+0x1e>
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	20004848 	.word	0x20004848

08008e54 <_read_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	@ (8008e74 <_read_r+0x20>)
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	2200      	movs	r2, #0
 8008e60:	602a      	str	r2, [r5, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f7f9 f814 	bl	8001e90 <_read>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_read_r+0x1e>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_read_r+0x1e>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20004848 	.word	0x20004848

08008e78 <_write_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	@ (8008e98 <_write_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7f8 fdaa 	bl	80019e0 <_write>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_write_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_write_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20004848 	.word	0x20004848

08008e9c <__errno>:
 8008e9c:	4b01      	ldr	r3, [pc, #4]	@ (8008ea4 <__errno+0x8>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	2000001c 	.word	0x2000001c

08008ea8 <__libc_init_array>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8008ee0 <__libc_init_array+0x38>)
 8008eac:	4c0d      	ldr	r4, [pc, #52]	@ (8008ee4 <__libc_init_array+0x3c>)
 8008eae:	1b64      	subs	r4, r4, r5
 8008eb0:	10a4      	asrs	r4, r4, #2
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	42a6      	cmp	r6, r4
 8008eb6:	d109      	bne.n	8008ecc <__libc_init_array+0x24>
 8008eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ee8 <__libc_init_array+0x40>)
 8008eba:	4c0c      	ldr	r4, [pc, #48]	@ (8008eec <__libc_init_array+0x44>)
 8008ebc:	f000 fdb8 	bl	8009a30 <_init>
 8008ec0:	1b64      	subs	r4, r4, r5
 8008ec2:	10a4      	asrs	r4, r4, #2
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	42a6      	cmp	r6, r4
 8008ec8:	d105      	bne.n	8008ed6 <__libc_init_array+0x2e>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed0:	4798      	blx	r3
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	e7ee      	b.n	8008eb4 <__libc_init_array+0xc>
 8008ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eda:	4798      	blx	r3
 8008edc:	3601      	adds	r6, #1
 8008ede:	e7f2      	b.n	8008ec6 <__libc_init_array+0x1e>
 8008ee0:	08009e04 	.word	0x08009e04
 8008ee4:	08009e04 	.word	0x08009e04
 8008ee8:	08009e04 	.word	0x08009e04
 8008eec:	08009e08 	.word	0x08009e08

08008ef0 <__retarget_lock_init_recursive>:
 8008ef0:	4770      	bx	lr

08008ef2 <__retarget_lock_acquire_recursive>:
 8008ef2:	4770      	bx	lr

08008ef4 <__retarget_lock_release_recursive>:
 8008ef4:	4770      	bx	lr
	...

08008ef8 <_free_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4605      	mov	r5, r0
 8008efc:	2900      	cmp	r1, #0
 8008efe:	d041      	beq.n	8008f84 <_free_r+0x8c>
 8008f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f04:	1f0c      	subs	r4, r1, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bfb8      	it	lt
 8008f0a:	18e4      	addlt	r4, r4, r3
 8008f0c:	f000 f8e0 	bl	80090d0 <__malloc_lock>
 8008f10:	4a1d      	ldr	r2, [pc, #116]	@ (8008f88 <_free_r+0x90>)
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	b933      	cbnz	r3, 8008f24 <_free_r+0x2c>
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	6014      	str	r4, [r2, #0]
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f20:	f000 b8dc 	b.w	80090dc <__malloc_unlock>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d908      	bls.n	8008f3a <_free_r+0x42>
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	1821      	adds	r1, r4, r0
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf01      	itttt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	1809      	addeq	r1, r1, r0
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	e7ed      	b.n	8008f16 <_free_r+0x1e>
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b10b      	cbz	r3, 8008f44 <_free_r+0x4c>
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d9fa      	bls.n	8008f3a <_free_r+0x42>
 8008f44:	6811      	ldr	r1, [r2, #0]
 8008f46:	1850      	adds	r0, r2, r1
 8008f48:	42a0      	cmp	r0, r4
 8008f4a:	d10b      	bne.n	8008f64 <_free_r+0x6c>
 8008f4c:	6820      	ldr	r0, [r4, #0]
 8008f4e:	4401      	add	r1, r0
 8008f50:	1850      	adds	r0, r2, r1
 8008f52:	4283      	cmp	r3, r0
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	d1e0      	bne.n	8008f1a <_free_r+0x22>
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	6053      	str	r3, [r2, #4]
 8008f5e:	4408      	add	r0, r1
 8008f60:	6010      	str	r0, [r2, #0]
 8008f62:	e7da      	b.n	8008f1a <_free_r+0x22>
 8008f64:	d902      	bls.n	8008f6c <_free_r+0x74>
 8008f66:	230c      	movs	r3, #12
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	e7d6      	b.n	8008f1a <_free_r+0x22>
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	1821      	adds	r1, r4, r0
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf04      	itt	eq
 8008f74:	6819      	ldreq	r1, [r3, #0]
 8008f76:	685b      	ldreq	r3, [r3, #4]
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	bf04      	itt	eq
 8008f7c:	1809      	addeq	r1, r1, r0
 8008f7e:	6021      	streq	r1, [r4, #0]
 8008f80:	6054      	str	r4, [r2, #4]
 8008f82:	e7ca      	b.n	8008f1a <_free_r+0x22>
 8008f84:	bd38      	pop	{r3, r4, r5, pc}
 8008f86:	bf00      	nop
 8008f88:	20004854 	.word	0x20004854

08008f8c <sbrk_aligned>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8008fcc <sbrk_aligned+0x40>)
 8008f90:	460c      	mov	r4, r1
 8008f92:	6831      	ldr	r1, [r6, #0]
 8008f94:	4605      	mov	r5, r0
 8008f96:	b911      	cbnz	r1, 8008f9e <sbrk_aligned+0x12>
 8008f98:	f000 fcb6 	bl	8009908 <_sbrk_r>
 8008f9c:	6030      	str	r0, [r6, #0]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 fcb1 	bl	8009908 <_sbrk_r>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d103      	bne.n	8008fb2 <sbrk_aligned+0x26>
 8008faa:	f04f 34ff 	mov.w	r4, #4294967295
 8008fae:	4620      	mov	r0, r4
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	1cc4      	adds	r4, r0, #3
 8008fb4:	f024 0403 	bic.w	r4, r4, #3
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d0f8      	beq.n	8008fae <sbrk_aligned+0x22>
 8008fbc:	1a21      	subs	r1, r4, r0
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fca2 	bl	8009908 <_sbrk_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d1f2      	bne.n	8008fae <sbrk_aligned+0x22>
 8008fc8:	e7ef      	b.n	8008faa <sbrk_aligned+0x1e>
 8008fca:	bf00      	nop
 8008fcc:	20004850 	.word	0x20004850

08008fd0 <_malloc_r>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	1ccd      	adds	r5, r1, #3
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	db01      	blt.n	8008fec <_malloc_r+0x1c>
 8008fe8:	42a9      	cmp	r1, r5
 8008fea:	d904      	bls.n	8008ff6 <_malloc_r+0x26>
 8008fec:	230c      	movs	r3, #12
 8008fee:	6033      	str	r3, [r6, #0]
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090cc <_malloc_r+0xfc>
 8008ffa:	f000 f869 	bl	80090d0 <__malloc_lock>
 8008ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8009002:	461c      	mov	r4, r3
 8009004:	bb44      	cbnz	r4, 8009058 <_malloc_r+0x88>
 8009006:	4629      	mov	r1, r5
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff ffbf 	bl	8008f8c <sbrk_aligned>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	4604      	mov	r4, r0
 8009012:	d158      	bne.n	80090c6 <_malloc_r+0xf6>
 8009014:	f8d8 4000 	ldr.w	r4, [r8]
 8009018:	4627      	mov	r7, r4
 800901a:	2f00      	cmp	r7, #0
 800901c:	d143      	bne.n	80090a6 <_malloc_r+0xd6>
 800901e:	2c00      	cmp	r4, #0
 8009020:	d04b      	beq.n	80090ba <_malloc_r+0xea>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	4639      	mov	r1, r7
 8009026:	4630      	mov	r0, r6
 8009028:	eb04 0903 	add.w	r9, r4, r3
 800902c:	f000 fc6c 	bl	8009908 <_sbrk_r>
 8009030:	4581      	cmp	r9, r0
 8009032:	d142      	bne.n	80090ba <_malloc_r+0xea>
 8009034:	6821      	ldr	r1, [r4, #0]
 8009036:	1a6d      	subs	r5, r5, r1
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ffa6 	bl	8008f8c <sbrk_aligned>
 8009040:	3001      	adds	r0, #1
 8009042:	d03a      	beq.n	80090ba <_malloc_r+0xea>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	442b      	add	r3, r5
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	f8d8 3000 	ldr.w	r3, [r8]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	bb62      	cbnz	r2, 80090ac <_malloc_r+0xdc>
 8009052:	f8c8 7000 	str.w	r7, [r8]
 8009056:	e00f      	b.n	8009078 <_malloc_r+0xa8>
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	1b52      	subs	r2, r2, r5
 800905c:	d420      	bmi.n	80090a0 <_malloc_r+0xd0>
 800905e:	2a0b      	cmp	r2, #11
 8009060:	d917      	bls.n	8009092 <_malloc_r+0xc2>
 8009062:	1961      	adds	r1, r4, r5
 8009064:	42a3      	cmp	r3, r4
 8009066:	6025      	str	r5, [r4, #0]
 8009068:	bf18      	it	ne
 800906a:	6059      	strne	r1, [r3, #4]
 800906c:	6863      	ldr	r3, [r4, #4]
 800906e:	bf08      	it	eq
 8009070:	f8c8 1000 	streq.w	r1, [r8]
 8009074:	5162      	str	r2, [r4, r5]
 8009076:	604b      	str	r3, [r1, #4]
 8009078:	4630      	mov	r0, r6
 800907a:	f000 f82f 	bl	80090dc <__malloc_unlock>
 800907e:	f104 000b 	add.w	r0, r4, #11
 8009082:	1d23      	adds	r3, r4, #4
 8009084:	f020 0007 	bic.w	r0, r0, #7
 8009088:	1ac2      	subs	r2, r0, r3
 800908a:	bf1c      	itt	ne
 800908c:	1a1b      	subne	r3, r3, r0
 800908e:	50a3      	strne	r3, [r4, r2]
 8009090:	e7af      	b.n	8008ff2 <_malloc_r+0x22>
 8009092:	6862      	ldr	r2, [r4, #4]
 8009094:	42a3      	cmp	r3, r4
 8009096:	bf0c      	ite	eq
 8009098:	f8c8 2000 	streq.w	r2, [r8]
 800909c:	605a      	strne	r2, [r3, #4]
 800909e:	e7eb      	b.n	8009078 <_malloc_r+0xa8>
 80090a0:	4623      	mov	r3, r4
 80090a2:	6864      	ldr	r4, [r4, #4]
 80090a4:	e7ae      	b.n	8009004 <_malloc_r+0x34>
 80090a6:	463c      	mov	r4, r7
 80090a8:	687f      	ldr	r7, [r7, #4]
 80090aa:	e7b6      	b.n	800901a <_malloc_r+0x4a>
 80090ac:	461a      	mov	r2, r3
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d1fb      	bne.n	80090ac <_malloc_r+0xdc>
 80090b4:	2300      	movs	r3, #0
 80090b6:	6053      	str	r3, [r2, #4]
 80090b8:	e7de      	b.n	8009078 <_malloc_r+0xa8>
 80090ba:	230c      	movs	r3, #12
 80090bc:	6033      	str	r3, [r6, #0]
 80090be:	4630      	mov	r0, r6
 80090c0:	f000 f80c 	bl	80090dc <__malloc_unlock>
 80090c4:	e794      	b.n	8008ff0 <_malloc_r+0x20>
 80090c6:	6005      	str	r5, [r0, #0]
 80090c8:	e7d6      	b.n	8009078 <_malloc_r+0xa8>
 80090ca:	bf00      	nop
 80090cc:	20004854 	.word	0x20004854

080090d0 <__malloc_lock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	@ (80090d8 <__malloc_lock+0x8>)
 80090d2:	f7ff bf0e 	b.w	8008ef2 <__retarget_lock_acquire_recursive>
 80090d6:	bf00      	nop
 80090d8:	2000484c 	.word	0x2000484c

080090dc <__malloc_unlock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	@ (80090e4 <__malloc_unlock+0x8>)
 80090de:	f7ff bf09 	b.w	8008ef4 <__retarget_lock_release_recursive>
 80090e2:	bf00      	nop
 80090e4:	2000484c 	.word	0x2000484c

080090e8 <__sfputc_r>:
 80090e8:	6893      	ldr	r3, [r2, #8]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	b410      	push	{r4}
 80090f0:	6093      	str	r3, [r2, #8]
 80090f2:	da08      	bge.n	8009106 <__sfputc_r+0x1e>
 80090f4:	6994      	ldr	r4, [r2, #24]
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	db01      	blt.n	80090fe <__sfputc_r+0x16>
 80090fa:	290a      	cmp	r1, #10
 80090fc:	d103      	bne.n	8009106 <__sfputc_r+0x1e>
 80090fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009102:	f000 bb6d 	b.w	80097e0 <__swbuf_r>
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	1c58      	adds	r0, r3, #1
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	7019      	strb	r1, [r3, #0]
 800910e:	4608      	mov	r0, r1
 8009110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009114:	4770      	bx	lr

08009116 <__sfputs_r>:
 8009116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009118:	4606      	mov	r6, r0
 800911a:	460f      	mov	r7, r1
 800911c:	4614      	mov	r4, r2
 800911e:	18d5      	adds	r5, r2, r3
 8009120:	42ac      	cmp	r4, r5
 8009122:	d101      	bne.n	8009128 <__sfputs_r+0x12>
 8009124:	2000      	movs	r0, #0
 8009126:	e007      	b.n	8009138 <__sfputs_r+0x22>
 8009128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912c:	463a      	mov	r2, r7
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ffda 	bl	80090e8 <__sfputc_r>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d1f3      	bne.n	8009120 <__sfputs_r+0xa>
 8009138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800913c <_vfiprintf_r>:
 800913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	460d      	mov	r5, r1
 8009142:	b09d      	sub	sp, #116	@ 0x74
 8009144:	4614      	mov	r4, r2
 8009146:	4698      	mov	r8, r3
 8009148:	4606      	mov	r6, r0
 800914a:	b118      	cbz	r0, 8009154 <_vfiprintf_r+0x18>
 800914c:	6a03      	ldr	r3, [r0, #32]
 800914e:	b90b      	cbnz	r3, 8009154 <_vfiprintf_r+0x18>
 8009150:	f7ff fd74 	bl	8008c3c <__sinit>
 8009154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009156:	07d9      	lsls	r1, r3, #31
 8009158:	d405      	bmi.n	8009166 <_vfiprintf_r+0x2a>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d402      	bmi.n	8009166 <_vfiprintf_r+0x2a>
 8009160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009162:	f7ff fec6 	bl	8008ef2 <__retarget_lock_acquire_recursive>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	071b      	lsls	r3, r3, #28
 800916a:	d501      	bpl.n	8009170 <_vfiprintf_r+0x34>
 800916c:	692b      	ldr	r3, [r5, #16]
 800916e:	b99b      	cbnz	r3, 8009198 <_vfiprintf_r+0x5c>
 8009170:	4629      	mov	r1, r5
 8009172:	4630      	mov	r0, r6
 8009174:	f000 fb72 	bl	800985c <__swsetup_r>
 8009178:	b170      	cbz	r0, 8009198 <_vfiprintf_r+0x5c>
 800917a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800917c:	07dc      	lsls	r4, r3, #31
 800917e:	d504      	bpl.n	800918a <_vfiprintf_r+0x4e>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	b01d      	add	sp, #116	@ 0x74
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	0598      	lsls	r0, r3, #22
 800918e:	d4f7      	bmi.n	8009180 <_vfiprintf_r+0x44>
 8009190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009192:	f7ff feaf 	bl	8008ef4 <__retarget_lock_release_recursive>
 8009196:	e7f3      	b.n	8009180 <_vfiprintf_r+0x44>
 8009198:	2300      	movs	r3, #0
 800919a:	9309      	str	r3, [sp, #36]	@ 0x24
 800919c:	2320      	movs	r3, #32
 800919e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a6:	2330      	movs	r3, #48	@ 0x30
 80091a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009358 <_vfiprintf_r+0x21c>
 80091ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091b0:	f04f 0901 	mov.w	r9, #1
 80091b4:	4623      	mov	r3, r4
 80091b6:	469a      	mov	sl, r3
 80091b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091bc:	b10a      	cbz	r2, 80091c2 <_vfiprintf_r+0x86>
 80091be:	2a25      	cmp	r2, #37	@ 0x25
 80091c0:	d1f9      	bne.n	80091b6 <_vfiprintf_r+0x7a>
 80091c2:	ebba 0b04 	subs.w	fp, sl, r4
 80091c6:	d00b      	beq.n	80091e0 <_vfiprintf_r+0xa4>
 80091c8:	465b      	mov	r3, fp
 80091ca:	4622      	mov	r2, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ffa1 	bl	8009116 <__sfputs_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	f000 80a7 	beq.w	8009328 <_vfiprintf_r+0x1ec>
 80091da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091dc:	445a      	add	r2, fp
 80091de:	9209      	str	r2, [sp, #36]	@ 0x24
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 809f 	beq.w	8009328 <_vfiprintf_r+0x1ec>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295
 80091f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f4:	f10a 0a01 	add.w	sl, sl, #1
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009200:	931a      	str	r3, [sp, #104]	@ 0x68
 8009202:	4654      	mov	r4, sl
 8009204:	2205      	movs	r2, #5
 8009206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920a:	4853      	ldr	r0, [pc, #332]	@ (8009358 <_vfiprintf_r+0x21c>)
 800920c:	f7f6 ffe0 	bl	80001d0 <memchr>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	b9d8      	cbnz	r0, 800924c <_vfiprintf_r+0x110>
 8009214:	06d1      	lsls	r1, r2, #27
 8009216:	bf44      	itt	mi
 8009218:	2320      	movmi	r3, #32
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800921e:	0713      	lsls	r3, r2, #28
 8009220:	bf44      	itt	mi
 8009222:	232b      	movmi	r3, #43	@ 0x2b
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009228:	f89a 3000 	ldrb.w	r3, [sl]
 800922c:	2b2a      	cmp	r3, #42	@ 0x2a
 800922e:	d015      	beq.n	800925c <_vfiprintf_r+0x120>
 8009230:	9a07      	ldr	r2, [sp, #28]
 8009232:	4654      	mov	r4, sl
 8009234:	2000      	movs	r0, #0
 8009236:	f04f 0c0a 	mov.w	ip, #10
 800923a:	4621      	mov	r1, r4
 800923c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009240:	3b30      	subs	r3, #48	@ 0x30
 8009242:	2b09      	cmp	r3, #9
 8009244:	d94b      	bls.n	80092de <_vfiprintf_r+0x1a2>
 8009246:	b1b0      	cbz	r0, 8009276 <_vfiprintf_r+0x13a>
 8009248:	9207      	str	r2, [sp, #28]
 800924a:	e014      	b.n	8009276 <_vfiprintf_r+0x13a>
 800924c:	eba0 0308 	sub.w	r3, r0, r8
 8009250:	fa09 f303 	lsl.w	r3, r9, r3
 8009254:	4313      	orrs	r3, r2
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	46a2      	mov	sl, r4
 800925a:	e7d2      	b.n	8009202 <_vfiprintf_r+0xc6>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d19      	adds	r1, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9103      	str	r1, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfbb      	ittet	lt
 8009268:	425b      	neglt	r3, r3
 800926a:	f042 0202 	orrlt.w	r2, r2, #2
 800926e:	9307      	strge	r3, [sp, #28]
 8009270:	9307      	strlt	r3, [sp, #28]
 8009272:	bfb8      	it	lt
 8009274:	9204      	strlt	r2, [sp, #16]
 8009276:	7823      	ldrb	r3, [r4, #0]
 8009278:	2b2e      	cmp	r3, #46	@ 0x2e
 800927a:	d10a      	bne.n	8009292 <_vfiprintf_r+0x156>
 800927c:	7863      	ldrb	r3, [r4, #1]
 800927e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009280:	d132      	bne.n	80092e8 <_vfiprintf_r+0x1ac>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	9203      	str	r2, [sp, #12]
 800928a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800928e:	3402      	adds	r4, #2
 8009290:	9305      	str	r3, [sp, #20]
 8009292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009368 <_vfiprintf_r+0x22c>
 8009296:	7821      	ldrb	r1, [r4, #0]
 8009298:	2203      	movs	r2, #3
 800929a:	4650      	mov	r0, sl
 800929c:	f7f6 ff98 	bl	80001d0 <memchr>
 80092a0:	b138      	cbz	r0, 80092b2 <_vfiprintf_r+0x176>
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	eba0 000a 	sub.w	r0, r0, sl
 80092a8:	2240      	movs	r2, #64	@ 0x40
 80092aa:	4082      	lsls	r2, r0
 80092ac:	4313      	orrs	r3, r2
 80092ae:	3401      	adds	r4, #1
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b6:	4829      	ldr	r0, [pc, #164]	@ (800935c <_vfiprintf_r+0x220>)
 80092b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092bc:	2206      	movs	r2, #6
 80092be:	f7f6 ff87 	bl	80001d0 <memchr>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d03f      	beq.n	8009346 <_vfiprintf_r+0x20a>
 80092c6:	4b26      	ldr	r3, [pc, #152]	@ (8009360 <_vfiprintf_r+0x224>)
 80092c8:	bb1b      	cbnz	r3, 8009312 <_vfiprintf_r+0x1d6>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	3307      	adds	r3, #7
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	3308      	adds	r3, #8
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d8:	443b      	add	r3, r7
 80092da:	9309      	str	r3, [sp, #36]	@ 0x24
 80092dc:	e76a      	b.n	80091b4 <_vfiprintf_r+0x78>
 80092de:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e2:	460c      	mov	r4, r1
 80092e4:	2001      	movs	r0, #1
 80092e6:	e7a8      	b.n	800923a <_vfiprintf_r+0xfe>
 80092e8:	2300      	movs	r3, #0
 80092ea:	3401      	adds	r4, #1
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	4619      	mov	r1, r3
 80092f0:	f04f 0c0a 	mov.w	ip, #10
 80092f4:	4620      	mov	r0, r4
 80092f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fa:	3a30      	subs	r2, #48	@ 0x30
 80092fc:	2a09      	cmp	r2, #9
 80092fe:	d903      	bls.n	8009308 <_vfiprintf_r+0x1cc>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0c6      	beq.n	8009292 <_vfiprintf_r+0x156>
 8009304:	9105      	str	r1, [sp, #20]
 8009306:	e7c4      	b.n	8009292 <_vfiprintf_r+0x156>
 8009308:	fb0c 2101 	mla	r1, ip, r1, r2
 800930c:	4604      	mov	r4, r0
 800930e:	2301      	movs	r3, #1
 8009310:	e7f0      	b.n	80092f4 <_vfiprintf_r+0x1b8>
 8009312:	ab03      	add	r3, sp, #12
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	462a      	mov	r2, r5
 8009318:	4b12      	ldr	r3, [pc, #72]	@ (8009364 <_vfiprintf_r+0x228>)
 800931a:	a904      	add	r1, sp, #16
 800931c:	4630      	mov	r0, r6
 800931e:	f3af 8000 	nop.w
 8009322:	4607      	mov	r7, r0
 8009324:	1c78      	adds	r0, r7, #1
 8009326:	d1d6      	bne.n	80092d6 <_vfiprintf_r+0x19a>
 8009328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800932a:	07d9      	lsls	r1, r3, #31
 800932c:	d405      	bmi.n	800933a <_vfiprintf_r+0x1fe>
 800932e:	89ab      	ldrh	r3, [r5, #12]
 8009330:	059a      	lsls	r2, r3, #22
 8009332:	d402      	bmi.n	800933a <_vfiprintf_r+0x1fe>
 8009334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009336:	f7ff fddd 	bl	8008ef4 <__retarget_lock_release_recursive>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	065b      	lsls	r3, r3, #25
 800933e:	f53f af1f 	bmi.w	8009180 <_vfiprintf_r+0x44>
 8009342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009344:	e71e      	b.n	8009184 <_vfiprintf_r+0x48>
 8009346:	ab03      	add	r3, sp, #12
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	462a      	mov	r2, r5
 800934c:	4b05      	ldr	r3, [pc, #20]	@ (8009364 <_vfiprintf_r+0x228>)
 800934e:	a904      	add	r1, sp, #16
 8009350:	4630      	mov	r0, r6
 8009352:	f000 f879 	bl	8009448 <_printf_i>
 8009356:	e7e4      	b.n	8009322 <_vfiprintf_r+0x1e6>
 8009358:	08009dc8 	.word	0x08009dc8
 800935c:	08009dd2 	.word	0x08009dd2
 8009360:	00000000 	.word	0x00000000
 8009364:	08009117 	.word	0x08009117
 8009368:	08009dce 	.word	0x08009dce

0800936c <_printf_common>:
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	4616      	mov	r6, r2
 8009372:	4698      	mov	r8, r3
 8009374:	688a      	ldr	r2, [r1, #8]
 8009376:	690b      	ldr	r3, [r1, #16]
 8009378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800937c:	4293      	cmp	r3, r2
 800937e:	bfb8      	it	lt
 8009380:	4613      	movlt	r3, r2
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009388:	4607      	mov	r7, r0
 800938a:	460c      	mov	r4, r1
 800938c:	b10a      	cbz	r2, 8009392 <_printf_common+0x26>
 800938e:	3301      	adds	r3, #1
 8009390:	6033      	str	r3, [r6, #0]
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	0699      	lsls	r1, r3, #26
 8009396:	bf42      	ittt	mi
 8009398:	6833      	ldrmi	r3, [r6, #0]
 800939a:	3302      	addmi	r3, #2
 800939c:	6033      	strmi	r3, [r6, #0]
 800939e:	6825      	ldr	r5, [r4, #0]
 80093a0:	f015 0506 	ands.w	r5, r5, #6
 80093a4:	d106      	bne.n	80093b4 <_printf_common+0x48>
 80093a6:	f104 0a19 	add.w	sl, r4, #25
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	6832      	ldr	r2, [r6, #0]
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dc26      	bgt.n	8009402 <_printf_common+0x96>
 80093b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	3b00      	subs	r3, #0
 80093bc:	bf18      	it	ne
 80093be:	2301      	movne	r3, #1
 80093c0:	0692      	lsls	r2, r2, #26
 80093c2:	d42b      	bmi.n	800941c <_printf_common+0xb0>
 80093c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093c8:	4641      	mov	r1, r8
 80093ca:	4638      	mov	r0, r7
 80093cc:	47c8      	blx	r9
 80093ce:	3001      	adds	r0, #1
 80093d0:	d01e      	beq.n	8009410 <_printf_common+0xa4>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	f003 0306 	and.w	r3, r3, #6
 80093da:	2b04      	cmp	r3, #4
 80093dc:	bf02      	ittt	eq
 80093de:	68e5      	ldreq	r5, [r4, #12]
 80093e0:	6833      	ldreq	r3, [r6, #0]
 80093e2:	1aed      	subeq	r5, r5, r3
 80093e4:	68a3      	ldr	r3, [r4, #8]
 80093e6:	bf0c      	ite	eq
 80093e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ec:	2500      	movne	r5, #0
 80093ee:	4293      	cmp	r3, r2
 80093f0:	bfc4      	itt	gt
 80093f2:	1a9b      	subgt	r3, r3, r2
 80093f4:	18ed      	addgt	r5, r5, r3
 80093f6:	2600      	movs	r6, #0
 80093f8:	341a      	adds	r4, #26
 80093fa:	42b5      	cmp	r5, r6
 80093fc:	d11a      	bne.n	8009434 <_printf_common+0xc8>
 80093fe:	2000      	movs	r0, #0
 8009400:	e008      	b.n	8009414 <_printf_common+0xa8>
 8009402:	2301      	movs	r3, #1
 8009404:	4652      	mov	r2, sl
 8009406:	4641      	mov	r1, r8
 8009408:	4638      	mov	r0, r7
 800940a:	47c8      	blx	r9
 800940c:	3001      	adds	r0, #1
 800940e:	d103      	bne.n	8009418 <_printf_common+0xac>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	3501      	adds	r5, #1
 800941a:	e7c6      	b.n	80093aa <_printf_common+0x3e>
 800941c:	18e1      	adds	r1, r4, r3
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	2030      	movs	r0, #48	@ 0x30
 8009422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009426:	4422      	add	r2, r4
 8009428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800942c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009430:	3302      	adds	r3, #2
 8009432:	e7c7      	b.n	80093c4 <_printf_common+0x58>
 8009434:	2301      	movs	r3, #1
 8009436:	4622      	mov	r2, r4
 8009438:	4641      	mov	r1, r8
 800943a:	4638      	mov	r0, r7
 800943c:	47c8      	blx	r9
 800943e:	3001      	adds	r0, #1
 8009440:	d0e6      	beq.n	8009410 <_printf_common+0xa4>
 8009442:	3601      	adds	r6, #1
 8009444:	e7d9      	b.n	80093fa <_printf_common+0x8e>
	...

08009448 <_printf_i>:
 8009448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800944c:	7e0f      	ldrb	r7, [r1, #24]
 800944e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009450:	2f78      	cmp	r7, #120	@ 0x78
 8009452:	4691      	mov	r9, r2
 8009454:	4680      	mov	r8, r0
 8009456:	460c      	mov	r4, r1
 8009458:	469a      	mov	sl, r3
 800945a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800945e:	d807      	bhi.n	8009470 <_printf_i+0x28>
 8009460:	2f62      	cmp	r7, #98	@ 0x62
 8009462:	d80a      	bhi.n	800947a <_printf_i+0x32>
 8009464:	2f00      	cmp	r7, #0
 8009466:	f000 80d2 	beq.w	800960e <_printf_i+0x1c6>
 800946a:	2f58      	cmp	r7, #88	@ 0x58
 800946c:	f000 80b9 	beq.w	80095e2 <_printf_i+0x19a>
 8009470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009478:	e03a      	b.n	80094f0 <_printf_i+0xa8>
 800947a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800947e:	2b15      	cmp	r3, #21
 8009480:	d8f6      	bhi.n	8009470 <_printf_i+0x28>
 8009482:	a101      	add	r1, pc, #4	@ (adr r1, 8009488 <_printf_i+0x40>)
 8009484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094f5 	.word	0x080094f5
 8009490:	08009471 	.word	0x08009471
 8009494:	08009471 	.word	0x08009471
 8009498:	08009471 	.word	0x08009471
 800949c:	08009471 	.word	0x08009471
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	08009471 	.word	0x08009471
 80094a8:	08009471 	.word	0x08009471
 80094ac:	08009471 	.word	0x08009471
 80094b0:	08009471 	.word	0x08009471
 80094b4:	080095f5 	.word	0x080095f5
 80094b8:	0800951f 	.word	0x0800951f
 80094bc:	080095af 	.word	0x080095af
 80094c0:	08009471 	.word	0x08009471
 80094c4:	08009471 	.word	0x08009471
 80094c8:	08009617 	.word	0x08009617
 80094cc:	08009471 	.word	0x08009471
 80094d0:	0800951f 	.word	0x0800951f
 80094d4:	08009471 	.word	0x08009471
 80094d8:	08009471 	.word	0x08009471
 80094dc:	080095b7 	.word	0x080095b7
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6032      	str	r2, [r6, #0]
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094f0:	2301      	movs	r3, #1
 80094f2:	e09d      	b.n	8009630 <_printf_i+0x1e8>
 80094f4:	6833      	ldr	r3, [r6, #0]
 80094f6:	6820      	ldr	r0, [r4, #0]
 80094f8:	1d19      	adds	r1, r3, #4
 80094fa:	6031      	str	r1, [r6, #0]
 80094fc:	0606      	lsls	r6, r0, #24
 80094fe:	d501      	bpl.n	8009504 <_printf_i+0xbc>
 8009500:	681d      	ldr	r5, [r3, #0]
 8009502:	e003      	b.n	800950c <_printf_i+0xc4>
 8009504:	0645      	lsls	r5, r0, #25
 8009506:	d5fb      	bpl.n	8009500 <_printf_i+0xb8>
 8009508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800950c:	2d00      	cmp	r5, #0
 800950e:	da03      	bge.n	8009518 <_printf_i+0xd0>
 8009510:	232d      	movs	r3, #45	@ 0x2d
 8009512:	426d      	negs	r5, r5
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009518:	4859      	ldr	r0, [pc, #356]	@ (8009680 <_printf_i+0x238>)
 800951a:	230a      	movs	r3, #10
 800951c:	e011      	b.n	8009542 <_printf_i+0xfa>
 800951e:	6821      	ldr	r1, [r4, #0]
 8009520:	6833      	ldr	r3, [r6, #0]
 8009522:	0608      	lsls	r0, r1, #24
 8009524:	f853 5b04 	ldr.w	r5, [r3], #4
 8009528:	d402      	bmi.n	8009530 <_printf_i+0xe8>
 800952a:	0649      	lsls	r1, r1, #25
 800952c:	bf48      	it	mi
 800952e:	b2ad      	uxthmi	r5, r5
 8009530:	2f6f      	cmp	r7, #111	@ 0x6f
 8009532:	4853      	ldr	r0, [pc, #332]	@ (8009680 <_printf_i+0x238>)
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	bf14      	ite	ne
 8009538:	230a      	movne	r3, #10
 800953a:	2308      	moveq	r3, #8
 800953c:	2100      	movs	r1, #0
 800953e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009542:	6866      	ldr	r6, [r4, #4]
 8009544:	60a6      	str	r6, [r4, #8]
 8009546:	2e00      	cmp	r6, #0
 8009548:	bfa2      	ittt	ge
 800954a:	6821      	ldrge	r1, [r4, #0]
 800954c:	f021 0104 	bicge.w	r1, r1, #4
 8009550:	6021      	strge	r1, [r4, #0]
 8009552:	b90d      	cbnz	r5, 8009558 <_printf_i+0x110>
 8009554:	2e00      	cmp	r6, #0
 8009556:	d04b      	beq.n	80095f0 <_printf_i+0x1a8>
 8009558:	4616      	mov	r6, r2
 800955a:	fbb5 f1f3 	udiv	r1, r5, r3
 800955e:	fb03 5711 	mls	r7, r3, r1, r5
 8009562:	5dc7      	ldrb	r7, [r0, r7]
 8009564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009568:	462f      	mov	r7, r5
 800956a:	42bb      	cmp	r3, r7
 800956c:	460d      	mov	r5, r1
 800956e:	d9f4      	bls.n	800955a <_printf_i+0x112>
 8009570:	2b08      	cmp	r3, #8
 8009572:	d10b      	bne.n	800958c <_printf_i+0x144>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07df      	lsls	r7, r3, #31
 8009578:	d508      	bpl.n	800958c <_printf_i+0x144>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	6861      	ldr	r1, [r4, #4]
 800957e:	4299      	cmp	r1, r3
 8009580:	bfde      	ittt	le
 8009582:	2330      	movle	r3, #48	@ 0x30
 8009584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800958c:	1b92      	subs	r2, r2, r6
 800958e:	6122      	str	r2, [r4, #16]
 8009590:	f8cd a000 	str.w	sl, [sp]
 8009594:	464b      	mov	r3, r9
 8009596:	aa03      	add	r2, sp, #12
 8009598:	4621      	mov	r1, r4
 800959a:	4640      	mov	r0, r8
 800959c:	f7ff fee6 	bl	800936c <_printf_common>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d14a      	bne.n	800963a <_printf_i+0x1f2>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b004      	add	sp, #16
 80095aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	f043 0320 	orr.w	r3, r3, #32
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	4833      	ldr	r0, [pc, #204]	@ (8009684 <_printf_i+0x23c>)
 80095b8:	2778      	movs	r7, #120	@ 0x78
 80095ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	6831      	ldr	r1, [r6, #0]
 80095c2:	061f      	lsls	r7, r3, #24
 80095c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095c8:	d402      	bmi.n	80095d0 <_printf_i+0x188>
 80095ca:	065f      	lsls	r7, r3, #25
 80095cc:	bf48      	it	mi
 80095ce:	b2ad      	uxthmi	r5, r5
 80095d0:	6031      	str	r1, [r6, #0]
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	bf44      	itt	mi
 80095d6:	f043 0320 	orrmi.w	r3, r3, #32
 80095da:	6023      	strmi	r3, [r4, #0]
 80095dc:	b11d      	cbz	r5, 80095e6 <_printf_i+0x19e>
 80095de:	2310      	movs	r3, #16
 80095e0:	e7ac      	b.n	800953c <_printf_i+0xf4>
 80095e2:	4827      	ldr	r0, [pc, #156]	@ (8009680 <_printf_i+0x238>)
 80095e4:	e7e9      	b.n	80095ba <_printf_i+0x172>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	f023 0320 	bic.w	r3, r3, #32
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	e7f6      	b.n	80095de <_printf_i+0x196>
 80095f0:	4616      	mov	r6, r2
 80095f2:	e7bd      	b.n	8009570 <_printf_i+0x128>
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	6825      	ldr	r5, [r4, #0]
 80095f8:	6961      	ldr	r1, [r4, #20]
 80095fa:	1d18      	adds	r0, r3, #4
 80095fc:	6030      	str	r0, [r6, #0]
 80095fe:	062e      	lsls	r6, r5, #24
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	d501      	bpl.n	8009608 <_printf_i+0x1c0>
 8009604:	6019      	str	r1, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0x1c6>
 8009608:	0668      	lsls	r0, r5, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0x1bc>
 800960c:	8019      	strh	r1, [r3, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	4616      	mov	r6, r2
 8009614:	e7bc      	b.n	8009590 <_printf_i+0x148>
 8009616:	6833      	ldr	r3, [r6, #0]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	6032      	str	r2, [r6, #0]
 800961c:	681e      	ldr	r6, [r3, #0]
 800961e:	6862      	ldr	r2, [r4, #4]
 8009620:	2100      	movs	r1, #0
 8009622:	4630      	mov	r0, r6
 8009624:	f7f6 fdd4 	bl	80001d0 <memchr>
 8009628:	b108      	cbz	r0, 800962e <_printf_i+0x1e6>
 800962a:	1b80      	subs	r0, r0, r6
 800962c:	6060      	str	r0, [r4, #4]
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	2300      	movs	r3, #0
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009638:	e7aa      	b.n	8009590 <_printf_i+0x148>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	4632      	mov	r2, r6
 800963e:	4649      	mov	r1, r9
 8009640:	4640      	mov	r0, r8
 8009642:	47d0      	blx	sl
 8009644:	3001      	adds	r0, #1
 8009646:	d0ad      	beq.n	80095a4 <_printf_i+0x15c>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	079b      	lsls	r3, r3, #30
 800964c:	d413      	bmi.n	8009676 <_printf_i+0x22e>
 800964e:	68e0      	ldr	r0, [r4, #12]
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	4298      	cmp	r0, r3
 8009654:	bfb8      	it	lt
 8009656:	4618      	movlt	r0, r3
 8009658:	e7a6      	b.n	80095a8 <_printf_i+0x160>
 800965a:	2301      	movs	r3, #1
 800965c:	4632      	mov	r2, r6
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d09d      	beq.n	80095a4 <_printf_i+0x15c>
 8009668:	3501      	adds	r5, #1
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	9903      	ldr	r1, [sp, #12]
 800966e:	1a5b      	subs	r3, r3, r1
 8009670:	42ab      	cmp	r3, r5
 8009672:	dcf2      	bgt.n	800965a <_printf_i+0x212>
 8009674:	e7eb      	b.n	800964e <_printf_i+0x206>
 8009676:	2500      	movs	r5, #0
 8009678:	f104 0619 	add.w	r6, r4, #25
 800967c:	e7f5      	b.n	800966a <_printf_i+0x222>
 800967e:	bf00      	nop
 8009680:	08009dd9 	.word	0x08009dd9
 8009684:	08009dea 	.word	0x08009dea

08009688 <__sflush_r>:
 8009688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	0716      	lsls	r6, r2, #28
 8009692:	4605      	mov	r5, r0
 8009694:	460c      	mov	r4, r1
 8009696:	d454      	bmi.n	8009742 <__sflush_r+0xba>
 8009698:	684b      	ldr	r3, [r1, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	dc02      	bgt.n	80096a4 <__sflush_r+0x1c>
 800969e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dd48      	ble.n	8009736 <__sflush_r+0xae>
 80096a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	d045      	beq.n	8009736 <__sflush_r+0xae>
 80096aa:	2300      	movs	r3, #0
 80096ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096b0:	682f      	ldr	r7, [r5, #0]
 80096b2:	6a21      	ldr	r1, [r4, #32]
 80096b4:	602b      	str	r3, [r5, #0]
 80096b6:	d030      	beq.n	800971a <__sflush_r+0x92>
 80096b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	0759      	lsls	r1, r3, #29
 80096be:	d505      	bpl.n	80096cc <__sflush_r+0x44>
 80096c0:	6863      	ldr	r3, [r4, #4]
 80096c2:	1ad2      	subs	r2, r2, r3
 80096c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096c6:	b10b      	cbz	r3, 80096cc <__sflush_r+0x44>
 80096c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	2300      	movs	r3, #0
 80096ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096d0:	6a21      	ldr	r1, [r4, #32]
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b0      	blx	r6
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	d106      	bne.n	80096ea <__sflush_r+0x62>
 80096dc:	6829      	ldr	r1, [r5, #0]
 80096de:	291d      	cmp	r1, #29
 80096e0:	d82b      	bhi.n	800973a <__sflush_r+0xb2>
 80096e2:	4a2a      	ldr	r2, [pc, #168]	@ (800978c <__sflush_r+0x104>)
 80096e4:	410a      	asrs	r2, r1
 80096e6:	07d6      	lsls	r6, r2, #31
 80096e8:	d427      	bmi.n	800973a <__sflush_r+0xb2>
 80096ea:	2200      	movs	r2, #0
 80096ec:	6062      	str	r2, [r4, #4]
 80096ee:	04d9      	lsls	r1, r3, #19
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	6022      	str	r2, [r4, #0]
 80096f4:	d504      	bpl.n	8009700 <__sflush_r+0x78>
 80096f6:	1c42      	adds	r2, r0, #1
 80096f8:	d101      	bne.n	80096fe <__sflush_r+0x76>
 80096fa:	682b      	ldr	r3, [r5, #0]
 80096fc:	b903      	cbnz	r3, 8009700 <__sflush_r+0x78>
 80096fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009702:	602f      	str	r7, [r5, #0]
 8009704:	b1b9      	cbz	r1, 8009736 <__sflush_r+0xae>
 8009706:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800970a:	4299      	cmp	r1, r3
 800970c:	d002      	beq.n	8009714 <__sflush_r+0x8c>
 800970e:	4628      	mov	r0, r5
 8009710:	f7ff fbf2 	bl	8008ef8 <_free_r>
 8009714:	2300      	movs	r3, #0
 8009716:	6363      	str	r3, [r4, #52]	@ 0x34
 8009718:	e00d      	b.n	8009736 <__sflush_r+0xae>
 800971a:	2301      	movs	r3, #1
 800971c:	4628      	mov	r0, r5
 800971e:	47b0      	blx	r6
 8009720:	4602      	mov	r2, r0
 8009722:	1c50      	adds	r0, r2, #1
 8009724:	d1c9      	bne.n	80096ba <__sflush_r+0x32>
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0c6      	beq.n	80096ba <__sflush_r+0x32>
 800972c:	2b1d      	cmp	r3, #29
 800972e:	d001      	beq.n	8009734 <__sflush_r+0xac>
 8009730:	2b16      	cmp	r3, #22
 8009732:	d11e      	bne.n	8009772 <__sflush_r+0xea>
 8009734:	602f      	str	r7, [r5, #0]
 8009736:	2000      	movs	r0, #0
 8009738:	e022      	b.n	8009780 <__sflush_r+0xf8>
 800973a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800973e:	b21b      	sxth	r3, r3
 8009740:	e01b      	b.n	800977a <__sflush_r+0xf2>
 8009742:	690f      	ldr	r7, [r1, #16]
 8009744:	2f00      	cmp	r7, #0
 8009746:	d0f6      	beq.n	8009736 <__sflush_r+0xae>
 8009748:	0793      	lsls	r3, r2, #30
 800974a:	680e      	ldr	r6, [r1, #0]
 800974c:	bf08      	it	eq
 800974e:	694b      	ldreq	r3, [r1, #20]
 8009750:	600f      	str	r7, [r1, #0]
 8009752:	bf18      	it	ne
 8009754:	2300      	movne	r3, #0
 8009756:	eba6 0807 	sub.w	r8, r6, r7
 800975a:	608b      	str	r3, [r1, #8]
 800975c:	f1b8 0f00 	cmp.w	r8, #0
 8009760:	dde9      	ble.n	8009736 <__sflush_r+0xae>
 8009762:	6a21      	ldr	r1, [r4, #32]
 8009764:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009766:	4643      	mov	r3, r8
 8009768:	463a      	mov	r2, r7
 800976a:	4628      	mov	r0, r5
 800976c:	47b0      	blx	r6
 800976e:	2800      	cmp	r0, #0
 8009770:	dc08      	bgt.n	8009784 <__sflush_r+0xfc>
 8009772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009784:	4407      	add	r7, r0
 8009786:	eba8 0800 	sub.w	r8, r8, r0
 800978a:	e7e7      	b.n	800975c <__sflush_r+0xd4>
 800978c:	dfbffffe 	.word	0xdfbffffe

08009790 <_fflush_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	690b      	ldr	r3, [r1, #16]
 8009794:	4605      	mov	r5, r0
 8009796:	460c      	mov	r4, r1
 8009798:	b913      	cbnz	r3, 80097a0 <_fflush_r+0x10>
 800979a:	2500      	movs	r5, #0
 800979c:	4628      	mov	r0, r5
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	b118      	cbz	r0, 80097aa <_fflush_r+0x1a>
 80097a2:	6a03      	ldr	r3, [r0, #32]
 80097a4:	b90b      	cbnz	r3, 80097aa <_fflush_r+0x1a>
 80097a6:	f7ff fa49 	bl	8008c3c <__sinit>
 80097aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0f3      	beq.n	800979a <_fflush_r+0xa>
 80097b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097b4:	07d0      	lsls	r0, r2, #31
 80097b6:	d404      	bmi.n	80097c2 <_fflush_r+0x32>
 80097b8:	0599      	lsls	r1, r3, #22
 80097ba:	d402      	bmi.n	80097c2 <_fflush_r+0x32>
 80097bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097be:	f7ff fb98 	bl	8008ef2 <__retarget_lock_acquire_recursive>
 80097c2:	4628      	mov	r0, r5
 80097c4:	4621      	mov	r1, r4
 80097c6:	f7ff ff5f 	bl	8009688 <__sflush_r>
 80097ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097cc:	07da      	lsls	r2, r3, #31
 80097ce:	4605      	mov	r5, r0
 80097d0:	d4e4      	bmi.n	800979c <_fflush_r+0xc>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	059b      	lsls	r3, r3, #22
 80097d6:	d4e1      	bmi.n	800979c <_fflush_r+0xc>
 80097d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097da:	f7ff fb8b 	bl	8008ef4 <__retarget_lock_release_recursive>
 80097de:	e7dd      	b.n	800979c <_fflush_r+0xc>

080097e0 <__swbuf_r>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	460e      	mov	r6, r1
 80097e4:	4614      	mov	r4, r2
 80097e6:	4605      	mov	r5, r0
 80097e8:	b118      	cbz	r0, 80097f2 <__swbuf_r+0x12>
 80097ea:	6a03      	ldr	r3, [r0, #32]
 80097ec:	b90b      	cbnz	r3, 80097f2 <__swbuf_r+0x12>
 80097ee:	f7ff fa25 	bl	8008c3c <__sinit>
 80097f2:	69a3      	ldr	r3, [r4, #24]
 80097f4:	60a3      	str	r3, [r4, #8]
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	071a      	lsls	r2, r3, #28
 80097fa:	d501      	bpl.n	8009800 <__swbuf_r+0x20>
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	b943      	cbnz	r3, 8009812 <__swbuf_r+0x32>
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f82a 	bl	800985c <__swsetup_r>
 8009808:	b118      	cbz	r0, 8009812 <__swbuf_r+0x32>
 800980a:	f04f 37ff 	mov.w	r7, #4294967295
 800980e:	4638      	mov	r0, r7
 8009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	6922      	ldr	r2, [r4, #16]
 8009816:	1a98      	subs	r0, r3, r2
 8009818:	6963      	ldr	r3, [r4, #20]
 800981a:	b2f6      	uxtb	r6, r6
 800981c:	4283      	cmp	r3, r0
 800981e:	4637      	mov	r7, r6
 8009820:	dc05      	bgt.n	800982e <__swbuf_r+0x4e>
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f7ff ffb3 	bl	8009790 <_fflush_r>
 800982a:	2800      	cmp	r0, #0
 800982c:	d1ed      	bne.n	800980a <__swbuf_r+0x2a>
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	3b01      	subs	r3, #1
 8009832:	60a3      	str	r3, [r4, #8]
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	6022      	str	r2, [r4, #0]
 800983a:	701e      	strb	r6, [r3, #0]
 800983c:	6962      	ldr	r2, [r4, #20]
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	429a      	cmp	r2, r3
 8009842:	d004      	beq.n	800984e <__swbuf_r+0x6e>
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	07db      	lsls	r3, r3, #31
 8009848:	d5e1      	bpl.n	800980e <__swbuf_r+0x2e>
 800984a:	2e0a      	cmp	r6, #10
 800984c:	d1df      	bne.n	800980e <__swbuf_r+0x2e>
 800984e:	4621      	mov	r1, r4
 8009850:	4628      	mov	r0, r5
 8009852:	f7ff ff9d 	bl	8009790 <_fflush_r>
 8009856:	2800      	cmp	r0, #0
 8009858:	d0d9      	beq.n	800980e <__swbuf_r+0x2e>
 800985a:	e7d6      	b.n	800980a <__swbuf_r+0x2a>

0800985c <__swsetup_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4b29      	ldr	r3, [pc, #164]	@ (8009904 <__swsetup_r+0xa8>)
 8009860:	4605      	mov	r5, r0
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	460c      	mov	r4, r1
 8009866:	b118      	cbz	r0, 8009870 <__swsetup_r+0x14>
 8009868:	6a03      	ldr	r3, [r0, #32]
 800986a:	b90b      	cbnz	r3, 8009870 <__swsetup_r+0x14>
 800986c:	f7ff f9e6 	bl	8008c3c <__sinit>
 8009870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009874:	0719      	lsls	r1, r3, #28
 8009876:	d422      	bmi.n	80098be <__swsetup_r+0x62>
 8009878:	06da      	lsls	r2, r3, #27
 800987a:	d407      	bmi.n	800988c <__swsetup_r+0x30>
 800987c:	2209      	movs	r2, #9
 800987e:	602a      	str	r2, [r5, #0]
 8009880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	e033      	b.n	80098f4 <__swsetup_r+0x98>
 800988c:	0758      	lsls	r0, r3, #29
 800988e:	d512      	bpl.n	80098b6 <__swsetup_r+0x5a>
 8009890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009892:	b141      	cbz	r1, 80098a6 <__swsetup_r+0x4a>
 8009894:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009898:	4299      	cmp	r1, r3
 800989a:	d002      	beq.n	80098a2 <__swsetup_r+0x46>
 800989c:	4628      	mov	r0, r5
 800989e:	f7ff fb2b 	bl	8008ef8 <_free_r>
 80098a2:	2300      	movs	r3, #0
 80098a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	2300      	movs	r3, #0
 80098b0:	6063      	str	r3, [r4, #4]
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f043 0308 	orr.w	r3, r3, #8
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	b94b      	cbnz	r3, 80098d6 <__swsetup_r+0x7a>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098cc:	d003      	beq.n	80098d6 <__swsetup_r+0x7a>
 80098ce:	4621      	mov	r1, r4
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f84f 	bl	8009974 <__smakebuf_r>
 80098d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098da:	f013 0201 	ands.w	r2, r3, #1
 80098de:	d00a      	beq.n	80098f6 <__swsetup_r+0x9a>
 80098e0:	2200      	movs	r2, #0
 80098e2:	60a2      	str	r2, [r4, #8]
 80098e4:	6962      	ldr	r2, [r4, #20]
 80098e6:	4252      	negs	r2, r2
 80098e8:	61a2      	str	r2, [r4, #24]
 80098ea:	6922      	ldr	r2, [r4, #16]
 80098ec:	b942      	cbnz	r2, 8009900 <__swsetup_r+0xa4>
 80098ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098f2:	d1c5      	bne.n	8009880 <__swsetup_r+0x24>
 80098f4:	bd38      	pop	{r3, r4, r5, pc}
 80098f6:	0799      	lsls	r1, r3, #30
 80098f8:	bf58      	it	pl
 80098fa:	6962      	ldrpl	r2, [r4, #20]
 80098fc:	60a2      	str	r2, [r4, #8]
 80098fe:	e7f4      	b.n	80098ea <__swsetup_r+0x8e>
 8009900:	2000      	movs	r0, #0
 8009902:	e7f7      	b.n	80098f4 <__swsetup_r+0x98>
 8009904:	2000001c 	.word	0x2000001c

08009908 <_sbrk_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d06      	ldr	r5, [pc, #24]	@ (8009924 <_sbrk_r+0x1c>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	f7f8 fb0e 	bl	8001f34 <_sbrk>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_sbrk_r+0x1a>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_sbrk_r+0x1a>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20004848 	.word	0x20004848

08009928 <__swhatbuf_r>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	460c      	mov	r4, r1
 800992c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009930:	2900      	cmp	r1, #0
 8009932:	b096      	sub	sp, #88	@ 0x58
 8009934:	4615      	mov	r5, r2
 8009936:	461e      	mov	r6, r3
 8009938:	da0d      	bge.n	8009956 <__swhatbuf_r+0x2e>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009940:	f04f 0100 	mov.w	r1, #0
 8009944:	bf14      	ite	ne
 8009946:	2340      	movne	r3, #64	@ 0x40
 8009948:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800994c:	2000      	movs	r0, #0
 800994e:	6031      	str	r1, [r6, #0]
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	b016      	add	sp, #88	@ 0x58
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	466a      	mov	r2, sp
 8009958:	f000 f848 	bl	80099ec <_fstat_r>
 800995c:	2800      	cmp	r0, #0
 800995e:	dbec      	blt.n	800993a <__swhatbuf_r+0x12>
 8009960:	9901      	ldr	r1, [sp, #4]
 8009962:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009966:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800996a:	4259      	negs	r1, r3
 800996c:	4159      	adcs	r1, r3
 800996e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009972:	e7eb      	b.n	800994c <__swhatbuf_r+0x24>

08009974 <__smakebuf_r>:
 8009974:	898b      	ldrh	r3, [r1, #12]
 8009976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009978:	079d      	lsls	r5, r3, #30
 800997a:	4606      	mov	r6, r0
 800997c:	460c      	mov	r4, r1
 800997e:	d507      	bpl.n	8009990 <__smakebuf_r+0x1c>
 8009980:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	2301      	movs	r3, #1
 800998a:	6163      	str	r3, [r4, #20]
 800998c:	b003      	add	sp, #12
 800998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009990:	ab01      	add	r3, sp, #4
 8009992:	466a      	mov	r2, sp
 8009994:	f7ff ffc8 	bl	8009928 <__swhatbuf_r>
 8009998:	9f00      	ldr	r7, [sp, #0]
 800999a:	4605      	mov	r5, r0
 800999c:	4639      	mov	r1, r7
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff fb16 	bl	8008fd0 <_malloc_r>
 80099a4:	b948      	cbnz	r0, 80099ba <__smakebuf_r+0x46>
 80099a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099aa:	059a      	lsls	r2, r3, #22
 80099ac:	d4ee      	bmi.n	800998c <__smakebuf_r+0x18>
 80099ae:	f023 0303 	bic.w	r3, r3, #3
 80099b2:	f043 0302 	orr.w	r3, r3, #2
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	e7e2      	b.n	8009980 <__smakebuf_r+0xc>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	6020      	str	r0, [r4, #0]
 80099be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	9b01      	ldr	r3, [sp, #4]
 80099c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099ca:	b15b      	cbz	r3, 80099e4 <__smakebuf_r+0x70>
 80099cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d0:	4630      	mov	r0, r6
 80099d2:	f000 f81d 	bl	8009a10 <_isatty_r>
 80099d6:	b128      	cbz	r0, 80099e4 <__smakebuf_r+0x70>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	431d      	orrs	r5, r3
 80099e8:	81a5      	strh	r5, [r4, #12]
 80099ea:	e7cf      	b.n	800998c <__smakebuf_r+0x18>

080099ec <_fstat_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	@ (8009a0c <_fstat_r+0x20>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	4611      	mov	r1, r2
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	f7f8 fa72 	bl	8001ee2 <_fstat>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d102      	bne.n	8009a08 <_fstat_r+0x1c>
 8009a02:	682b      	ldr	r3, [r5, #0]
 8009a04:	b103      	cbz	r3, 8009a08 <_fstat_r+0x1c>
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	bd38      	pop	{r3, r4, r5, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20004848 	.word	0x20004848

08009a10 <_isatty_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d06      	ldr	r5, [pc, #24]	@ (8009a2c <_isatty_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	f7f8 fa71 	bl	8001f02 <_isatty>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_isatty_r+0x1a>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_isatty_r+0x1a>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20004848 	.word	0x20004848

08009a30 <_init>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr

08009a3c <_fini>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	bf00      	nop
 8009a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a42:	bc08      	pop	{r3}
 8009a44:	469e      	mov	lr, r3
 8009a46:	4770      	bx	lr
